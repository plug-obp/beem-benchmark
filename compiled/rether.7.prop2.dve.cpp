#include <stdio.h>
#include <string.h>
#include <stdint.h>

typedef uint64_t ulong_long_int_t;
typedef int64_t slong_long_int_t;
typedef uint32_t ulong_int_t;
typedef int32_t slong_int_t;
typedef uint16_t ushort_int_t;
typedef int16_t sshort_int_t;
typedef uint8_t byte_t;
typedef uint8_t ubyte_t;
typedef int8_t sbyte_t;
typedef size_t size_int_t;

// -*- C++ -*- (c) 2010,2015 Petr Rockai <me@mornfall.net>

#include "stdint.h"
#ifdef _WIN32
#include <stdarg.h>
#endif

#ifndef DIVINE_GENERATOR_CESMI_CLIENT_H
#define DIVINE_GENERATOR_CESMI_CLIENT_H

enum cesmi_property_type { cesmi_pt_goal, cesmi_pt_deadlock, cesmi_pt_buchi };
/* the following are bitmasks (i.e. each value should be a power of 2 */
enum cesmi_flags { cesmi_goal = 1, cesmi_accepting = 2, cesmi_first_user_flag = 1 << 8 };

typedef struct {
    uint64_t handle;
    char *memory;
} cesmi_node;

typedef struct cesmi_setup {
    void *loader;
    cesmi_node (*make_node)( const struct cesmi_setup *setup, int size );
    cesmi_node (*clone_node)( const struct cesmi_setup *setup, cesmi_node orig );
    int (*add_property)( struct cesmi_setup *setup, char *id, char *desc, int type );
    void *instance; // per-instance data; never touched by DiVinE
    int property_count; /* filled in by setup */
    int property; /* filled in by loader */
    int instance_initialised;
    void (*add_flag)( struct cesmi_setup *setup, char *name, int id, int type );
    /* extensions at the end are ABI-compatible */
} cesmi_setup;

/* prototypes that CESMI modules need to implement */
#ifdef __cplusplus
extern "C" {
#endif

#ifdef _WIN32 /* augh; but very useful for show_node/show_transition */
int vasprintf(char **result, const char *format, va_list aq);
int asprintf(char **result, const char *format, ...);
#endif

    void  setup             ( cesmi_setup * );
     int  get_initial       ( const cesmi_setup *, int, cesmi_node * );
     int  get_successor     ( const cesmi_setup *, int, cesmi_node, cesmi_node * );
uint64_t  get_flags         ( const cesmi_setup *, cesmi_node );
    char *show_node         ( const cesmi_setup *, cesmi_node );
    char *show_transition   ( const cesmi_setup *, cesmi_node, int );

#ifdef __cplusplus
}
#endif

#endif




struct state_struct_t
{
    struct
    {
        uint16_t Bandwidth:3;
        uint16_t Node_0:4;
        uint16_t Node_1:4;
        uint16_t Node_2:4;
        uint16_t Node_3:4;
        uint16_t Node_4:4;
        uint16_t Node_5:4;
        uint16_t Node_6:4;
        uint16_t Node_7:4;
        uint16_t Node_8:4;
        uint16_t Node_9:4;
        uint16_t Node_10:4;
        uint16_t Node_11:4;
        uint16_t Token:3;
        uint16_t LTL_property:3;
    }
    __attribute__((__packed__)) _control;
    uint8_t in_RT[12];
    uint8_t RT_count;
    struct
    {
        uint8_t i;
    }
    __attribute__((__packed__)) Bandwidth;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_0;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_1;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_2;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_3;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_4;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_5;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_6;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_7;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_8;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_9;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_10;
    struct
    {
        uint8_t rt;
        uint8_t granted;
    }
    __attribute__((__packed__)) Node_11;
    struct
    {
        uint8_t i;
        uint8_t NRT_count;
        uint8_t next;
    }
    __attribute__((__packed__)) Token;
}
__attribute__((__packed__));
int state_size = sizeof(state_struct_t);

int get_initial( const cesmi_setup *setup, int handle, cesmi_node *out ){
    if ( handle != 1 ) return 0;
    *out = setup->make_node( setup, state_size );
    memset( out->memory, 0, state_size );
    state_struct_t &_out = *reinterpret_cast< state_struct_t * >( out->memory );
    _out.RT_count = 0;
    _out._control.Bandwidth = 0;
    _out.Node_0.granted = 0;
    _out._control.Node_0 = 0;
    _out.Node_1.granted = 0;
    _out._control.Node_1 = 0;
    _out.Node_2.granted = 0;
    _out._control.Node_2 = 0;
    _out.Node_3.granted = 0;
    _out._control.Node_3 = 0;
    _out.Node_4.granted = 0;
    _out._control.Node_4 = 0;
    _out.Node_5.granted = 0;
    _out._control.Node_5 = 0;
    _out.Node_6.granted = 0;
    _out._control.Node_6 = 0;
    _out.Node_7.granted = 0;
    _out._control.Node_7 = 0;
    _out.Node_8.granted = 0;
    _out._control.Node_8 = 0;
    _out.Node_9.granted = 0;
    _out._control.Node_9 = 0;
    _out.Node_10.granted = 0;
    _out._control.Node_10 = 0;
    _out.Node_11.granted = 0;
    _out._control.Node_11 = 0;
    _out.Token.NRT_count = 6;
    _out.Token.next = 0;
    _out._control.Token = 0;
    _out._control.LTL_property = 1;
    return 2;
}

void setup( cesmi_setup *setup ) {
    setup->add_property( setup, strdup( "deadlock" ), NULL, cesmi_pt_deadlock );
    setup->add_property( setup, strdup( "assert" ), NULL, cesmi_pt_goal );
    setup->add_flag( setup, strdup( "assert" ), cesmi_first_user_flag, 0 );
    setup->add_property( setup, strdup( "LTL" ), NULL, cesmi_pt_buchi );
}
uint64_t get_flags( const cesmi_setup *setup, cesmi_node n )
{
    state_struct_t &state = *reinterpret_cast< state_struct_t * >( n.memory );
    uint64_t f = 0;
    switch ( setup->property )
    {
        case 1: if ( f & cesmi_first_user_flag ) f |= cesmi_goal;
        return f;
        case 2:
        if (  ( (state._control.LTL_property == 0) ) )
            f |= cesmi_accepting;
        if (  ( (state._control.LTL_property == 3) ) )
            f |= cesmi_accepting;
        return f;
    }
    return f;
}

int get_successor0( const cesmi_setup *setup, int next_state, cesmi_node from, cesmi_node *to ) 
{
    const state_struct_t *in = reinterpret_cast< state_struct_t * >( from.memory );
    bool system_in_deadlock = false;
    goto switch_state;
    l1: if ( false )
    {
        l2: ;
    }
    else
    {
        l3: if (  ( ((*in)._control.Bandwidth == 0) ) )
        {
            l4: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 5;
            }
            l5: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 6;
            }
            l6: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 7;
            }
            l7: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 8;
            }
            l8: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 9;
            }
            l9: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 10;
            }
            l10: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 11;
            }
            l11: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 12;
            }
            l12: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 13;
            }
            l13: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 14;
            }
            l14: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 15;
            }
            l15: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 16;
            }
            l16: if (  ( ((*in)._control.Node_0 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 17;
            }
            l17: if (  ( ((*in)._control.Node_1 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 18;
            }
            l18: if (  ( ((*in)._control.Node_2 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 19;
            }
            l19: if (  ( ((*in)._control.Node_3 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 20;
            }
            l20: if (  ( ((*in)._control.Node_4 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 21;
            }
            l21: if (  ( ((*in)._control.Node_5 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 22;
            }
            l22: if (  ( ((*in)._control.Node_6 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 23;
            }
            l23: if (  ( ((*in)._control.Node_7 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 24;
            }
            l24: if (  ( ((*in)._control.Node_8 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 25;
            }
            l25: if (  ( ((*in)._control.Node_9 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 26;
            }
            l26: if (  ( ((*in)._control.Node_10 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 27;
            }
            l27: if (  ( ((*in)._control.Node_11 == 2) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 28;
            }
        }
        l28: if (  ( ((*in)._control.Bandwidth == 1) ) )
        {
            l29: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 30;
            }
        }
        l30: if (  ( ((*in)._control.Node_0 == 3) ) )
        {
            l31: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 32;
            }
        }
        l32: if (  ( ((*in)._control.Node_0 == 2) ) )
        {
            l33: if (  ( (((*in).Node_0.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 34;
            }
            l34: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 35;
            }
        }
        l35: if (  ( ((*in)._control.Node_0 == 0) ) )
        {
            l36: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 37;
            }
            l37: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 38;
            }
        }
        l38: if (  ( ((*in)._control.Node_0 == 5) ) )
        {
            l39: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 40;
            }
        }
        l40: if (  ( ((*in)._control.Node_0 == 1) ) )
        {
            l41: if (  ( (((*in).Node_0.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 42;
            }
            l42: if (  ( (((*in).Node_0.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 43;
            }
        }
        l43: if (  ( ((*in)._control.Node_0 == 8) ) )
        {
            l44: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 45;
            }
        }
        l45: if (  ( ((*in)._control.Node_0 == 4) ) )
        {
            l46: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 47;
            }
            l47: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 48;
            }
        }
        l48: if (  ( ((*in)._control.Node_1 == 3) ) )
        {
            l49: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 50;
            }
        }
        l50: if (  ( ((*in)._control.Node_1 == 2) ) )
        {
            l51: if (  ( (((*in).Node_1.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 52;
            }
            l52: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 53;
            }
        }
        l53: if (  ( ((*in)._control.Node_1 == 0) ) )
        {
            l54: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 55;
            }
            l55: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 56;
            }
        }
        l56: if (  ( ((*in)._control.Node_1 == 5) ) )
        {
            l57: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 58;
            }
        }
        l58: if (  ( ((*in)._control.Node_1 == 1) ) )
        {
            l59: if (  ( (((*in).Node_1.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 60;
            }
            l60: if (  ( (((*in).Node_1.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 61;
            }
        }
        l61: if (  ( ((*in)._control.Node_1 == 8) ) )
        {
            l62: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 63;
            }
        }
        l63: if (  ( ((*in)._control.Node_1 == 4) ) )
        {
            l64: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 65;
            }
            l65: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 66;
            }
        }
        l66: if (  ( ((*in)._control.Node_2 == 3) ) )
        {
            l67: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 68;
            }
        }
        l68: if (  ( ((*in)._control.Node_2 == 2) ) )
        {
            l69: if (  ( (((*in).Node_2.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 70;
            }
            l70: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 71;
            }
        }
        l71: if (  ( ((*in)._control.Node_2 == 0) ) )
        {
            l72: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 73;
            }
            l73: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 74;
            }
        }
        l74: if (  ( ((*in)._control.Node_2 == 5) ) )
        {
            l75: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 76;
            }
        }
        l76: if (  ( ((*in)._control.Node_2 == 1) ) )
        {
            l77: if (  ( (((*in).Node_2.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 78;
            }
            l78: if (  ( (((*in).Node_2.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 79;
            }
        }
        l79: if (  ( ((*in)._control.Node_2 == 8) ) )
        {
            l80: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 81;
            }
        }
        l81: if (  ( ((*in)._control.Node_2 == 4) ) )
        {
            l82: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 83;
            }
            l83: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 84;
            }
        }
        l84: if (  ( ((*in)._control.Node_3 == 3) ) )
        {
            l85: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 86;
            }
        }
        l86: if (  ( ((*in)._control.Node_3 == 2) ) )
        {
            l87: if (  ( (((*in).Node_3.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 88;
            }
            l88: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 89;
            }
        }
        l89: if (  ( ((*in)._control.Node_3 == 0) ) )
        {
            l90: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 91;
            }
            l91: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 92;
            }
        }
        l92: if (  ( ((*in)._control.Node_3 == 5) ) )
        {
            l93: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 94;
            }
        }
        l94: if (  ( ((*in)._control.Node_3 == 1) ) )
        {
            l95: if (  ( (((*in).Node_3.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 96;
            }
            l96: if (  ( (((*in).Node_3.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 97;
            }
        }
        l97: if (  ( ((*in)._control.Node_3 == 8) ) )
        {
            l98: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 99;
            }
        }
        l99: if (  ( ((*in)._control.Node_3 == 4) ) )
        {
            l100: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 101;
            }
            l101: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 102;
            }
        }
        l102: if (  ( ((*in)._control.Node_4 == 3) ) )
        {
            l103: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 104;
            }
        }
        l104: if (  ( ((*in)._control.Node_4 == 2) ) )
        {
            l105: if (  ( (((*in).Node_4.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 106;
            }
            l106: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 107;
            }
        }
        l107: if (  ( ((*in)._control.Node_4 == 0) ) )
        {
            l108: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 109;
            }
            l109: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 110;
            }
        }
        l110: if (  ( ((*in)._control.Node_4 == 5) ) )
        {
            l111: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 112;
            }
        }
        l112: if (  ( ((*in)._control.Node_4 == 1) ) )
        {
            l113: if (  ( (((*in).Node_4.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 114;
            }
            l114: if (  ( (((*in).Node_4.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 115;
            }
        }
        l115: if (  ( ((*in)._control.Node_4 == 8) ) )
        {
            l116: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 117;
            }
        }
        l117: if (  ( ((*in)._control.Node_4 == 4) ) )
        {
            l118: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 119;
            }
            l119: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 120;
            }
        }
        l120: if (  ( ((*in)._control.Node_5 == 3) ) )
        {
            l121: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 122;
            }
        }
        l122: if (  ( ((*in)._control.Node_5 == 2) ) )
        {
            l123: if (  ( (((*in).Node_5.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 124;
            }
            l124: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 125;
            }
        }
        l125: if (  ( ((*in)._control.Node_5 == 0) ) )
        {
            l126: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 127;
            }
            l127: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 128;
            }
        }
        l128: if (  ( ((*in)._control.Node_5 == 5) ) )
        {
            l129: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 130;
            }
        }
        l130: if (  ( ((*in)._control.Node_5 == 1) ) )
        {
            l131: if (  ( (((*in).Node_5.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 132;
            }
            l132: if (  ( (((*in).Node_5.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 133;
            }
        }
        l133: if (  ( ((*in)._control.Node_5 == 8) ) )
        {
            l134: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 135;
            }
        }
        l135: if (  ( ((*in)._control.Node_5 == 4) ) )
        {
            l136: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 137;
            }
            l137: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 138;
            }
        }
        l138: if (  ( ((*in)._control.Node_6 == 3) ) )
        {
            l139: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 140;
            }
        }
        l140: if (  ( ((*in)._control.Node_6 == 2) ) )
        {
            l141: if (  ( (((*in).Node_6.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 142;
            }
            l142: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 143;
            }
        }
        l143: if (  ( ((*in)._control.Node_6 == 0) ) )
        {
            l144: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 145;
            }
            l145: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 146;
            }
        }
        l146: if (  ( ((*in)._control.Node_6 == 5) ) )
        {
            l147: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 148;
            }
        }
        l148: if (  ( ((*in)._control.Node_6 == 1) ) )
        {
            l149: if (  ( (((*in).Node_6.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 150;
            }
            l150: if (  ( (((*in).Node_6.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 151;
            }
        }
        l151: if (  ( ((*in)._control.Node_6 == 8) ) )
        {
            l152: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 153;
            }
        }
        l153: if (  ( ((*in)._control.Node_6 == 4) ) )
        {
            l154: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 155;
            }
            l155: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 156;
            }
        }
        l156: if (  ( ((*in)._control.Node_7 == 3) ) )
        {
            l157: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 158;
            }
        }
        l158: if (  ( ((*in)._control.Node_7 == 2) ) )
        {
            l159: if (  ( (((*in).Node_7.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 160;
            }
            l160: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 161;
            }
        }
        l161: if (  ( ((*in)._control.Node_7 == 0) ) )
        {
            l162: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 163;
            }
            l163: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 164;
            }
        }
        l164: if (  ( ((*in)._control.Node_7 == 5) ) )
        {
            l165: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 166;
            }
        }
        l166: if (  ( ((*in)._control.Node_7 == 1) ) )
        {
            l167: if (  ( (((*in).Node_7.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 168;
            }
            l168: if (  ( (((*in).Node_7.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 169;
            }
        }
        l169: if (  ( ((*in)._control.Node_7 == 8) ) )
        {
            l170: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 171;
            }
        }
        l171: if (  ( ((*in)._control.Node_7 == 4) ) )
        {
            l172: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 173;
            }
            l173: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 174;
            }
        }
        l174: if (  ( ((*in)._control.Node_8 == 3) ) )
        {
            l175: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 176;
            }
        }
        l176: if (  ( ((*in)._control.Node_8 == 2) ) )
        {
            l177: if (  ( (((*in).Node_8.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 178;
            }
            l178: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 179;
            }
        }
        l179: if (  ( ((*in)._control.Node_8 == 0) ) )
        {
            l180: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 181;
            }
            l181: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 182;
            }
        }
        l182: if (  ( ((*in)._control.Node_8 == 5) ) )
        {
            l183: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 184;
            }
        }
        l184: if (  ( ((*in)._control.Node_8 == 1) ) )
        {
            l185: if (  ( (((*in).Node_8.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 186;
            }
            l186: if (  ( (((*in).Node_8.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 187;
            }
        }
        l187: if (  ( ((*in)._control.Node_8 == 8) ) )
        {
            l188: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 189;
            }
        }
        l189: if (  ( ((*in)._control.Node_8 == 4) ) )
        {
            l190: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 191;
            }
            l191: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 192;
            }
        }
        l192: if (  ( ((*in)._control.Node_9 == 3) ) )
        {
            l193: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 194;
            }
        }
        l194: if (  ( ((*in)._control.Node_9 == 2) ) )
        {
            l195: if (  ( (((*in).Node_9.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 196;
            }
            l196: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 197;
            }
        }
        l197: if (  ( ((*in)._control.Node_9 == 0) ) )
        {
            l198: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 199;
            }
            l199: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 200;
            }
        }
        l200: if (  ( ((*in)._control.Node_9 == 5) ) )
        {
            l201: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 202;
            }
        }
        l202: if (  ( ((*in)._control.Node_9 == 1) ) )
        {
            l203: if (  ( (((*in).Node_9.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 204;
            }
            l204: if (  ( (((*in).Node_9.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 205;
            }
        }
        l205: if (  ( ((*in)._control.Node_9 == 8) ) )
        {
            l206: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 207;
            }
        }
        l207: if (  ( ((*in)._control.Node_9 == 4) ) )
        {
            l208: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 209;
            }
            l209: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 210;
            }
        }
        l210: if (  ( ((*in)._control.Node_10 == 3) ) )
        {
            l211: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 212;
            }
        }
        l212: if (  ( ((*in)._control.Node_10 == 2) ) )
        {
            l213: if (  ( (((*in).Node_10.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 214;
            }
            l214: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 215;
            }
        }
        l215: if (  ( ((*in)._control.Node_10 == 0) ) )
        {
            l216: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 217;
            }
            l217: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 218;
            }
        }
        l218: if (  ( ((*in)._control.Node_10 == 5) ) )
        {
            l219: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 220;
            }
        }
        l220: if (  ( ((*in)._control.Node_10 == 1) ) )
        {
            l221: if (  ( (((*in).Node_10.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 222;
            }
            l222: if (  ( (((*in).Node_10.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 223;
            }
        }
        l223: if (  ( ((*in)._control.Node_10 == 8) ) )
        {
            l224: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 225;
            }
        }
        l225: if (  ( ((*in)._control.Node_10 == 4) ) )
        {
            l226: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 227;
            }
            l227: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 228;
            }
        }
        l228: if (  ( ((*in)._control.Node_11 == 3) ) )
        {
            l229: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 230;
            }
        }
        l230: if (  ( ((*in)._control.Node_11 == 2) ) )
        {
            l231: if (  ( (((*in).Node_11.granted == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                system_in_deadlock = false;
                *to = blob_out;
                return 232;
            }
            l232: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 233;
            }
        }
        l233: if (  ( ((*in)._control.Node_11 == 0) ) )
        {
            l234: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 235;
            }
            l235: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 236;
            }
        }
        l236: if (  ( ((*in)._control.Node_11 == 5) ) )
        {
            l237: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 238;
            }
        }
        l238: if (  ( ((*in)._control.Node_11 == 1) ) )
        {
            l239: if (  ( (((*in).Node_11.rt == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 240;
            }
            l240: if (  ( (((*in).Node_11.rt == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 241;
            }
        }
        l241: if (  ( ((*in)._control.Node_11 == 8) ) )
        {
            l242: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 243;
            }
        }
        l243: if (  ( ((*in)._control.Node_11 == 4) ) )
        {
            l244: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                system_in_deadlock = false;
                *to = blob_out;
                return 245;
            }
            l245: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 246;
            }
        }
        l246: if (  ( ((*in)._control.Token == 3) ) )
        {
            l247: if (  ( (((*in).Token.NRT_count == 0)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 248;
            }
        }
        l248: if (  ( ((*in)._control.Token == 4) ) )
        {
            l249: if (  ( ((*in)._control.Node_0 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 250;
            }
            l250: if (  ( ((*in)._control.Node_1 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 251;
            }
            l251: if (  ( ((*in)._control.Node_2 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 252;
            }
            l252: if (  ( ((*in)._control.Node_3 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 253;
            }
            l253: if (  ( ((*in)._control.Node_4 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 254;
            }
            l254: if (  ( ((*in)._control.Node_5 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 255;
            }
            l255: if (  ( ((*in)._control.Node_6 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 256;
            }
            l256: if (  ( ((*in)._control.Node_7 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 257;
            }
            l257: if (  ( ((*in)._control.Node_8 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 258;
            }
            l258: if (  ( ((*in)._control.Node_9 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 259;
            }
            l259: if (  ( ((*in)._control.Node_10 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 260;
            }
            l260: if (  ( ((*in)._control.Node_11 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 261;
            }
        }
        l261: if (  ( ((*in)._control.Token == 1) ) )
        {
            l262: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                system_in_deadlock = false;
                *to = blob_out;
                return 263;
            }
            l263: if (  ( (((*in).Token.i == 12)) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 264;
            }
        }
        l264: if (  ( ((*in)._control.Token == 2) ) )
        {
            l265: if (  ( ((*in)._control.Node_0 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 266;
            }
            l266: if (  ( ((*in)._control.Node_1 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 267;
            }
            l267: if (  ( ((*in)._control.Node_2 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 268;
            }
            l268: if (  ( ((*in)._control.Node_3 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 269;
            }
            l269: if (  ( ((*in)._control.Node_4 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 270;
            }
            l270: if (  ( ((*in)._control.Node_5 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 271;
            }
            l271: if (  ( ((*in)._control.Node_6 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 272;
            }
            l272: if (  ( ((*in)._control.Node_7 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 273;
            }
            l273: if (  ( ((*in)._control.Node_8 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 274;
            }
            l274: if (  ( ((*in)._control.Node_9 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 275;
            }
            l275: if (  ( ((*in)._control.Node_10 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 276;
            }
            l276: if (  ( ((*in)._control.Node_11 == 6) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 277;
            }
        }
        l277: if (  ( ((*in)._control.Token == 5) ) )
        {
            l278: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                system_in_deadlock = false;
                *to = blob_out;
                return 279;
            }
        }
        l279: if (  ( ((*in)._control.Token == 0) ) )
        {
            l280: if ( true )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                system_in_deadlock = false;
                *to = blob_out;
                return 281;
            }
        }
    }
    l281: if (  ( system_in_deadlock ) )
    {
    }
    l282: return 0;
    switch_state: switch( next_state )
    {
        case 1: system_in_deadlock = true; goto l1;
        case 2: goto l2;
        case 3: goto l3;
        case 4: goto l4;
        case 5: goto l5;
        case 6: goto l6;
        case 7: goto l7;
        case 8: goto l8;
        case 9: goto l9;
        case 10: goto l10;
        case 11: goto l11;
        case 12: goto l12;
        case 13: goto l13;
        case 14: goto l14;
        case 15: goto l15;
        case 16: goto l16;
        case 17: goto l17;
        case 18: goto l18;
        case 19: goto l19;
        case 20: goto l20;
        case 21: goto l21;
        case 22: goto l22;
        case 23: goto l23;
        case 24: goto l24;
        case 25: goto l25;
        case 26: goto l26;
        case 27: goto l27;
        case 28: goto l28;
        case 29: goto l29;
        case 30: goto l30;
        case 31: goto l31;
        case 32: goto l32;
        case 33: goto l33;
        case 34: goto l34;
        case 35: goto l35;
        case 36: goto l36;
        case 37: goto l37;
        case 38: goto l38;
        case 39: goto l39;
        case 40: goto l40;
        case 41: goto l41;
        case 42: goto l42;
        case 43: goto l43;
        case 44: goto l44;
        case 45: goto l45;
        case 46: goto l46;
        case 47: goto l47;
        case 48: goto l48;
        case 49: goto l49;
        case 50: goto l50;
        case 51: goto l51;
        case 52: goto l52;
        case 53: goto l53;
        case 54: goto l54;
        case 55: goto l55;
        case 56: goto l56;
        case 57: goto l57;
        case 58: goto l58;
        case 59: goto l59;
        case 60: goto l60;
        case 61: goto l61;
        case 62: goto l62;
        case 63: goto l63;
        case 64: goto l64;
        case 65: goto l65;
        case 66: goto l66;
        case 67: goto l67;
        case 68: goto l68;
        case 69: goto l69;
        case 70: goto l70;
        case 71: goto l71;
        case 72: goto l72;
        case 73: goto l73;
        case 74: goto l74;
        case 75: goto l75;
        case 76: goto l76;
        case 77: goto l77;
        case 78: goto l78;
        case 79: goto l79;
        case 80: goto l80;
        case 81: goto l81;
        case 82: goto l82;
        case 83: goto l83;
        case 84: goto l84;
        case 85: goto l85;
        case 86: goto l86;
        case 87: goto l87;
        case 88: goto l88;
        case 89: goto l89;
        case 90: goto l90;
        case 91: goto l91;
        case 92: goto l92;
        case 93: goto l93;
        case 94: goto l94;
        case 95: goto l95;
        case 96: goto l96;
        case 97: goto l97;
        case 98: goto l98;
        case 99: goto l99;
        case 100: goto l100;
        case 101: goto l101;
        case 102: goto l102;
        case 103: goto l103;
        case 104: goto l104;
        case 105: goto l105;
        case 106: goto l106;
        case 107: goto l107;
        case 108: goto l108;
        case 109: goto l109;
        case 110: goto l110;
        case 111: goto l111;
        case 112: goto l112;
        case 113: goto l113;
        case 114: goto l114;
        case 115: goto l115;
        case 116: goto l116;
        case 117: goto l117;
        case 118: goto l118;
        case 119: goto l119;
        case 120: goto l120;
        case 121: goto l121;
        case 122: goto l122;
        case 123: goto l123;
        case 124: goto l124;
        case 125: goto l125;
        case 126: goto l126;
        case 127: goto l127;
        case 128: goto l128;
        case 129: goto l129;
        case 130: goto l130;
        case 131: goto l131;
        case 132: goto l132;
        case 133: goto l133;
        case 134: goto l134;
        case 135: goto l135;
        case 136: goto l136;
        case 137: goto l137;
        case 138: goto l138;
        case 139: goto l139;
        case 140: goto l140;
        case 141: goto l141;
        case 142: goto l142;
        case 143: goto l143;
        case 144: goto l144;
        case 145: goto l145;
        case 146: goto l146;
        case 147: goto l147;
        case 148: goto l148;
        case 149: goto l149;
        case 150: goto l150;
        case 151: goto l151;
        case 152: goto l152;
        case 153: goto l153;
        case 154: goto l154;
        case 155: goto l155;
        case 156: goto l156;
        case 157: goto l157;
        case 158: goto l158;
        case 159: goto l159;
        case 160: goto l160;
        case 161: goto l161;
        case 162: goto l162;
        case 163: goto l163;
        case 164: goto l164;
        case 165: goto l165;
        case 166: goto l166;
        case 167: goto l167;
        case 168: goto l168;
        case 169: goto l169;
        case 170: goto l170;
        case 171: goto l171;
        case 172: goto l172;
        case 173: goto l173;
        case 174: goto l174;
        case 175: goto l175;
        case 176: goto l176;
        case 177: goto l177;
        case 178: goto l178;
        case 179: goto l179;
        case 180: goto l180;
        case 181: goto l181;
        case 182: goto l182;
        case 183: goto l183;
        case 184: goto l184;
        case 185: goto l185;
        case 186: goto l186;
        case 187: goto l187;
        case 188: goto l188;
        case 189: goto l189;
        case 190: goto l190;
        case 191: goto l191;
        case 192: goto l192;
        case 193: goto l193;
        case 194: goto l194;
        case 195: goto l195;
        case 196: goto l196;
        case 197: goto l197;
        case 198: goto l198;
        case 199: goto l199;
        case 200: goto l200;
        case 201: goto l201;
        case 202: goto l202;
        case 203: goto l203;
        case 204: goto l204;
        case 205: goto l205;
        case 206: goto l206;
        case 207: goto l207;
        case 208: goto l208;
        case 209: goto l209;
        case 210: goto l210;
        case 211: goto l211;
        case 212: goto l212;
        case 213: goto l213;
        case 214: goto l214;
        case 215: goto l215;
        case 216: goto l216;
        case 217: goto l217;
        case 218: goto l218;
        case 219: goto l219;
        case 220: goto l220;
        case 221: goto l221;
        case 222: goto l222;
        case 223: goto l223;
        case 224: goto l224;
        case 225: goto l225;
        case 226: goto l226;
        case 227: goto l227;
        case 228: goto l228;
        case 229: goto l229;
        case 230: goto l230;
        case 231: goto l231;
        case 232: goto l232;
        case 233: goto l233;
        case 234: goto l234;
        case 235: goto l235;
        case 236: goto l236;
        case 237: goto l237;
        case 238: goto l238;
        case 239: goto l239;
        case 240: goto l240;
        case 241: goto l241;
        case 242: goto l242;
        case 243: goto l243;
        case 244: goto l244;
        case 245: goto l245;
        case 246: goto l246;
        case 247: goto l247;
        case 248: goto l248;
        case 249: goto l249;
        case 250: goto l250;
        case 251: goto l251;
        case 252: goto l252;
        case 253: goto l253;
        case 254: goto l254;
        case 255: goto l255;
        case 256: goto l256;
        case 257: goto l257;
        case 258: goto l258;
        case 259: goto l259;
        case 260: goto l260;
        case 261: goto l261;
        case 262: goto l262;
        case 263: goto l263;
        case 264: goto l264;
        case 265: goto l265;
        case 266: goto l266;
        case 267: goto l267;
        case 268: goto l268;
        case 269: goto l269;
        case 270: goto l270;
        case 271: goto l271;
        case 272: goto l272;
        case 273: goto l273;
        case 274: goto l274;
        case 275: goto l275;
        case 276: goto l276;
        case 277: goto l277;
        case 278: goto l278;
        case 279: goto l279;
        case 280: goto l280;
        case 281: goto l281;
        case 282: goto l282;
    }
}
int get_successor1( const cesmi_setup *setup, int next_state, cesmi_node from, cesmi_node *to ) 
{
    const state_struct_t *in = reinterpret_cast< state_struct_t * >( from.memory );
    bool system_in_deadlock = false;
    goto switch_state;
    l1: if ( false )
    {
        l2: ;
    }
    else
    {
        l3: if (  ( ((*in)._control.Bandwidth == 0) ) )
        {
            l4: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 5;
            }
            l5: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 6;
            }
            l6: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 7;
            }
            l7: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 8;
            }
            l8: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 9;
            }
            l9: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 10;
            }
            l10: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 11;
            }
            l11: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 12;
            }
            l12: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 13;
            }
            l13: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 14;
            }
            l14: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 15;
            }
            l15: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 16;
            }
            l16: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 17;
            }
            l17: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 18;
            }
            l18: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 19;
            }
            l19: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 20;
            }
            l20: if (  ( ((*in)._control.Node_0 == 3) )  &&  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_0 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 21;
            }
            l21: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 22;
            }
            l22: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 23;
            }
            l23: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 24;
            }
            l24: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 25;
            }
            l25: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 26;
            }
            l26: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 27;
            }
            l27: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 28;
            }
            l28: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 29;
            }
            l29: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 30;
            }
            l30: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 31;
            }
            l31: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 32;
            }
            l32: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 33;
            }
            l33: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 34;
            }
            l34: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 35;
            }
            l35: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 36;
            }
            l36: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 37;
            }
            l37: if (  ( ((*in)._control.Node_1 == 3) )  &&  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_1 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 38;
            }
            l38: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 39;
            }
            l39: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 40;
            }
            l40: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 41;
            }
            l41: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 42;
            }
            l42: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 43;
            }
            l43: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 44;
            }
            l44: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 45;
            }
            l45: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 46;
            }
            l46: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 47;
            }
            l47: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 48;
            }
            l48: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 49;
            }
            l49: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 50;
            }
            l50: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 51;
            }
            l51: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 52;
            }
            l52: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 53;
            }
            l53: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 54;
            }
            l54: if (  ( ((*in)._control.Node_2 == 3) )  &&  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_2 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 55;
            }
            l55: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 56;
            }
            l56: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 57;
            }
            l57: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 58;
            }
            l58: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 59;
            }
            l59: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 60;
            }
            l60: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 61;
            }
            l61: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 62;
            }
            l62: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 63;
            }
            l63: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 64;
            }
            l64: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 65;
            }
            l65: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 66;
            }
            l66: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 67;
            }
            l67: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 68;
            }
            l68: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 69;
            }
            l69: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 70;
            }
            l70: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 71;
            }
            l71: if (  ( ((*in)._control.Node_3 == 3) )  &&  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_3 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 72;
            }
            l72: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 73;
            }
            l73: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 74;
            }
            l74: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 75;
            }
            l75: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 76;
            }
            l76: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 77;
            }
            l77: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 78;
            }
            l78: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 79;
            }
            l79: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 80;
            }
            l80: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 81;
            }
            l81: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 82;
            }
            l82: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 83;
            }
            l83: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 84;
            }
            l84: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 85;
            }
            l85: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 86;
            }
            l86: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 87;
            }
            l87: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 88;
            }
            l88: if (  ( ((*in)._control.Node_4 == 3) )  &&  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_4 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 89;
            }
            l89: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 90;
            }
            l90: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 91;
            }
            l91: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 92;
            }
            l92: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 93;
            }
            l93: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 94;
            }
            l94: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 95;
            }
            l95: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 96;
            }
            l96: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 97;
            }
            l97: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 98;
            }
            l98: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 99;
            }
            l99: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 100;
            }
            l100: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 101;
            }
            l101: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 102;
            }
            l102: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 103;
            }
            l103: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 104;
            }
            l104: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 105;
            }
            l105: if (  ( ((*in)._control.Node_5 == 3) )  &&  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_5 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 106;
            }
            l106: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 107;
            }
            l107: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 108;
            }
            l108: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 109;
            }
            l109: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 110;
            }
            l110: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 111;
            }
            l111: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 112;
            }
            l112: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 113;
            }
            l113: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 114;
            }
            l114: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 115;
            }
            l115: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 116;
            }
            l116: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 117;
            }
            l117: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 118;
            }
            l118: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 119;
            }
            l119: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 120;
            }
            l120: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 121;
            }
            l121: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 122;
            }
            l122: if (  ( ((*in)._control.Node_6 == 3) )  &&  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_6 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 123;
            }
            l123: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 124;
            }
            l124: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 125;
            }
            l125: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 126;
            }
            l126: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 127;
            }
            l127: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 128;
            }
            l128: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 129;
            }
            l129: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 130;
            }
            l130: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 131;
            }
            l131: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 132;
            }
            l132: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 133;
            }
            l133: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 134;
            }
            l134: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 135;
            }
            l135: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 136;
            }
            l136: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 137;
            }
            l137: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 138;
            }
            l138: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 139;
            }
            l139: if (  ( ((*in)._control.Node_7 == 3) )  &&  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_7 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 140;
            }
            l140: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 141;
            }
            l141: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 142;
            }
            l142: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 143;
            }
            l143: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 144;
            }
            l144: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 145;
            }
            l145: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 146;
            }
            l146: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 147;
            }
            l147: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 148;
            }
            l148: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 149;
            }
            l149: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 150;
            }
            l150: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 151;
            }
            l151: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 152;
            }
            l152: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 153;
            }
            l153: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 154;
            }
            l154: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 155;
            }
            l155: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 156;
            }
            l156: if (  ( ((*in)._control.Node_8 == 3) )  &&  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_8 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 157;
            }
            l157: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 158;
            }
            l158: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 159;
            }
            l159: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 160;
            }
            l160: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 161;
            }
            l161: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 162;
            }
            l162: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 163;
            }
            l163: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 164;
            }
            l164: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 165;
            }
            l165: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 166;
            }
            l166: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 167;
            }
            l167: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 168;
            }
            l168: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 169;
            }
            l169: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 170;
            }
            l170: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 171;
            }
            l171: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 172;
            }
            l172: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 173;
            }
            l173: if (  ( ((*in)._control.Node_9 == 3) )  &&  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_9 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 174;
            }
            l174: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 175;
            }
            l175: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 176;
            }
            l176: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 177;
            }
            l177: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 178;
            }
            l178: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 179;
            }
            l179: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 180;
            }
            l180: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 181;
            }
            l181: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 182;
            }
            l182: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 183;
            }
            l183: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 184;
            }
            l184: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 185;
            }
            l185: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 186;
            }
            l186: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 187;
            }
            l187: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 188;
            }
            l188: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 189;
            }
            l189: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 190;
            }
            l190: if (  ( ((*in)._control.Node_10 == 3) )  &&  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_10 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 191;
            }
            l191: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 192;
            }
            l192: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 193;
            }
            l193: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 194;
            }
            l194: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 195;
            }
            l195: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 196;
            }
            l196: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 197;
            }
            l197: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 198;
            }
            l198: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 199;
            }
            l199: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 200;
            }
            l200: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 201;
            }
            l201: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 202;
            }
            l202: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 203;
            }
            l203: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 204;
            }
            l204: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 205;
            }
            l205: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 206;
            }
            l206: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 207;
            }
            l207: if (  ( ((*in)._control.Node_11 == 3) )  &&  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 2;
                (*out)._control.Node_11 = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 208;
            }
            l208: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 209;
            }
            l209: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 210;
            }
            l210: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 211;
            }
            l211: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 212;
            }
            l212: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 213;
            }
            l213: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 214;
            }
            l214: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 215;
            }
            l215: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 216;
            }
            l216: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 217;
            }
            l217: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 218;
            }
            l218: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 219;
            }
            l219: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 220;
            }
            l220: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 221;
            }
            l221: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 222;
            }
            l222: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 223;
            }
            l223: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 224;
            }
            l224: if (  ( ((*in)._control.Node_0 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (0);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_0 = 8;
                ((*out).Node_0.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 225;
            }
            l225: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 226;
            }
            l226: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 227;
            }
            l227: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 228;
            }
            l228: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 229;
            }
            l229: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 230;
            }
            l230: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 231;
            }
            l231: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 232;
            }
            l232: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 233;
            }
            l233: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 234;
            }
            l234: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 235;
            }
            l235: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 236;
            }
            l236: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 237;
            }
            l237: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 238;
            }
            l238: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 239;
            }
            l239: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 240;
            }
            l240: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 241;
            }
            l241: if (  ( ((*in)._control.Node_1 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (1);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_1 = 8;
                ((*out).Node_1.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 242;
            }
            l242: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 243;
            }
            l243: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 244;
            }
            l244: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 245;
            }
            l245: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 246;
            }
            l246: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 247;
            }
            l247: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 248;
            }
            l248: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 249;
            }
            l249: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 250;
            }
            l250: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 251;
            }
            l251: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 252;
            }
            l252: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 253;
            }
            l253: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 254;
            }
            l254: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 255;
            }
            l255: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 256;
            }
            l256: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 257;
            }
            l257: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 258;
            }
            l258: if (  ( ((*in)._control.Node_2 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (2);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_2 = 8;
                ((*out).Node_2.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 259;
            }
            l259: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 260;
            }
            l260: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 261;
            }
            l261: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 262;
            }
            l262: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 263;
            }
            l263: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 264;
            }
            l264: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 265;
            }
            l265: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 266;
            }
            l266: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 267;
            }
            l267: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 268;
            }
            l268: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 269;
            }
            l269: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 270;
            }
            l270: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 271;
            }
            l271: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 272;
            }
            l272: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 273;
            }
            l273: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 274;
            }
            l274: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 275;
            }
            l275: if (  ( ((*in)._control.Node_3 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (3);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_3 = 8;
                ((*out).Node_3.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 276;
            }
            l276: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 277;
            }
            l277: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 278;
            }
            l278: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 279;
            }
            l279: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 280;
            }
            l280: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 281;
            }
            l281: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 282;
            }
            l282: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 283;
            }
            l283: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 284;
            }
            l284: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 285;
            }
            l285: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 286;
            }
            l286: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 287;
            }
            l287: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 288;
            }
            l288: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 289;
            }
            l289: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 290;
            }
            l290: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 291;
            }
            l291: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 292;
            }
            l292: if (  ( ((*in)._control.Node_4 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (4);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_4 = 8;
                ((*out).Node_4.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 293;
            }
            l293: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 294;
            }
            l294: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 295;
            }
            l295: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 296;
            }
            l296: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 297;
            }
            l297: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 298;
            }
            l298: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 299;
            }
            l299: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 300;
            }
            l300: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 301;
            }
            l301: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 302;
            }
            l302: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 303;
            }
            l303: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 304;
            }
            l304: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 305;
            }
            l305: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 306;
            }
            l306: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 307;
            }
            l307: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 308;
            }
            l308: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 309;
            }
            l309: if (  ( ((*in)._control.Node_5 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (5);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_5 = 8;
                ((*out).Node_5.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 310;
            }
            l310: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 311;
            }
            l311: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 312;
            }
            l312: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 313;
            }
            l313: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 314;
            }
            l314: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 315;
            }
            l315: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 316;
            }
            l316: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 317;
            }
            l317: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 318;
            }
            l318: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 319;
            }
            l319: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 320;
            }
            l320: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 321;
            }
            l321: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 322;
            }
            l322: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 323;
            }
            l323: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 324;
            }
            l324: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 325;
            }
            l325: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 326;
            }
            l326: if (  ( ((*in)._control.Node_6 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (6);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_6 = 8;
                ((*out).Node_6.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 327;
            }
            l327: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 328;
            }
            l328: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 329;
            }
            l329: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 330;
            }
            l330: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 331;
            }
            l331: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 332;
            }
            l332: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 333;
            }
            l333: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 334;
            }
            l334: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 335;
            }
            l335: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 336;
            }
            l336: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 337;
            }
            l337: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 338;
            }
            l338: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 339;
            }
            l339: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 340;
            }
            l340: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 341;
            }
            l341: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 342;
            }
            l342: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 343;
            }
            l343: if (  ( ((*in)._control.Node_7 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (7);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_7 = 8;
                ((*out).Node_7.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 344;
            }
            l344: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 345;
            }
            l345: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 346;
            }
            l346: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 347;
            }
            l347: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 348;
            }
            l348: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 349;
            }
            l349: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 350;
            }
            l350: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 351;
            }
            l351: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 352;
            }
            l352: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 353;
            }
            l353: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 354;
            }
            l354: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 355;
            }
            l355: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 356;
            }
            l356: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 357;
            }
            l357: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 358;
            }
            l358: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 359;
            }
            l359: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 360;
            }
            l360: if (  ( ((*in)._control.Node_8 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (8);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_8 = 8;
                ((*out).Node_8.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 361;
            }
            l361: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 362;
            }
            l362: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 363;
            }
            l363: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 364;
            }
            l364: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 365;
            }
            l365: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 366;
            }
            l366: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 367;
            }
            l367: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 368;
            }
            l368: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 369;
            }
            l369: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 370;
            }
            l370: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 371;
            }
            l371: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 372;
            }
            l372: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 373;
            }
            l373: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 374;
            }
            l374: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 375;
            }
            l375: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 376;
            }
            l376: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 377;
            }
            l377: if (  ( ((*in)._control.Node_9 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (9);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_9 = 8;
                ((*out).Node_9.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 378;
            }
            l378: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 379;
            }
            l379: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 380;
            }
            l380: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 381;
            }
            l381: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 382;
            }
            l382: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 383;
            }
            l383: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 384;
            }
            l384: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 385;
            }
            l385: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 386;
            }
            l386: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 387;
            }
            l387: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 388;
            }
            l388: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 389;
            }
            l389: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 390;
            }
            l390: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 391;
            }
            l391: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 392;
            }
            l392: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 393;
            }
            l393: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 394;
            }
            l394: if (  ( ((*in)._control.Node_10 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (10);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_10 = 8;
                ((*out).Node_10.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 395;
            }
            l395: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 396;
            }
            l396: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 397;
            }
            l397: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 398;
            }
            l398: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 399;
            }
            l399: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 400;
            }
            l400: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 401;
            }
            l401: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 402;
            }
            l402: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 403;
            }
            l403: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 404;
            }
            l404: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 405;
            }
            l405: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 406;
            }
            l406: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 407;
            }
            l407: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 408;
            }
            l408: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 409;
            }
            l409: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 410;
            }
            l410: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 411;
            }
            l411: if (  ( ((*in)._control.Node_11 == 2) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Bandwidth.i) = (11);
                (*out)._control.Bandwidth = 1;
                (*out)._control.Node_11 = 8;
                ((*out).Node_11.granted) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 412;
            }
        }
        l412: if (  ( ((*in)._control.Bandwidth == 1) ) )
        {
            l413: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 414;
            }
            l414: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 415;
            }
            l415: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 416;
            }
            l416: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 417;
            }
            l417: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 418;
            }
            l418: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 419;
            }
            l419: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 420;
            }
            l420: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 421;
            }
            l421: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 422;
            }
            l422: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 423;
            }
            l423: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 424;
            }
            l424: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 425;
            }
            l425: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 426;
            }
            l426: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 427;
            }
            l427: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 428;
            }
            l428: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 429;
            }
            l429: if (  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Bandwidth = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 430;
            }
        }
        l430: if (  ( ((*in)._control.Node_0 == 3) ) )
        {
            l431: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 432;
            }
            l432: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 433;
            }
            l433: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 434;
            }
            l434: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 435;
            }
            l435: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 436;
            }
            l436: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 437;
            }
            l437: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 438;
            }
            l438: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 439;
            }
            l439: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 440;
            }
            l440: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 441;
            }
            l441: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 442;
            }
            l442: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 443;
            }
            l443: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 444;
            }
            l444: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 445;
            }
            l445: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 446;
            }
            l446: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 447;
            }
            l447: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 448;
            }
        }
        l448: if (  ( ((*in)._control.Node_0 == 2) ) )
        {
            l449: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 450;
            }
            l450: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 451;
            }
            l451: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 452;
            }
            l452: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 453;
            }
            l453: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 454;
            }
            l454: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 455;
            }
            l455: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 456;
            }
            l456: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 457;
            }
            l457: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 458;
            }
            l458: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 459;
            }
            l459: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 460;
            }
            l460: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 461;
            }
            l461: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 462;
            }
            l462: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 463;
            }
            l463: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 464;
            }
            l464: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 465;
            }
            l465: if (  ( (((*in).Node_0.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 466;
            }
            l466: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 467;
            }
            l467: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 468;
            }
            l468: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 469;
            }
            l469: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 470;
            }
            l470: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 471;
            }
            l471: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 472;
            }
            l472: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 473;
            }
            l473: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 474;
            }
            l474: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 475;
            }
            l475: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 476;
            }
            l476: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 477;
            }
            l477: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 478;
            }
            l478: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 479;
            }
            l479: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 480;
            }
            l480: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 481;
            }
            l481: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 482;
            }
            l482: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 483;
            }
        }
        l483: if (  ( ((*in)._control.Node_0 == 0) ) )
        {
            l484: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 485;
            }
            l485: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 486;
            }
            l486: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 487;
            }
            l487: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 488;
            }
            l488: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 489;
            }
            l489: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 490;
            }
            l490: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 491;
            }
            l491: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 492;
            }
            l492: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 493;
            }
            l493: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 494;
            }
            l494: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 495;
            }
            l495: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 496;
            }
            l496: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 497;
            }
            l497: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 498;
            }
            l498: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 499;
            }
            l499: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 500;
            }
            l500: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 0) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (1);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 501;
            }
            l501: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 502;
            }
            l502: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 503;
            }
            l503: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 504;
            }
            l504: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 505;
            }
            l505: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 506;
            }
            l506: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 507;
            }
            l507: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 508;
            }
            l508: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 509;
            }
            l509: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 510;
            }
            l510: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 511;
            }
            l511: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 512;
            }
            l512: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 513;
            }
            l513: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 514;
            }
            l514: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 515;
            }
            l515: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 516;
            }
            l516: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 517;
            }
            l517: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 0))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_0.rt) = (0);
                (*out)._control.Node_0 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 518;
            }
        }
        l518: if (  ( ((*in)._control.Node_0 == 5) ) )
        {
            l519: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 520;
            }
            l520: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 521;
            }
            l521: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 522;
            }
            l522: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 523;
            }
            l523: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 524;
            }
            l524: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 525;
            }
            l525: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 526;
            }
            l526: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 527;
            }
            l527: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 528;
            }
            l528: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 529;
            }
            l529: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 530;
            }
            l530: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 531;
            }
            l531: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 532;
            }
            l532: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 533;
            }
            l533: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 534;
            }
            l534: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 535;
            }
            l535: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                ((*out).Node_0.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 536;
            }
        }
        l536: if (  ( ((*in)._control.Node_0 == 1) ) )
        {
            l537: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 538;
            }
            l538: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 539;
            }
            l539: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 540;
            }
            l540: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 541;
            }
            l541: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 542;
            }
            l542: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 543;
            }
            l543: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 544;
            }
            l544: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 545;
            }
            l545: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 546;
            }
            l546: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 547;
            }
            l547: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 548;
            }
            l548: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 549;
            }
            l549: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 550;
            }
            l550: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 551;
            }
            l551: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 552;
            }
            l552: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 553;
            }
            l553: if (  ( (((*in).Node_0.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 554;
            }
            l554: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 555;
            }
            l555: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 556;
            }
            l556: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 557;
            }
            l557: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 558;
            }
            l558: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 559;
            }
            l559: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 560;
            }
            l560: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 561;
            }
            l561: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 562;
            }
            l562: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 563;
            }
            l563: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 564;
            }
            l564: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 565;
            }
            l565: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 566;
            }
            l566: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 567;
            }
            l567: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 568;
            }
            l568: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 569;
            }
            l569: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 570;
            }
            l570: if (  ( (((*in).Node_0.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 571;
            }
        }
        l571: if (  ( ((*in)._control.Node_0 == 8) ) )
        {
            l572: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 573;
            }
            l573: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 574;
            }
            l574: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 575;
            }
            l575: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 576;
            }
            l576: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 577;
            }
            l577: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 578;
            }
            l578: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 579;
            }
            l579: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 580;
            }
            l580: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 581;
            }
            l581: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 582;
            }
            l582: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 583;
            }
            l583: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 584;
            }
            l584: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 585;
            }
            l585: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 586;
            }
            l586: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 587;
            }
            l587: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 588;
            }
            l588: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 589;
            }
        }
        l589: if (  ( ((*in)._control.Node_0 == 4) ) )
        {
            l590: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 591;
            }
            l591: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 592;
            }
            l592: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 593;
            }
            l593: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 594;
            }
            l594: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 595;
            }
            l595: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 596;
            }
            l596: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 597;
            }
            l597: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 598;
            }
            l598: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 599;
            }
            l599: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 600;
            }
            l600: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 601;
            }
            l601: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 602;
            }
            l602: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 603;
            }
            l603: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 604;
            }
            l604: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 605;
            }
            l605: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 606;
            }
            l606: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 607;
            }
            l607: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 608;
            }
            l608: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 609;
            }
            l609: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 610;
            }
            l610: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 611;
            }
            l611: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 612;
            }
            l612: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 613;
            }
            l613: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 614;
            }
            l614: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 615;
            }
            l615: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 616;
            }
            l616: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 617;
            }
            l617: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 618;
            }
            l618: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 619;
            }
            l619: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 620;
            }
            l620: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 621;
            }
            l621: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 622;
            }
            l622: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 623;
            }
            l623: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_0 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 624;
            }
        }
        l624: if (  ( ((*in)._control.Node_1 == 3) ) )
        {
            l625: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 626;
            }
            l626: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 627;
            }
            l627: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 628;
            }
            l628: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 629;
            }
            l629: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 630;
            }
            l630: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 631;
            }
            l631: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 632;
            }
            l632: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 633;
            }
            l633: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 634;
            }
            l634: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 635;
            }
            l635: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 636;
            }
            l636: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 637;
            }
            l637: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 638;
            }
            l638: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 639;
            }
            l639: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 640;
            }
            l640: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 641;
            }
            l641: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 642;
            }
        }
        l642: if (  ( ((*in)._control.Node_1 == 2) ) )
        {
            l643: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 644;
            }
            l644: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 645;
            }
            l645: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 646;
            }
            l646: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 647;
            }
            l647: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 648;
            }
            l648: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 649;
            }
            l649: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 650;
            }
            l650: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 651;
            }
            l651: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 652;
            }
            l652: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 653;
            }
            l653: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 654;
            }
            l654: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 655;
            }
            l655: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 656;
            }
            l656: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 657;
            }
            l657: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 658;
            }
            l658: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 659;
            }
            l659: if (  ( (((*in).Node_1.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 660;
            }
            l660: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 661;
            }
            l661: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 662;
            }
            l662: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 663;
            }
            l663: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 664;
            }
            l664: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 665;
            }
            l665: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 666;
            }
            l666: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 667;
            }
            l667: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 668;
            }
            l668: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 669;
            }
            l669: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 670;
            }
            l670: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 671;
            }
            l671: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 672;
            }
            l672: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 673;
            }
            l673: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 674;
            }
            l674: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 675;
            }
            l675: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 676;
            }
            l676: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 677;
            }
        }
        l677: if (  ( ((*in)._control.Node_1 == 0) ) )
        {
            l678: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 679;
            }
            l679: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 680;
            }
            l680: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 681;
            }
            l681: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 682;
            }
            l682: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 683;
            }
            l683: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 684;
            }
            l684: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 685;
            }
            l685: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 686;
            }
            l686: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 687;
            }
            l687: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 688;
            }
            l688: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 689;
            }
            l689: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 690;
            }
            l690: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 691;
            }
            l691: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 692;
            }
            l692: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 693;
            }
            l693: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 694;
            }
            l694: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 1) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (1);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 695;
            }
            l695: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 696;
            }
            l696: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 697;
            }
            l697: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 698;
            }
            l698: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 699;
            }
            l699: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 700;
            }
            l700: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 701;
            }
            l701: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 702;
            }
            l702: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 703;
            }
            l703: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 704;
            }
            l704: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 705;
            }
            l705: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 706;
            }
            l706: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 707;
            }
            l707: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 708;
            }
            l708: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 709;
            }
            l709: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 710;
            }
            l710: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 711;
            }
            l711: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_1.rt) = (0);
                (*out)._control.Node_1 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 712;
            }
        }
        l712: if (  ( ((*in)._control.Node_1 == 5) ) )
        {
            l713: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 714;
            }
            l714: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 715;
            }
            l715: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 716;
            }
            l716: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 717;
            }
            l717: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 718;
            }
            l718: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 719;
            }
            l719: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 720;
            }
            l720: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 721;
            }
            l721: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 722;
            }
            l722: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 723;
            }
            l723: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 724;
            }
            l724: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 725;
            }
            l725: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 726;
            }
            l726: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 727;
            }
            l727: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 728;
            }
            l728: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 729;
            }
            l729: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                ((*out).Node_1.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 730;
            }
        }
        l730: if (  ( ((*in)._control.Node_1 == 1) ) )
        {
            l731: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 732;
            }
            l732: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 733;
            }
            l733: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 734;
            }
            l734: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 735;
            }
            l735: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 736;
            }
            l736: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 737;
            }
            l737: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 738;
            }
            l738: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 739;
            }
            l739: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 740;
            }
            l740: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 741;
            }
            l741: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 742;
            }
            l742: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 743;
            }
            l743: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 744;
            }
            l744: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 745;
            }
            l745: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 746;
            }
            l746: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 747;
            }
            l747: if (  ( (((*in).Node_1.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 748;
            }
            l748: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 749;
            }
            l749: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 750;
            }
            l750: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 751;
            }
            l751: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 752;
            }
            l752: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 753;
            }
            l753: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 754;
            }
            l754: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 755;
            }
            l755: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 756;
            }
            l756: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 757;
            }
            l757: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 758;
            }
            l758: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 759;
            }
            l759: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 760;
            }
            l760: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 761;
            }
            l761: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 762;
            }
            l762: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 763;
            }
            l763: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 764;
            }
            l764: if (  ( (((*in).Node_1.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 765;
            }
        }
        l765: if (  ( ((*in)._control.Node_1 == 8) ) )
        {
            l766: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 767;
            }
            l767: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 768;
            }
            l768: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 769;
            }
            l769: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 770;
            }
            l770: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 771;
            }
            l771: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 772;
            }
            l772: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 773;
            }
            l773: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 774;
            }
            l774: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 775;
            }
            l775: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 776;
            }
            l776: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 777;
            }
            l777: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 778;
            }
            l778: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 779;
            }
            l779: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 780;
            }
            l780: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 781;
            }
            l781: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 782;
            }
            l782: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 783;
            }
        }
        l783: if (  ( ((*in)._control.Node_1 == 4) ) )
        {
            l784: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 785;
            }
            l785: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 786;
            }
            l786: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 787;
            }
            l787: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 788;
            }
            l788: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 789;
            }
            l789: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 790;
            }
            l790: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 791;
            }
            l791: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 792;
            }
            l792: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 793;
            }
            l793: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 794;
            }
            l794: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 795;
            }
            l795: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 796;
            }
            l796: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 797;
            }
            l797: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 798;
            }
            l798: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 799;
            }
            l799: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 800;
            }
            l800: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 801;
            }
            l801: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 802;
            }
            l802: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 803;
            }
            l803: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 804;
            }
            l804: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 805;
            }
            l805: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 806;
            }
            l806: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 807;
            }
            l807: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 808;
            }
            l808: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 809;
            }
            l809: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 810;
            }
            l810: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 811;
            }
            l811: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 812;
            }
            l812: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 813;
            }
            l813: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 814;
            }
            l814: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 815;
            }
            l815: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 816;
            }
            l816: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 817;
            }
            l817: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_1 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 818;
            }
        }
        l818: if (  ( ((*in)._control.Node_2 == 3) ) )
        {
            l819: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 820;
            }
            l820: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 821;
            }
            l821: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 822;
            }
            l822: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 823;
            }
            l823: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 824;
            }
            l824: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 825;
            }
            l825: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 826;
            }
            l826: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 827;
            }
            l827: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 828;
            }
            l828: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 829;
            }
            l829: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 830;
            }
            l830: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 831;
            }
            l831: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 832;
            }
            l832: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 833;
            }
            l833: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 834;
            }
            l834: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 835;
            }
            l835: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 836;
            }
        }
        l836: if (  ( ((*in)._control.Node_2 == 2) ) )
        {
            l837: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 838;
            }
            l838: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 839;
            }
            l839: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 840;
            }
            l840: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 841;
            }
            l841: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 842;
            }
            l842: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 843;
            }
            l843: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 844;
            }
            l844: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 845;
            }
            l845: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 846;
            }
            l846: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 847;
            }
            l847: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 848;
            }
            l848: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 849;
            }
            l849: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 850;
            }
            l850: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 851;
            }
            l851: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 852;
            }
            l852: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 853;
            }
            l853: if (  ( (((*in).Node_2.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 854;
            }
            l854: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 855;
            }
            l855: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 856;
            }
            l856: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 857;
            }
            l857: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 858;
            }
            l858: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 859;
            }
            l859: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 860;
            }
            l860: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 861;
            }
            l861: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 862;
            }
            l862: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 863;
            }
            l863: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 864;
            }
            l864: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 865;
            }
            l865: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 866;
            }
            l866: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 867;
            }
            l867: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 868;
            }
            l868: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 869;
            }
            l869: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 870;
            }
            l870: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 871;
            }
        }
        l871: if (  ( ((*in)._control.Node_2 == 0) ) )
        {
            l872: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 873;
            }
            l873: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 874;
            }
            l874: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 875;
            }
            l875: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 876;
            }
            l876: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 877;
            }
            l877: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 878;
            }
            l878: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 879;
            }
            l879: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 880;
            }
            l880: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 881;
            }
            l881: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 882;
            }
            l882: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 883;
            }
            l883: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 884;
            }
            l884: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 885;
            }
            l885: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 886;
            }
            l886: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 887;
            }
            l887: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 888;
            }
            l888: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 2) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (1);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 889;
            }
            l889: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 890;
            }
            l890: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 891;
            }
            l891: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 892;
            }
            l892: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 893;
            }
            l893: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 894;
            }
            l894: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 895;
            }
            l895: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 896;
            }
            l896: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 897;
            }
            l897: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 898;
            }
            l898: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 899;
            }
            l899: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 900;
            }
            l900: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 901;
            }
            l901: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 902;
            }
            l902: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 903;
            }
            l903: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 904;
            }
            l904: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 905;
            }
            l905: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 2))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_2.rt) = (0);
                (*out)._control.Node_2 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 906;
            }
        }
        l906: if (  ( ((*in)._control.Node_2 == 5) ) )
        {
            l907: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 908;
            }
            l908: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 909;
            }
            l909: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 910;
            }
            l910: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 911;
            }
            l911: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 912;
            }
            l912: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 913;
            }
            l913: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 914;
            }
            l914: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 915;
            }
            l915: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 916;
            }
            l916: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 917;
            }
            l917: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 918;
            }
            l918: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 919;
            }
            l919: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 920;
            }
            l920: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 921;
            }
            l921: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 922;
            }
            l922: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 923;
            }
            l923: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                ((*out).Node_2.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 924;
            }
        }
        l924: if (  ( ((*in)._control.Node_2 == 1) ) )
        {
            l925: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 926;
            }
            l926: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 927;
            }
            l927: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 928;
            }
            l928: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 929;
            }
            l929: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 930;
            }
            l930: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 931;
            }
            l931: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 932;
            }
            l932: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 933;
            }
            l933: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 934;
            }
            l934: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 935;
            }
            l935: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 936;
            }
            l936: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 937;
            }
            l937: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 938;
            }
            l938: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 939;
            }
            l939: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 940;
            }
            l940: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 941;
            }
            l941: if (  ( (((*in).Node_2.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 942;
            }
            l942: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 943;
            }
            l943: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 944;
            }
            l944: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 945;
            }
            l945: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 946;
            }
            l946: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 947;
            }
            l947: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 948;
            }
            l948: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 949;
            }
            l949: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 950;
            }
            l950: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 951;
            }
            l951: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 952;
            }
            l952: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 953;
            }
            l953: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 954;
            }
            l954: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 955;
            }
            l955: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 956;
            }
            l956: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 957;
            }
            l957: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 958;
            }
            l958: if (  ( (((*in).Node_2.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 959;
            }
        }
        l959: if (  ( ((*in)._control.Node_2 == 8) ) )
        {
            l960: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 961;
            }
            l961: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 962;
            }
            l962: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 963;
            }
            l963: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 964;
            }
            l964: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 965;
            }
            l965: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 966;
            }
            l966: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 967;
            }
            l967: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 968;
            }
            l968: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 969;
            }
            l969: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 970;
            }
            l970: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 971;
            }
            l971: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 972;
            }
            l972: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 973;
            }
            l973: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 974;
            }
            l974: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 975;
            }
            l975: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 976;
            }
            l976: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 977;
            }
        }
        l977: if (  ( ((*in)._control.Node_2 == 4) ) )
        {
            l978: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 979;
            }
            l979: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 980;
            }
            l980: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 981;
            }
            l981: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 982;
            }
            l982: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 983;
            }
            l983: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 984;
            }
            l984: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 985;
            }
            l985: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 986;
            }
            l986: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 987;
            }
            l987: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 988;
            }
            l988: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 989;
            }
            l989: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 990;
            }
            l990: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 991;
            }
            l991: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 992;
            }
            l992: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 993;
            }
            l993: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 994;
            }
            l994: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 995;
            }
            l995: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 996;
            }
            l996: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 997;
            }
            l997: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 998;
            }
            l998: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 999;
            }
            l999: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1000;
            }
            l1000: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1001;
            }
            l1001: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1002;
            }
            l1002: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1003;
            }
            l1003: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1004;
            }
            l1004: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1005;
            }
            l1005: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1006;
            }
            l1006: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1007;
            }
            l1007: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1008;
            }
            l1008: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1009;
            }
            l1009: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1010;
            }
            l1010: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1011;
            }
            l1011: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_2 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1012;
            }
        }
        l1012: if (  ( ((*in)._control.Node_3 == 3) ) )
        {
            l1013: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1014;
            }
            l1014: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1015;
            }
            l1015: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1016;
            }
            l1016: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1017;
            }
            l1017: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1018;
            }
            l1018: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1019;
            }
            l1019: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1020;
            }
            l1020: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1021;
            }
            l1021: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1022;
            }
            l1022: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1023;
            }
            l1023: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1024;
            }
            l1024: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1025;
            }
            l1025: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1026;
            }
            l1026: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1027;
            }
            l1027: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1028;
            }
            l1028: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1029;
            }
            l1029: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1030;
            }
        }
        l1030: if (  ( ((*in)._control.Node_3 == 2) ) )
        {
            l1031: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1032;
            }
            l1032: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1033;
            }
            l1033: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1034;
            }
            l1034: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1035;
            }
            l1035: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1036;
            }
            l1036: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1037;
            }
            l1037: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1038;
            }
            l1038: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1039;
            }
            l1039: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1040;
            }
            l1040: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1041;
            }
            l1041: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1042;
            }
            l1042: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1043;
            }
            l1043: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1044;
            }
            l1044: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1045;
            }
            l1045: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1046;
            }
            l1046: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1047;
            }
            l1047: if (  ( (((*in).Node_3.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1048;
            }
            l1048: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1049;
            }
            l1049: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1050;
            }
            l1050: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1051;
            }
            l1051: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1052;
            }
            l1052: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1053;
            }
            l1053: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1054;
            }
            l1054: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1055;
            }
            l1055: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1056;
            }
            l1056: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1057;
            }
            l1057: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1058;
            }
            l1058: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1059;
            }
            l1059: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1060;
            }
            l1060: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1061;
            }
            l1061: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1062;
            }
            l1062: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1063;
            }
            l1063: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1064;
            }
            l1064: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1065;
            }
        }
        l1065: if (  ( ((*in)._control.Node_3 == 0) ) )
        {
            l1066: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1067;
            }
            l1067: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1068;
            }
            l1068: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1069;
            }
            l1069: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1070;
            }
            l1070: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1071;
            }
            l1071: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1072;
            }
            l1072: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1073;
            }
            l1073: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1074;
            }
            l1074: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1075;
            }
            l1075: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1076;
            }
            l1076: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1077;
            }
            l1077: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1078;
            }
            l1078: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1079;
            }
            l1079: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1080;
            }
            l1080: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1081;
            }
            l1081: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1082;
            }
            l1082: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 3) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (1);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1083;
            }
            l1083: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1084;
            }
            l1084: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1085;
            }
            l1085: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1086;
            }
            l1086: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1087;
            }
            l1087: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1088;
            }
            l1088: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1089;
            }
            l1089: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1090;
            }
            l1090: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1091;
            }
            l1091: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1092;
            }
            l1092: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1093;
            }
            l1093: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1094;
            }
            l1094: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1095;
            }
            l1095: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1096;
            }
            l1096: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1097;
            }
            l1097: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1098;
            }
            l1098: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1099;
            }
            l1099: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 3))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_3.rt) = (0);
                (*out)._control.Node_3 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1100;
            }
        }
        l1100: if (  ( ((*in)._control.Node_3 == 5) ) )
        {
            l1101: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1102;
            }
            l1102: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1103;
            }
            l1103: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1104;
            }
            l1104: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1105;
            }
            l1105: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1106;
            }
            l1106: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1107;
            }
            l1107: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1108;
            }
            l1108: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1109;
            }
            l1109: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1110;
            }
            l1110: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1111;
            }
            l1111: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1112;
            }
            l1112: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1113;
            }
            l1113: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1114;
            }
            l1114: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1115;
            }
            l1115: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1116;
            }
            l1116: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1117;
            }
            l1117: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                ((*out).Node_3.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1118;
            }
        }
        l1118: if (  ( ((*in)._control.Node_3 == 1) ) )
        {
            l1119: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1120;
            }
            l1120: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1121;
            }
            l1121: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1122;
            }
            l1122: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1123;
            }
            l1123: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1124;
            }
            l1124: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1125;
            }
            l1125: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1126;
            }
            l1126: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1127;
            }
            l1127: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1128;
            }
            l1128: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1129;
            }
            l1129: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1130;
            }
            l1130: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1131;
            }
            l1131: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1132;
            }
            l1132: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1133;
            }
            l1133: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1134;
            }
            l1134: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1135;
            }
            l1135: if (  ( (((*in).Node_3.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1136;
            }
            l1136: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1137;
            }
            l1137: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1138;
            }
            l1138: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1139;
            }
            l1139: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1140;
            }
            l1140: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1141;
            }
            l1141: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1142;
            }
            l1142: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1143;
            }
            l1143: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1144;
            }
            l1144: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1145;
            }
            l1145: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1146;
            }
            l1146: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1147;
            }
            l1147: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1148;
            }
            l1148: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1149;
            }
            l1149: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1150;
            }
            l1150: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1151;
            }
            l1151: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1152;
            }
            l1152: if (  ( (((*in).Node_3.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1153;
            }
        }
        l1153: if (  ( ((*in)._control.Node_3 == 8) ) )
        {
            l1154: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1155;
            }
            l1155: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1156;
            }
            l1156: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1157;
            }
            l1157: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1158;
            }
            l1158: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1159;
            }
            l1159: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1160;
            }
            l1160: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1161;
            }
            l1161: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1162;
            }
            l1162: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1163;
            }
            l1163: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1164;
            }
            l1164: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1165;
            }
            l1165: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1166;
            }
            l1166: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1167;
            }
            l1167: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1168;
            }
            l1168: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1169;
            }
            l1169: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1170;
            }
            l1170: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1171;
            }
        }
        l1171: if (  ( ((*in)._control.Node_3 == 4) ) )
        {
            l1172: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1173;
            }
            l1173: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1174;
            }
            l1174: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1175;
            }
            l1175: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1176;
            }
            l1176: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1177;
            }
            l1177: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1178;
            }
            l1178: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1179;
            }
            l1179: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1180;
            }
            l1180: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1181;
            }
            l1181: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1182;
            }
            l1182: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1183;
            }
            l1183: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1184;
            }
            l1184: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1185;
            }
            l1185: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1186;
            }
            l1186: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1187;
            }
            l1187: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1188;
            }
            l1188: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1189;
            }
            l1189: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1190;
            }
            l1190: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1191;
            }
            l1191: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1192;
            }
            l1192: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1193;
            }
            l1193: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1194;
            }
            l1194: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1195;
            }
            l1195: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1196;
            }
            l1196: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1197;
            }
            l1197: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1198;
            }
            l1198: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1199;
            }
            l1199: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1200;
            }
            l1200: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1201;
            }
            l1201: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1202;
            }
            l1202: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1203;
            }
            l1203: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1204;
            }
            l1204: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1205;
            }
            l1205: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_3 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1206;
            }
        }
        l1206: if (  ( ((*in)._control.Node_4 == 3) ) )
        {
            l1207: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1208;
            }
            l1208: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1209;
            }
            l1209: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1210;
            }
            l1210: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1211;
            }
            l1211: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1212;
            }
            l1212: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1213;
            }
            l1213: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1214;
            }
            l1214: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1215;
            }
            l1215: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1216;
            }
            l1216: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1217;
            }
            l1217: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1218;
            }
            l1218: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1219;
            }
            l1219: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1220;
            }
            l1220: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1221;
            }
            l1221: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1222;
            }
            l1222: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1223;
            }
            l1223: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1224;
            }
        }
        l1224: if (  ( ((*in)._control.Node_4 == 2) ) )
        {
            l1225: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1226;
            }
            l1226: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1227;
            }
            l1227: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1228;
            }
            l1228: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1229;
            }
            l1229: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1230;
            }
            l1230: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1231;
            }
            l1231: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1232;
            }
            l1232: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1233;
            }
            l1233: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1234;
            }
            l1234: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1235;
            }
            l1235: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1236;
            }
            l1236: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1237;
            }
            l1237: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1238;
            }
            l1238: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1239;
            }
            l1239: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1240;
            }
            l1240: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1241;
            }
            l1241: if (  ( (((*in).Node_4.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1242;
            }
            l1242: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1243;
            }
            l1243: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1244;
            }
            l1244: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1245;
            }
            l1245: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1246;
            }
            l1246: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1247;
            }
            l1247: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1248;
            }
            l1248: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1249;
            }
            l1249: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1250;
            }
            l1250: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1251;
            }
            l1251: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1252;
            }
            l1252: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1253;
            }
            l1253: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1254;
            }
            l1254: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1255;
            }
            l1255: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1256;
            }
            l1256: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1257;
            }
            l1257: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1258;
            }
            l1258: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1259;
            }
        }
        l1259: if (  ( ((*in)._control.Node_4 == 0) ) )
        {
            l1260: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1261;
            }
            l1261: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1262;
            }
            l1262: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1263;
            }
            l1263: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1264;
            }
            l1264: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1265;
            }
            l1265: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1266;
            }
            l1266: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1267;
            }
            l1267: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1268;
            }
            l1268: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1269;
            }
            l1269: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1270;
            }
            l1270: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1271;
            }
            l1271: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1272;
            }
            l1272: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1273;
            }
            l1273: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1274;
            }
            l1274: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1275;
            }
            l1275: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1276;
            }
            l1276: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 4) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (1);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1277;
            }
            l1277: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1278;
            }
            l1278: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1279;
            }
            l1279: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1280;
            }
            l1280: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1281;
            }
            l1281: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1282;
            }
            l1282: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1283;
            }
            l1283: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1284;
            }
            l1284: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1285;
            }
            l1285: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1286;
            }
            l1286: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1287;
            }
            l1287: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1288;
            }
            l1288: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1289;
            }
            l1289: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1290;
            }
            l1290: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1291;
            }
            l1291: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1292;
            }
            l1292: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1293;
            }
            l1293: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 4))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_4.rt) = (0);
                (*out)._control.Node_4 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1294;
            }
        }
        l1294: if (  ( ((*in)._control.Node_4 == 5) ) )
        {
            l1295: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1296;
            }
            l1296: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1297;
            }
            l1297: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1298;
            }
            l1298: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1299;
            }
            l1299: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1300;
            }
            l1300: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1301;
            }
            l1301: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1302;
            }
            l1302: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1303;
            }
            l1303: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1304;
            }
            l1304: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1305;
            }
            l1305: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1306;
            }
            l1306: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1307;
            }
            l1307: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1308;
            }
            l1308: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1309;
            }
            l1309: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1310;
            }
            l1310: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1311;
            }
            l1311: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                ((*out).Node_4.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1312;
            }
        }
        l1312: if (  ( ((*in)._control.Node_4 == 1) ) )
        {
            l1313: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1314;
            }
            l1314: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1315;
            }
            l1315: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1316;
            }
            l1316: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1317;
            }
            l1317: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1318;
            }
            l1318: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1319;
            }
            l1319: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1320;
            }
            l1320: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1321;
            }
            l1321: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1322;
            }
            l1322: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1323;
            }
            l1323: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1324;
            }
            l1324: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1325;
            }
            l1325: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1326;
            }
            l1326: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1327;
            }
            l1327: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1328;
            }
            l1328: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1329;
            }
            l1329: if (  ( (((*in).Node_4.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1330;
            }
            l1330: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1331;
            }
            l1331: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1332;
            }
            l1332: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1333;
            }
            l1333: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1334;
            }
            l1334: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1335;
            }
            l1335: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1336;
            }
            l1336: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1337;
            }
            l1337: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1338;
            }
            l1338: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1339;
            }
            l1339: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1340;
            }
            l1340: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1341;
            }
            l1341: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1342;
            }
            l1342: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1343;
            }
            l1343: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1344;
            }
            l1344: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1345;
            }
            l1345: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1346;
            }
            l1346: if (  ( (((*in).Node_4.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1347;
            }
        }
        l1347: if (  ( ((*in)._control.Node_4 == 8) ) )
        {
            l1348: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1349;
            }
            l1349: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1350;
            }
            l1350: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1351;
            }
            l1351: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1352;
            }
            l1352: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1353;
            }
            l1353: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1354;
            }
            l1354: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1355;
            }
            l1355: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1356;
            }
            l1356: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1357;
            }
            l1357: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1358;
            }
            l1358: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1359;
            }
            l1359: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1360;
            }
            l1360: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1361;
            }
            l1361: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1362;
            }
            l1362: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1363;
            }
            l1363: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1364;
            }
            l1364: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1365;
            }
        }
        l1365: if (  ( ((*in)._control.Node_4 == 4) ) )
        {
            l1366: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1367;
            }
            l1367: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1368;
            }
            l1368: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1369;
            }
            l1369: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1370;
            }
            l1370: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1371;
            }
            l1371: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1372;
            }
            l1372: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1373;
            }
            l1373: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1374;
            }
            l1374: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1375;
            }
            l1375: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1376;
            }
            l1376: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1377;
            }
            l1377: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1378;
            }
            l1378: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1379;
            }
            l1379: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1380;
            }
            l1380: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1381;
            }
            l1381: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1382;
            }
            l1382: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1383;
            }
            l1383: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1384;
            }
            l1384: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1385;
            }
            l1385: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1386;
            }
            l1386: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1387;
            }
            l1387: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1388;
            }
            l1388: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1389;
            }
            l1389: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1390;
            }
            l1390: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1391;
            }
            l1391: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1392;
            }
            l1392: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1393;
            }
            l1393: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1394;
            }
            l1394: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1395;
            }
            l1395: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1396;
            }
            l1396: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1397;
            }
            l1397: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1398;
            }
            l1398: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1399;
            }
            l1399: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_4 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1400;
            }
        }
        l1400: if (  ( ((*in)._control.Node_5 == 3) ) )
        {
            l1401: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1402;
            }
            l1402: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1403;
            }
            l1403: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1404;
            }
            l1404: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1405;
            }
            l1405: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1406;
            }
            l1406: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1407;
            }
            l1407: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1408;
            }
            l1408: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1409;
            }
            l1409: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1410;
            }
            l1410: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1411;
            }
            l1411: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1412;
            }
            l1412: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1413;
            }
            l1413: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1414;
            }
            l1414: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1415;
            }
            l1415: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1416;
            }
            l1416: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1417;
            }
            l1417: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1418;
            }
        }
        l1418: if (  ( ((*in)._control.Node_5 == 2) ) )
        {
            l1419: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1420;
            }
            l1420: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1421;
            }
            l1421: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1422;
            }
            l1422: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1423;
            }
            l1423: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1424;
            }
            l1424: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1425;
            }
            l1425: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1426;
            }
            l1426: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1427;
            }
            l1427: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1428;
            }
            l1428: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1429;
            }
            l1429: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1430;
            }
            l1430: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1431;
            }
            l1431: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1432;
            }
            l1432: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1433;
            }
            l1433: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1434;
            }
            l1434: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1435;
            }
            l1435: if (  ( (((*in).Node_5.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1436;
            }
            l1436: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1437;
            }
            l1437: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1438;
            }
            l1438: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1439;
            }
            l1439: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1440;
            }
            l1440: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1441;
            }
            l1441: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1442;
            }
            l1442: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1443;
            }
            l1443: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1444;
            }
            l1444: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1445;
            }
            l1445: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1446;
            }
            l1446: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1447;
            }
            l1447: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1448;
            }
            l1448: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1449;
            }
            l1449: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1450;
            }
            l1450: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1451;
            }
            l1451: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1452;
            }
            l1452: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1453;
            }
        }
        l1453: if (  ( ((*in)._control.Node_5 == 0) ) )
        {
            l1454: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1455;
            }
            l1455: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1456;
            }
            l1456: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1457;
            }
            l1457: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1458;
            }
            l1458: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1459;
            }
            l1459: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1460;
            }
            l1460: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1461;
            }
            l1461: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1462;
            }
            l1462: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1463;
            }
            l1463: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1464;
            }
            l1464: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1465;
            }
            l1465: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1466;
            }
            l1466: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1467;
            }
            l1467: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1468;
            }
            l1468: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1469;
            }
            l1469: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1470;
            }
            l1470: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 5) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (1);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1471;
            }
            l1471: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1472;
            }
            l1472: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1473;
            }
            l1473: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1474;
            }
            l1474: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1475;
            }
            l1475: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1476;
            }
            l1476: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1477;
            }
            l1477: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1478;
            }
            l1478: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1479;
            }
            l1479: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1480;
            }
            l1480: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1481;
            }
            l1481: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1482;
            }
            l1482: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1483;
            }
            l1483: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1484;
            }
            l1484: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1485;
            }
            l1485: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1486;
            }
            l1486: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1487;
            }
            l1487: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 5))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_5.rt) = (0);
                (*out)._control.Node_5 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1488;
            }
        }
        l1488: if (  ( ((*in)._control.Node_5 == 5) ) )
        {
            l1489: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1490;
            }
            l1490: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1491;
            }
            l1491: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1492;
            }
            l1492: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1493;
            }
            l1493: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1494;
            }
            l1494: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1495;
            }
            l1495: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1496;
            }
            l1496: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1497;
            }
            l1497: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1498;
            }
            l1498: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1499;
            }
            l1499: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1500;
            }
            l1500: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1501;
            }
            l1501: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1502;
            }
            l1502: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1503;
            }
            l1503: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1504;
            }
            l1504: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1505;
            }
            l1505: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                ((*out).Node_5.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1506;
            }
        }
        l1506: if (  ( ((*in)._control.Node_5 == 1) ) )
        {
            l1507: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1508;
            }
            l1508: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1509;
            }
            l1509: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1510;
            }
            l1510: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1511;
            }
            l1511: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1512;
            }
            l1512: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1513;
            }
            l1513: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1514;
            }
            l1514: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1515;
            }
            l1515: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1516;
            }
            l1516: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1517;
            }
            l1517: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1518;
            }
            l1518: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1519;
            }
            l1519: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1520;
            }
            l1520: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1521;
            }
            l1521: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1522;
            }
            l1522: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1523;
            }
            l1523: if (  ( (((*in).Node_5.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1524;
            }
            l1524: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1525;
            }
            l1525: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1526;
            }
            l1526: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1527;
            }
            l1527: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1528;
            }
            l1528: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1529;
            }
            l1529: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1530;
            }
            l1530: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1531;
            }
            l1531: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1532;
            }
            l1532: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1533;
            }
            l1533: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1534;
            }
            l1534: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1535;
            }
            l1535: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1536;
            }
            l1536: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1537;
            }
            l1537: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1538;
            }
            l1538: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1539;
            }
            l1539: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1540;
            }
            l1540: if (  ( (((*in).Node_5.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1541;
            }
        }
        l1541: if (  ( ((*in)._control.Node_5 == 8) ) )
        {
            l1542: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1543;
            }
            l1543: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1544;
            }
            l1544: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1545;
            }
            l1545: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1546;
            }
            l1546: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1547;
            }
            l1547: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1548;
            }
            l1548: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1549;
            }
            l1549: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1550;
            }
            l1550: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1551;
            }
            l1551: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1552;
            }
            l1552: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1553;
            }
            l1553: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1554;
            }
            l1554: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1555;
            }
            l1555: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1556;
            }
            l1556: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1557;
            }
            l1557: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1558;
            }
            l1558: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1559;
            }
        }
        l1559: if (  ( ((*in)._control.Node_5 == 4) ) )
        {
            l1560: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1561;
            }
            l1561: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1562;
            }
            l1562: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1563;
            }
            l1563: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1564;
            }
            l1564: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1565;
            }
            l1565: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1566;
            }
            l1566: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1567;
            }
            l1567: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1568;
            }
            l1568: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1569;
            }
            l1569: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1570;
            }
            l1570: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1571;
            }
            l1571: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1572;
            }
            l1572: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1573;
            }
            l1573: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1574;
            }
            l1574: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1575;
            }
            l1575: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1576;
            }
            l1576: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1577;
            }
            l1577: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1578;
            }
            l1578: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1579;
            }
            l1579: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1580;
            }
            l1580: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1581;
            }
            l1581: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1582;
            }
            l1582: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1583;
            }
            l1583: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1584;
            }
            l1584: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1585;
            }
            l1585: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1586;
            }
            l1586: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1587;
            }
            l1587: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1588;
            }
            l1588: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1589;
            }
            l1589: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1590;
            }
            l1590: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1591;
            }
            l1591: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1592;
            }
            l1592: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1593;
            }
            l1593: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_5 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1594;
            }
        }
        l1594: if (  ( ((*in)._control.Node_6 == 3) ) )
        {
            l1595: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1596;
            }
            l1596: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1597;
            }
            l1597: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1598;
            }
            l1598: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1599;
            }
            l1599: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1600;
            }
            l1600: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1601;
            }
            l1601: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1602;
            }
            l1602: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1603;
            }
            l1603: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1604;
            }
            l1604: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1605;
            }
            l1605: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1606;
            }
            l1606: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1607;
            }
            l1607: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1608;
            }
            l1608: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1609;
            }
            l1609: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1610;
            }
            l1610: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1611;
            }
            l1611: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1612;
            }
        }
        l1612: if (  ( ((*in)._control.Node_6 == 2) ) )
        {
            l1613: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1614;
            }
            l1614: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1615;
            }
            l1615: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1616;
            }
            l1616: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1617;
            }
            l1617: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1618;
            }
            l1618: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1619;
            }
            l1619: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1620;
            }
            l1620: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1621;
            }
            l1621: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1622;
            }
            l1622: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1623;
            }
            l1623: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1624;
            }
            l1624: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1625;
            }
            l1625: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1626;
            }
            l1626: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1627;
            }
            l1627: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1628;
            }
            l1628: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1629;
            }
            l1629: if (  ( (((*in).Node_6.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1630;
            }
            l1630: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1631;
            }
            l1631: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1632;
            }
            l1632: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1633;
            }
            l1633: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1634;
            }
            l1634: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1635;
            }
            l1635: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1636;
            }
            l1636: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1637;
            }
            l1637: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1638;
            }
            l1638: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1639;
            }
            l1639: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1640;
            }
            l1640: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1641;
            }
            l1641: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1642;
            }
            l1642: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1643;
            }
            l1643: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1644;
            }
            l1644: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1645;
            }
            l1645: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1646;
            }
            l1646: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1647;
            }
        }
        l1647: if (  ( ((*in)._control.Node_6 == 0) ) )
        {
            l1648: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1649;
            }
            l1649: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1650;
            }
            l1650: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1651;
            }
            l1651: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1652;
            }
            l1652: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1653;
            }
            l1653: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1654;
            }
            l1654: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1655;
            }
            l1655: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1656;
            }
            l1656: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1657;
            }
            l1657: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1658;
            }
            l1658: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1659;
            }
            l1659: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1660;
            }
            l1660: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1661;
            }
            l1661: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1662;
            }
            l1662: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1663;
            }
            l1663: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1664;
            }
            l1664: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 6) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (1);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1665;
            }
            l1665: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1666;
            }
            l1666: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1667;
            }
            l1667: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1668;
            }
            l1668: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1669;
            }
            l1669: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1670;
            }
            l1670: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1671;
            }
            l1671: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1672;
            }
            l1672: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1673;
            }
            l1673: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1674;
            }
            l1674: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1675;
            }
            l1675: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1676;
            }
            l1676: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1677;
            }
            l1677: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1678;
            }
            l1678: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1679;
            }
            l1679: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1680;
            }
            l1680: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1681;
            }
            l1681: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 6))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_6.rt) = (0);
                (*out)._control.Node_6 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1682;
            }
        }
        l1682: if (  ( ((*in)._control.Node_6 == 5) ) )
        {
            l1683: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1684;
            }
            l1684: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1685;
            }
            l1685: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1686;
            }
            l1686: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1687;
            }
            l1687: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1688;
            }
            l1688: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1689;
            }
            l1689: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1690;
            }
            l1690: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1691;
            }
            l1691: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1692;
            }
            l1692: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1693;
            }
            l1693: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1694;
            }
            l1694: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1695;
            }
            l1695: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1696;
            }
            l1696: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1697;
            }
            l1697: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1698;
            }
            l1698: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1699;
            }
            l1699: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                ((*out).Node_6.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1700;
            }
        }
        l1700: if (  ( ((*in)._control.Node_6 == 1) ) )
        {
            l1701: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1702;
            }
            l1702: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1703;
            }
            l1703: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1704;
            }
            l1704: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1705;
            }
            l1705: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1706;
            }
            l1706: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1707;
            }
            l1707: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1708;
            }
            l1708: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1709;
            }
            l1709: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1710;
            }
            l1710: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1711;
            }
            l1711: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1712;
            }
            l1712: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1713;
            }
            l1713: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1714;
            }
            l1714: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1715;
            }
            l1715: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1716;
            }
            l1716: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1717;
            }
            l1717: if (  ( (((*in).Node_6.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1718;
            }
            l1718: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1719;
            }
            l1719: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1720;
            }
            l1720: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1721;
            }
            l1721: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1722;
            }
            l1722: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1723;
            }
            l1723: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1724;
            }
            l1724: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1725;
            }
            l1725: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1726;
            }
            l1726: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1727;
            }
            l1727: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1728;
            }
            l1728: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1729;
            }
            l1729: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1730;
            }
            l1730: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1731;
            }
            l1731: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1732;
            }
            l1732: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1733;
            }
            l1733: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1734;
            }
            l1734: if (  ( (((*in).Node_6.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1735;
            }
        }
        l1735: if (  ( ((*in)._control.Node_6 == 8) ) )
        {
            l1736: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1737;
            }
            l1737: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1738;
            }
            l1738: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1739;
            }
            l1739: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1740;
            }
            l1740: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1741;
            }
            l1741: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1742;
            }
            l1742: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1743;
            }
            l1743: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1744;
            }
            l1744: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1745;
            }
            l1745: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1746;
            }
            l1746: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1747;
            }
            l1747: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1748;
            }
            l1748: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1749;
            }
            l1749: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1750;
            }
            l1750: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1751;
            }
            l1751: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1752;
            }
            l1752: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1753;
            }
        }
        l1753: if (  ( ((*in)._control.Node_6 == 4) ) )
        {
            l1754: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1755;
            }
            l1755: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1756;
            }
            l1756: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1757;
            }
            l1757: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1758;
            }
            l1758: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1759;
            }
            l1759: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1760;
            }
            l1760: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1761;
            }
            l1761: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1762;
            }
            l1762: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1763;
            }
            l1763: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1764;
            }
            l1764: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1765;
            }
            l1765: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1766;
            }
            l1766: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1767;
            }
            l1767: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1768;
            }
            l1768: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1769;
            }
            l1769: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1770;
            }
            l1770: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1771;
            }
            l1771: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1772;
            }
            l1772: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1773;
            }
            l1773: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1774;
            }
            l1774: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1775;
            }
            l1775: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1776;
            }
            l1776: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1777;
            }
            l1777: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1778;
            }
            l1778: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1779;
            }
            l1779: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1780;
            }
            l1780: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1781;
            }
            l1781: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1782;
            }
            l1782: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1783;
            }
            l1783: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1784;
            }
            l1784: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1785;
            }
            l1785: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1786;
            }
            l1786: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1787;
            }
            l1787: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_6 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1788;
            }
        }
        l1788: if (  ( ((*in)._control.Node_7 == 3) ) )
        {
            l1789: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1790;
            }
            l1790: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1791;
            }
            l1791: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1792;
            }
            l1792: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1793;
            }
            l1793: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1794;
            }
            l1794: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1795;
            }
            l1795: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1796;
            }
            l1796: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1797;
            }
            l1797: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1798;
            }
            l1798: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1799;
            }
            l1799: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1800;
            }
            l1800: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1801;
            }
            l1801: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1802;
            }
            l1802: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1803;
            }
            l1803: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1804;
            }
            l1804: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1805;
            }
            l1805: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1806;
            }
        }
        l1806: if (  ( ((*in)._control.Node_7 == 2) ) )
        {
            l1807: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1808;
            }
            l1808: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1809;
            }
            l1809: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1810;
            }
            l1810: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1811;
            }
            l1811: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1812;
            }
            l1812: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1813;
            }
            l1813: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1814;
            }
            l1814: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1815;
            }
            l1815: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1816;
            }
            l1816: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1817;
            }
            l1817: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1818;
            }
            l1818: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1819;
            }
            l1819: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1820;
            }
            l1820: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1821;
            }
            l1821: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1822;
            }
            l1822: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1823;
            }
            l1823: if (  ( (((*in).Node_7.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1824;
            }
            l1824: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1825;
            }
            l1825: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1826;
            }
            l1826: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1827;
            }
            l1827: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1828;
            }
            l1828: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1829;
            }
            l1829: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1830;
            }
            l1830: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1831;
            }
            l1831: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1832;
            }
            l1832: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1833;
            }
            l1833: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1834;
            }
            l1834: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1835;
            }
            l1835: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1836;
            }
            l1836: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1837;
            }
            l1837: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1838;
            }
            l1838: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1839;
            }
            l1839: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1840;
            }
            l1840: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1841;
            }
        }
        l1841: if (  ( ((*in)._control.Node_7 == 0) ) )
        {
            l1842: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1843;
            }
            l1843: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1844;
            }
            l1844: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1845;
            }
            l1845: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1846;
            }
            l1846: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1847;
            }
            l1847: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1848;
            }
            l1848: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1849;
            }
            l1849: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1850;
            }
            l1850: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1851;
            }
            l1851: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1852;
            }
            l1852: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1853;
            }
            l1853: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1854;
            }
            l1854: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1855;
            }
            l1855: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1856;
            }
            l1856: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1857;
            }
            l1857: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1858;
            }
            l1858: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 7) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (1);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1859;
            }
            l1859: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1860;
            }
            l1860: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1861;
            }
            l1861: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1862;
            }
            l1862: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1863;
            }
            l1863: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1864;
            }
            l1864: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1865;
            }
            l1865: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1866;
            }
            l1866: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1867;
            }
            l1867: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1868;
            }
            l1868: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1869;
            }
            l1869: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1870;
            }
            l1870: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1871;
            }
            l1871: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1872;
            }
            l1872: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1873;
            }
            l1873: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1874;
            }
            l1874: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1875;
            }
            l1875: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 7))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_7.rt) = (0);
                (*out)._control.Node_7 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1876;
            }
        }
        l1876: if (  ( ((*in)._control.Node_7 == 5) ) )
        {
            l1877: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1878;
            }
            l1878: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1879;
            }
            l1879: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1880;
            }
            l1880: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1881;
            }
            l1881: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1882;
            }
            l1882: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1883;
            }
            l1883: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1884;
            }
            l1884: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1885;
            }
            l1885: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1886;
            }
            l1886: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1887;
            }
            l1887: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1888;
            }
            l1888: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1889;
            }
            l1889: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1890;
            }
            l1890: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1891;
            }
            l1891: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1892;
            }
            l1892: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1893;
            }
            l1893: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                ((*out).Node_7.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1894;
            }
        }
        l1894: if (  ( ((*in)._control.Node_7 == 1) ) )
        {
            l1895: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1896;
            }
            l1896: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1897;
            }
            l1897: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1898;
            }
            l1898: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1899;
            }
            l1899: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1900;
            }
            l1900: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1901;
            }
            l1901: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1902;
            }
            l1902: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1903;
            }
            l1903: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1904;
            }
            l1904: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1905;
            }
            l1905: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1906;
            }
            l1906: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1907;
            }
            l1907: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1908;
            }
            l1908: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1909;
            }
            l1909: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1910;
            }
            l1910: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1911;
            }
            l1911: if (  ( (((*in).Node_7.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1912;
            }
            l1912: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1913;
            }
            l1913: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1914;
            }
            l1914: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1915;
            }
            l1915: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1916;
            }
            l1916: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1917;
            }
            l1917: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1918;
            }
            l1918: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1919;
            }
            l1919: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1920;
            }
            l1920: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1921;
            }
            l1921: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1922;
            }
            l1922: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1923;
            }
            l1923: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1924;
            }
            l1924: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1925;
            }
            l1925: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1926;
            }
            l1926: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1927;
            }
            l1927: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1928;
            }
            l1928: if (  ( (((*in).Node_7.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1929;
            }
        }
        l1929: if (  ( ((*in)._control.Node_7 == 8) ) )
        {
            l1930: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1931;
            }
            l1931: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1932;
            }
            l1932: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1933;
            }
            l1933: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1934;
            }
            l1934: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1935;
            }
            l1935: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1936;
            }
            l1936: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1937;
            }
            l1937: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1938;
            }
            l1938: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1939;
            }
            l1939: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1940;
            }
            l1940: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1941;
            }
            l1941: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1942;
            }
            l1942: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1943;
            }
            l1943: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1944;
            }
            l1944: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1945;
            }
            l1945: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1946;
            }
            l1946: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1947;
            }
        }
        l1947: if (  ( ((*in)._control.Node_7 == 4) ) )
        {
            l1948: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1949;
            }
            l1949: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1950;
            }
            l1950: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1951;
            }
            l1951: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1952;
            }
            l1952: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1953;
            }
            l1953: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1954;
            }
            l1954: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1955;
            }
            l1955: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1956;
            }
            l1956: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1957;
            }
            l1957: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1958;
            }
            l1958: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1959;
            }
            l1959: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1960;
            }
            l1960: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1961;
            }
            l1961: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1962;
            }
            l1962: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1963;
            }
            l1963: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1964;
            }
            l1964: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1965;
            }
            l1965: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1966;
            }
            l1966: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1967;
            }
            l1967: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1968;
            }
            l1968: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1969;
            }
            l1969: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1970;
            }
            l1970: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1971;
            }
            l1971: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1972;
            }
            l1972: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1973;
            }
            l1973: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1974;
            }
            l1974: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1975;
            }
            l1975: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1976;
            }
            l1976: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1977;
            }
            l1977: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1978;
            }
            l1978: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1979;
            }
            l1979: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1980;
            }
            l1980: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1981;
            }
            l1981: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_7 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1982;
            }
        }
        l1982: if (  ( ((*in)._control.Node_8 == 3) ) )
        {
            l1983: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 1984;
            }
            l1984: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 1985;
            }
            l1985: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1986;
            }
            l1986: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1987;
            }
            l1987: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 1988;
            }
            l1988: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1989;
            }
            l1989: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1990;
            }
            l1990: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1991;
            }
            l1991: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1992;
            }
            l1992: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1993;
            }
            l1993: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 1994;
            }
            l1994: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1995;
            }
            l1995: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 1996;
            }
            l1996: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 1997;
            }
            l1997: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1998;
            }
            l1998: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 1999;
            }
            l1999: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2000;
            }
        }
        l2000: if (  ( ((*in)._control.Node_8 == 2) ) )
        {
            l2001: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2002;
            }
            l2002: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2003;
            }
            l2003: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2004;
            }
            l2004: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2005;
            }
            l2005: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2006;
            }
            l2006: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2007;
            }
            l2007: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2008;
            }
            l2008: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2009;
            }
            l2009: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2010;
            }
            l2010: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2011;
            }
            l2011: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2012;
            }
            l2012: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2013;
            }
            l2013: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2014;
            }
            l2014: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2015;
            }
            l2015: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2016;
            }
            l2016: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2017;
            }
            l2017: if (  ( (((*in).Node_8.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2018;
            }
            l2018: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2019;
            }
            l2019: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2020;
            }
            l2020: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2021;
            }
            l2021: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2022;
            }
            l2022: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2023;
            }
            l2023: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2024;
            }
            l2024: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2025;
            }
            l2025: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2026;
            }
            l2026: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2027;
            }
            l2027: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2028;
            }
            l2028: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2029;
            }
            l2029: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2030;
            }
            l2030: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2031;
            }
            l2031: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2032;
            }
            l2032: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2033;
            }
            l2033: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2034;
            }
            l2034: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2035;
            }
        }
        l2035: if (  ( ((*in)._control.Node_8 == 0) ) )
        {
            l2036: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2037;
            }
            l2037: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2038;
            }
            l2038: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2039;
            }
            l2039: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2040;
            }
            l2040: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2041;
            }
            l2041: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2042;
            }
            l2042: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2043;
            }
            l2043: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2044;
            }
            l2044: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2045;
            }
            l2045: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2046;
            }
            l2046: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2047;
            }
            l2047: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2048;
            }
            l2048: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2049;
            }
            l2049: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2050;
            }
            l2050: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2051;
            }
            l2051: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2052;
            }
            l2052: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 8) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (1);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2053;
            }
            l2053: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2054;
            }
            l2054: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2055;
            }
            l2055: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2056;
            }
            l2056: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2057;
            }
            l2057: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2058;
            }
            l2058: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2059;
            }
            l2059: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2060;
            }
            l2060: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2061;
            }
            l2061: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2062;
            }
            l2062: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2063;
            }
            l2063: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2064;
            }
            l2064: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2065;
            }
            l2065: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2066;
            }
            l2066: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2067;
            }
            l2067: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2068;
            }
            l2068: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2069;
            }
            l2069: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 8))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_8.rt) = (0);
                (*out)._control.Node_8 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2070;
            }
        }
        l2070: if (  ( ((*in)._control.Node_8 == 5) ) )
        {
            l2071: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2072;
            }
            l2072: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2073;
            }
            l2073: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2074;
            }
            l2074: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2075;
            }
            l2075: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2076;
            }
            l2076: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2077;
            }
            l2077: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2078;
            }
            l2078: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2079;
            }
            l2079: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2080;
            }
            l2080: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2081;
            }
            l2081: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2082;
            }
            l2082: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2083;
            }
            l2083: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2084;
            }
            l2084: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2085;
            }
            l2085: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2086;
            }
            l2086: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2087;
            }
            l2087: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                ((*out).Node_8.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2088;
            }
        }
        l2088: if (  ( ((*in)._control.Node_8 == 1) ) )
        {
            l2089: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2090;
            }
            l2090: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2091;
            }
            l2091: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2092;
            }
            l2092: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2093;
            }
            l2093: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2094;
            }
            l2094: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2095;
            }
            l2095: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2096;
            }
            l2096: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2097;
            }
            l2097: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2098;
            }
            l2098: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2099;
            }
            l2099: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2100;
            }
            l2100: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2101;
            }
            l2101: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2102;
            }
            l2102: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2103;
            }
            l2103: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2104;
            }
            l2104: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2105;
            }
            l2105: if (  ( (((*in).Node_8.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2106;
            }
            l2106: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2107;
            }
            l2107: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2108;
            }
            l2108: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2109;
            }
            l2109: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2110;
            }
            l2110: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2111;
            }
            l2111: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2112;
            }
            l2112: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2113;
            }
            l2113: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2114;
            }
            l2114: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2115;
            }
            l2115: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2116;
            }
            l2116: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2117;
            }
            l2117: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2118;
            }
            l2118: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2119;
            }
            l2119: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2120;
            }
            l2120: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2121;
            }
            l2121: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2122;
            }
            l2122: if (  ( (((*in).Node_8.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2123;
            }
        }
        l2123: if (  ( ((*in)._control.Node_8 == 8) ) )
        {
            l2124: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2125;
            }
            l2125: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2126;
            }
            l2126: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2127;
            }
            l2127: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2128;
            }
            l2128: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2129;
            }
            l2129: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2130;
            }
            l2130: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2131;
            }
            l2131: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2132;
            }
            l2132: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2133;
            }
            l2133: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2134;
            }
            l2134: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2135;
            }
            l2135: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2136;
            }
            l2136: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2137;
            }
            l2137: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2138;
            }
            l2138: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2139;
            }
            l2139: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2140;
            }
            l2140: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2141;
            }
        }
        l2141: if (  ( ((*in)._control.Node_8 == 4) ) )
        {
            l2142: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2143;
            }
            l2143: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2144;
            }
            l2144: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2145;
            }
            l2145: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2146;
            }
            l2146: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2147;
            }
            l2147: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2148;
            }
            l2148: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2149;
            }
            l2149: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2150;
            }
            l2150: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2151;
            }
            l2151: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2152;
            }
            l2152: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2153;
            }
            l2153: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2154;
            }
            l2154: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2155;
            }
            l2155: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2156;
            }
            l2156: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2157;
            }
            l2157: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2158;
            }
            l2158: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2159;
            }
            l2159: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2160;
            }
            l2160: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2161;
            }
            l2161: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2162;
            }
            l2162: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2163;
            }
            l2163: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2164;
            }
            l2164: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2165;
            }
            l2165: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2166;
            }
            l2166: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2167;
            }
            l2167: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2168;
            }
            l2168: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2169;
            }
            l2169: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2170;
            }
            l2170: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2171;
            }
            l2171: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2172;
            }
            l2172: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2173;
            }
            l2173: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2174;
            }
            l2174: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2175;
            }
            l2175: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_8 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2176;
            }
        }
        l2176: if (  ( ((*in)._control.Node_9 == 3) ) )
        {
            l2177: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2178;
            }
            l2178: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2179;
            }
            l2179: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2180;
            }
            l2180: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2181;
            }
            l2181: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2182;
            }
            l2182: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2183;
            }
            l2183: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2184;
            }
            l2184: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2185;
            }
            l2185: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2186;
            }
            l2186: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2187;
            }
            l2187: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2188;
            }
            l2188: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2189;
            }
            l2189: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2190;
            }
            l2190: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2191;
            }
            l2191: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2192;
            }
            l2192: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2193;
            }
            l2193: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2194;
            }
        }
        l2194: if (  ( ((*in)._control.Node_9 == 2) ) )
        {
            l2195: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2196;
            }
            l2196: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2197;
            }
            l2197: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2198;
            }
            l2198: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2199;
            }
            l2199: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2200;
            }
            l2200: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2201;
            }
            l2201: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2202;
            }
            l2202: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2203;
            }
            l2203: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2204;
            }
            l2204: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2205;
            }
            l2205: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2206;
            }
            l2206: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2207;
            }
            l2207: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2208;
            }
            l2208: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2209;
            }
            l2209: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2210;
            }
            l2210: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2211;
            }
            l2211: if (  ( (((*in).Node_9.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2212;
            }
            l2212: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2213;
            }
            l2213: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2214;
            }
            l2214: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2215;
            }
            l2215: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2216;
            }
            l2216: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2217;
            }
            l2217: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2218;
            }
            l2218: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2219;
            }
            l2219: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2220;
            }
            l2220: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2221;
            }
            l2221: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2222;
            }
            l2222: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2223;
            }
            l2223: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2224;
            }
            l2224: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2225;
            }
            l2225: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2226;
            }
            l2226: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2227;
            }
            l2227: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2228;
            }
            l2228: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2229;
            }
        }
        l2229: if (  ( ((*in)._control.Node_9 == 0) ) )
        {
            l2230: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2231;
            }
            l2231: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2232;
            }
            l2232: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2233;
            }
            l2233: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2234;
            }
            l2234: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2235;
            }
            l2235: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2236;
            }
            l2236: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2237;
            }
            l2237: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2238;
            }
            l2238: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2239;
            }
            l2239: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2240;
            }
            l2240: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2241;
            }
            l2241: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2242;
            }
            l2242: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2243;
            }
            l2243: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2244;
            }
            l2244: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2245;
            }
            l2245: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2246;
            }
            l2246: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 9) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (1);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2247;
            }
            l2247: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2248;
            }
            l2248: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2249;
            }
            l2249: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2250;
            }
            l2250: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2251;
            }
            l2251: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2252;
            }
            l2252: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2253;
            }
            l2253: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2254;
            }
            l2254: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2255;
            }
            l2255: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2256;
            }
            l2256: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2257;
            }
            l2257: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2258;
            }
            l2258: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2259;
            }
            l2259: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2260;
            }
            l2260: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2261;
            }
            l2261: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2262;
            }
            l2262: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2263;
            }
            l2263: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 9))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_9.rt) = (0);
                (*out)._control.Node_9 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2264;
            }
        }
        l2264: if (  ( ((*in)._control.Node_9 == 5) ) )
        {
            l2265: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2266;
            }
            l2266: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2267;
            }
            l2267: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2268;
            }
            l2268: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2269;
            }
            l2269: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2270;
            }
            l2270: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2271;
            }
            l2271: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2272;
            }
            l2272: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2273;
            }
            l2273: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2274;
            }
            l2274: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2275;
            }
            l2275: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2276;
            }
            l2276: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2277;
            }
            l2277: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2278;
            }
            l2278: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2279;
            }
            l2279: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2280;
            }
            l2280: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2281;
            }
            l2281: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                ((*out).Node_9.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2282;
            }
        }
        l2282: if (  ( ((*in)._control.Node_9 == 1) ) )
        {
            l2283: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2284;
            }
            l2284: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2285;
            }
            l2285: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2286;
            }
            l2286: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2287;
            }
            l2287: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2288;
            }
            l2288: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2289;
            }
            l2289: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2290;
            }
            l2290: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2291;
            }
            l2291: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2292;
            }
            l2292: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2293;
            }
            l2293: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2294;
            }
            l2294: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2295;
            }
            l2295: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2296;
            }
            l2296: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2297;
            }
            l2297: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2298;
            }
            l2298: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2299;
            }
            l2299: if (  ( (((*in).Node_9.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2300;
            }
            l2300: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2301;
            }
            l2301: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2302;
            }
            l2302: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2303;
            }
            l2303: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2304;
            }
            l2304: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2305;
            }
            l2305: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2306;
            }
            l2306: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2307;
            }
            l2307: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2308;
            }
            l2308: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2309;
            }
            l2309: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2310;
            }
            l2310: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2311;
            }
            l2311: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2312;
            }
            l2312: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2313;
            }
            l2313: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2314;
            }
            l2314: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2315;
            }
            l2315: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2316;
            }
            l2316: if (  ( (((*in).Node_9.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2317;
            }
        }
        l2317: if (  ( ((*in)._control.Node_9 == 8) ) )
        {
            l2318: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2319;
            }
            l2319: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2320;
            }
            l2320: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2321;
            }
            l2321: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2322;
            }
            l2322: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2323;
            }
            l2323: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2324;
            }
            l2324: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2325;
            }
            l2325: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2326;
            }
            l2326: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2327;
            }
            l2327: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2328;
            }
            l2328: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2329;
            }
            l2329: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2330;
            }
            l2330: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2331;
            }
            l2331: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2332;
            }
            l2332: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2333;
            }
            l2333: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2334;
            }
            l2334: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2335;
            }
        }
        l2335: if (  ( ((*in)._control.Node_9 == 4) ) )
        {
            l2336: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2337;
            }
            l2337: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2338;
            }
            l2338: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2339;
            }
            l2339: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2340;
            }
            l2340: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2341;
            }
            l2341: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2342;
            }
            l2342: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2343;
            }
            l2343: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2344;
            }
            l2344: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2345;
            }
            l2345: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2346;
            }
            l2346: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2347;
            }
            l2347: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2348;
            }
            l2348: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2349;
            }
            l2349: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2350;
            }
            l2350: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2351;
            }
            l2351: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2352;
            }
            l2352: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2353;
            }
            l2353: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2354;
            }
            l2354: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2355;
            }
            l2355: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2356;
            }
            l2356: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2357;
            }
            l2357: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2358;
            }
            l2358: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2359;
            }
            l2359: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2360;
            }
            l2360: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2361;
            }
            l2361: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2362;
            }
            l2362: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2363;
            }
            l2363: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2364;
            }
            l2364: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2365;
            }
            l2365: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2366;
            }
            l2366: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2367;
            }
            l2367: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2368;
            }
            l2368: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2369;
            }
            l2369: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_9 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2370;
            }
        }
        l2370: if (  ( ((*in)._control.Node_10 == 3) ) )
        {
            l2371: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2372;
            }
            l2372: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2373;
            }
            l2373: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2374;
            }
            l2374: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2375;
            }
            l2375: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2376;
            }
            l2376: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2377;
            }
            l2377: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2378;
            }
            l2378: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2379;
            }
            l2379: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2380;
            }
            l2380: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2381;
            }
            l2381: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2382;
            }
            l2382: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2383;
            }
            l2383: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2384;
            }
            l2384: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2385;
            }
            l2385: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2386;
            }
            l2386: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2387;
            }
            l2387: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2388;
            }
        }
        l2388: if (  ( ((*in)._control.Node_10 == 2) ) )
        {
            l2389: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2390;
            }
            l2390: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2391;
            }
            l2391: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2392;
            }
            l2392: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2393;
            }
            l2393: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2394;
            }
            l2394: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2395;
            }
            l2395: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2396;
            }
            l2396: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2397;
            }
            l2397: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2398;
            }
            l2398: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2399;
            }
            l2399: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2400;
            }
            l2400: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2401;
            }
            l2401: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2402;
            }
            l2402: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2403;
            }
            l2403: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2404;
            }
            l2404: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2405;
            }
            l2405: if (  ( (((*in).Node_10.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2406;
            }
            l2406: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2407;
            }
            l2407: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2408;
            }
            l2408: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2409;
            }
            l2409: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2410;
            }
            l2410: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2411;
            }
            l2411: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2412;
            }
            l2412: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2413;
            }
            l2413: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2414;
            }
            l2414: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2415;
            }
            l2415: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2416;
            }
            l2416: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2417;
            }
            l2417: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2418;
            }
            l2418: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2419;
            }
            l2419: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2420;
            }
            l2420: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2421;
            }
            l2421: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2422;
            }
            l2422: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2423;
            }
        }
        l2423: if (  ( ((*in)._control.Node_10 == 0) ) )
        {
            l2424: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2425;
            }
            l2425: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2426;
            }
            l2426: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2427;
            }
            l2427: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2428;
            }
            l2428: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2429;
            }
            l2429: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2430;
            }
            l2430: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2431;
            }
            l2431: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2432;
            }
            l2432: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2433;
            }
            l2433: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2434;
            }
            l2434: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2435;
            }
            l2435: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2436;
            }
            l2436: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2437;
            }
            l2437: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2438;
            }
            l2438: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2439;
            }
            l2439: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2440;
            }
            l2440: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 10) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (1);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2441;
            }
            l2441: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2442;
            }
            l2442: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2443;
            }
            l2443: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2444;
            }
            l2444: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2445;
            }
            l2445: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2446;
            }
            l2446: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2447;
            }
            l2447: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2448;
            }
            l2448: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2449;
            }
            l2449: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2450;
            }
            l2450: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2451;
            }
            l2451: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2452;
            }
            l2452: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2453;
            }
            l2453: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2454;
            }
            l2454: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2455;
            }
            l2455: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2456;
            }
            l2456: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2457;
            }
            l2457: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 10))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_10.rt) = (0);
                (*out)._control.Node_10 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2458;
            }
        }
        l2458: if (  ( ((*in)._control.Node_10 == 5) ) )
        {
            l2459: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2460;
            }
            l2460: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2461;
            }
            l2461: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2462;
            }
            l2462: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2463;
            }
            l2463: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2464;
            }
            l2464: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2465;
            }
            l2465: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2466;
            }
            l2466: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2467;
            }
            l2467: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2468;
            }
            l2468: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2469;
            }
            l2469: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2470;
            }
            l2470: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2471;
            }
            l2471: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2472;
            }
            l2472: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2473;
            }
            l2473: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2474;
            }
            l2474: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2475;
            }
            l2475: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                ((*out).Node_10.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2476;
            }
        }
        l2476: if (  ( ((*in)._control.Node_10 == 1) ) )
        {
            l2477: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2478;
            }
            l2478: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2479;
            }
            l2479: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2480;
            }
            l2480: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2481;
            }
            l2481: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2482;
            }
            l2482: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2483;
            }
            l2483: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2484;
            }
            l2484: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2485;
            }
            l2485: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2486;
            }
            l2486: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2487;
            }
            l2487: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2488;
            }
            l2488: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2489;
            }
            l2489: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2490;
            }
            l2490: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2491;
            }
            l2491: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2492;
            }
            l2492: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2493;
            }
            l2493: if (  ( (((*in).Node_10.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2494;
            }
            l2494: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2495;
            }
            l2495: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2496;
            }
            l2496: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2497;
            }
            l2497: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2498;
            }
            l2498: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2499;
            }
            l2499: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2500;
            }
            l2500: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2501;
            }
            l2501: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2502;
            }
            l2502: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2503;
            }
            l2503: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2504;
            }
            l2504: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2505;
            }
            l2505: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2506;
            }
            l2506: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2507;
            }
            l2507: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2508;
            }
            l2508: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2509;
            }
            l2509: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2510;
            }
            l2510: if (  ( (((*in).Node_10.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2511;
            }
        }
        l2511: if (  ( ((*in)._control.Node_10 == 8) ) )
        {
            l2512: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2513;
            }
            l2513: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2514;
            }
            l2514: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2515;
            }
            l2515: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2516;
            }
            l2516: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2517;
            }
            l2517: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2518;
            }
            l2518: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2519;
            }
            l2519: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2520;
            }
            l2520: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2521;
            }
            l2521: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2522;
            }
            l2522: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2523;
            }
            l2523: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2524;
            }
            l2524: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2525;
            }
            l2525: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2526;
            }
            l2526: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2527;
            }
            l2527: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2528;
            }
            l2528: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2529;
            }
        }
        l2529: if (  ( ((*in)._control.Node_10 == 4) ) )
        {
            l2530: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2531;
            }
            l2531: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2532;
            }
            l2532: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2533;
            }
            l2533: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2534;
            }
            l2534: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2535;
            }
            l2535: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2536;
            }
            l2536: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2537;
            }
            l2537: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2538;
            }
            l2538: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2539;
            }
            l2539: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2540;
            }
            l2540: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2541;
            }
            l2541: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2542;
            }
            l2542: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2543;
            }
            l2543: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2544;
            }
            l2544: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2545;
            }
            l2545: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2546;
            }
            l2546: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2547;
            }
            l2547: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2548;
            }
            l2548: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2549;
            }
            l2549: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2550;
            }
            l2550: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2551;
            }
            l2551: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2552;
            }
            l2552: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2553;
            }
            l2553: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2554;
            }
            l2554: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2555;
            }
            l2555: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2556;
            }
            l2556: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2557;
            }
            l2557: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2558;
            }
            l2558: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2559;
            }
            l2559: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2560;
            }
            l2560: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2561;
            }
            l2561: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2562;
            }
            l2562: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2563;
            }
            l2563: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_10 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2564;
            }
        }
        l2564: if (  ( ((*in)._control.Node_11 == 3) ) )
        {
            l2565: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2566;
            }
            l2566: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2567;
            }
            l2567: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2568;
            }
            l2568: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2569;
            }
            l2569: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2570;
            }
            l2570: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2571;
            }
            l2571: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2572;
            }
            l2572: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2573;
            }
            l2573: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2574;
            }
            l2574: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2575;
            }
            l2575: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2576;
            }
            l2576: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2577;
            }
            l2577: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2578;
            }
            l2578: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2579;
            }
            l2579: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2580;
            }
            l2580: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2581;
            }
            l2581: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2582;
            }
        }
        l2582: if (  ( ((*in)._control.Node_11 == 2) ) )
        {
            l2583: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2584;
            }
            l2584: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2585;
            }
            l2585: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2586;
            }
            l2586: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2587;
            }
            l2587: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2588;
            }
            l2588: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2589;
            }
            l2589: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2590;
            }
            l2590: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2591;
            }
            l2591: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2592;
            }
            l2592: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2593;
            }
            l2593: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2594;
            }
            l2594: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2595;
            }
            l2595: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2596;
            }
            l2596: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2597;
            }
            l2597: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2598;
            }
            l2598: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2599;
            }
            l2599: if (  ( (((*in).Node_11.granted == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 7;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2600;
            }
            l2600: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2601;
            }
            l2601: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2602;
            }
            l2602: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2603;
            }
            l2603: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2604;
            }
            l2604: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2605;
            }
            l2605: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2606;
            }
            l2606: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2607;
            }
            l2607: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2608;
            }
            l2608: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2609;
            }
            l2609: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2610;
            }
            l2610: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2611;
            }
            l2611: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2612;
            }
            l2612: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2613;
            }
            l2613: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2614;
            }
            l2614: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2615;
            }
            l2615: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2616;
            }
            l2616: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2617;
            }
        }
        l2617: if (  ( ((*in)._control.Node_11 == 0) ) )
        {
            l2618: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2619;
            }
            l2619: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2620;
            }
            l2620: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2621;
            }
            l2621: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2622;
            }
            l2622: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2623;
            }
            l2623: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2624;
            }
            l2624: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2625;
            }
            l2625: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2626;
            }
            l2626: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2627;
            }
            l2627: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2628;
            }
            l2628: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2629;
            }
            l2629: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2630;
            }
            l2630: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2631;
            }
            l2631: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2632;
            }
            l2632: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2633;
            }
            l2633: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2634;
            }
            l2634: if (  ( ((*in)._control.Token == 1) )  &&  ( ((((*in).Token.i == 11) && ((*in).in_RT[ (*in).Token.i ] == 1))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (1);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2635;
            }
            l2635: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2636;
            }
            l2636: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2637;
            }
            l2637: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2638;
            }
            l2638: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2639;
            }
            l2639: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2640;
            }
            l2640: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2641;
            }
            l2641: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2642;
            }
            l2642: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2643;
            }
            l2643: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2644;
            }
            l2644: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2645;
            }
            l2645: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2646;
            }
            l2646: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2647;
            }
            l2647: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2648;
            }
            l2648: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2649;
            }
            l2649: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2650;
            }
            l2650: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2651;
            }
            l2651: if (  ( ((*in)._control.Token == 3) )  &&  ( ((((*in).Token.NRT_count > 0) && ((*in).Token.next == 11))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                ((*out).Node_11.rt) = (0);
                (*out)._control.Node_11 = 1;
                (*out)._control.Token = 4;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2652;
            }
        }
        l2652: if (  ( ((*in)._control.Node_11 == 5) ) )
        {
            l2653: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2654;
            }
            l2654: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2655;
            }
            l2655: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2656;
            }
            l2656: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2657;
            }
            l2657: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2658;
            }
            l2658: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2659;
            }
            l2659: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2660;
            }
            l2660: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2661;
            }
            l2661: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2662;
            }
            l2662: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2663;
            }
            l2663: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2664;
            }
            l2664: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2665;
            }
            l2665: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2666;
            }
            l2666: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2667;
            }
            l2667: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2668;
            }
            l2668: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2669;
            }
            l2669: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                ((*out).Node_11.granted) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2670;
            }
        }
        l2670: if (  ( ((*in)._control.Node_11 == 1) ) )
        {
            l2671: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2672;
            }
            l2672: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2673;
            }
            l2673: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2674;
            }
            l2674: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2675;
            }
            l2675: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2676;
            }
            l2676: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2677;
            }
            l2677: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2678;
            }
            l2678: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2679;
            }
            l2679: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2680;
            }
            l2680: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2681;
            }
            l2681: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2682;
            }
            l2682: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2683;
            }
            l2683: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2684;
            }
            l2684: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2685;
            }
            l2685: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2686;
            }
            l2686: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2687;
            }
            l2687: if (  ( (((*in).Node_11.rt == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 2;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2688;
            }
            l2688: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2689;
            }
            l2689: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2690;
            }
            l2690: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2691;
            }
            l2691: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2692;
            }
            l2692: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2693;
            }
            l2693: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2694;
            }
            l2694: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2695;
            }
            l2695: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2696;
            }
            l2696: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2697;
            }
            l2697: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2698;
            }
            l2698: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2699;
            }
            l2699: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2700;
            }
            l2700: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2701;
            }
            l2701: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2702;
            }
            l2702: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2703;
            }
            l2703: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2704;
            }
            l2704: if (  ( (((*in).Node_11.rt == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2705;
            }
        }
        l2705: if (  ( ((*in)._control.Node_11 == 8) ) )
        {
            l2706: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2707;
            }
            l2707: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2708;
            }
            l2708: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2709;
            }
            l2709: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2710;
            }
            l2710: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2711;
            }
            l2711: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2712;
            }
            l2712: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2713;
            }
            l2713: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2714;
            }
            l2714: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2715;
            }
            l2715: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2716;
            }
            l2716: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2717;
            }
            l2717: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2718;
            }
            l2718: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2719;
            }
            l2719: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2720;
            }
            l2720: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2721;
            }
            l2721: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2722;
            }
            l2722: if (  ( ((*in)._control.Bandwidth == 1) )  &&  ( (((*in).in_RT[ (*in).Bandwidth.i ] == 1)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (0);
                ((*out).RT_count) = (((*out).RT_count - 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2723;
            }
        }
        l2723: if (  ( ((*in)._control.Node_11 == 4) ) )
        {
            l2724: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2725;
            }
            l2725: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2726;
            }
            l2726: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2727;
            }
            l2727: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2728;
            }
            l2728: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2729;
            }
            l2729: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2730;
            }
            l2730: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2731;
            }
            l2731: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2732;
            }
            l2732: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2733;
            }
            l2733: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2734;
            }
            l2734: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2735;
            }
            l2735: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2736;
            }
            l2736: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2737;
            }
            l2737: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2738;
            }
            l2738: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2739;
            }
            l2739: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2740;
            }
            l2740: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count < 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 5;
                (*out)._control.Bandwidth = 0;
                ((*out).RT_count) = (((*out).RT_count + 1));
                ((*out).in_RT[ (*out).Bandwidth.i ]) = (1);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2741;
            }
            l2741: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2742;
            }
            l2742: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2743;
            }
            l2743: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2744;
            }
            l2744: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2745;
            }
            l2745: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2746;
            }
            l2746: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2747;
            }
            l2747: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2748;
            }
            l2748: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2749;
            }
            l2749: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2750;
            }
            l2750: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2751;
            }
            l2751: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2752;
            }
            l2752: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2753;
            }
            l2753: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2754;
            }
            l2754: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2755;
            }
            l2755: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2756;
            }
            l2756: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2757;
            }
            l2757: if (  ( ((*in)._control.Bandwidth == 2) )  &&  ( (((*in).RT_count >= 2)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Node_11 = 6;
                (*out)._control.Bandwidth = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2758;
            }
        }
        l2758: if (  ( ((*in)._control.Token == 3) ) )
        {
            l2759: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2760;
            }
            l2760: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2761;
            }
            l2761: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2762;
            }
            l2762: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2763;
            }
            l2763: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2764;
            }
            l2764: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2765;
            }
            l2765: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2766;
            }
            l2766: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2767;
            }
            l2767: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2768;
            }
            l2768: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2769;
            }
            l2769: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2770;
            }
            l2770: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2771;
            }
            l2771: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2772;
            }
            l2772: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2773;
            }
            l2773: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2774;
            }
            l2774: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2775;
            }
            l2775: if (  ( (((*in).Token.NRT_count == 0)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 5;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2776;
            }
        }
        l2776: if (  ( ((*in)._control.Token == 4) ) )
        {
            l2777: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2778;
            }
            l2778: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2779;
            }
            l2779: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2780;
            }
            l2780: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2781;
            }
            l2781: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2782;
            }
            l2782: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2783;
            }
            l2783: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2784;
            }
            l2784: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2785;
            }
            l2785: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2786;
            }
            l2786: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2787;
            }
            l2787: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2788;
            }
            l2788: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2789;
            }
            l2789: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2790;
            }
            l2790: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2791;
            }
            l2791: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2792;
            }
            l2792: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2793;
            }
            l2793: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2794;
            }
            l2794: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2795;
            }
            l2795: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2796;
            }
            l2796: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2797;
            }
            l2797: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2798;
            }
            l2798: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2799;
            }
            l2799: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2800;
            }
            l2800: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2801;
            }
            l2801: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2802;
            }
            l2802: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2803;
            }
            l2803: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2804;
            }
            l2804: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2805;
            }
            l2805: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2806;
            }
            l2806: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2807;
            }
            l2807: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2808;
            }
            l2808: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2809;
            }
            l2809: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2810;
            }
            l2810: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2811;
            }
            l2811: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2812;
            }
            l2812: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2813;
            }
            l2813: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2814;
            }
            l2814: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2815;
            }
            l2815: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2816;
            }
            l2816: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2817;
            }
            l2817: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2818;
            }
            l2818: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2819;
            }
            l2819: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2820;
            }
            l2820: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2821;
            }
            l2821: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2822;
            }
            l2822: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2823;
            }
            l2823: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2824;
            }
            l2824: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2825;
            }
            l2825: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2826;
            }
            l2826: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2827;
            }
            l2827: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2828;
            }
            l2828: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2829;
            }
            l2829: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2830;
            }
            l2830: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2831;
            }
            l2831: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2832;
            }
            l2832: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2833;
            }
            l2833: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2834;
            }
            l2834: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2835;
            }
            l2835: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2836;
            }
            l2836: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2837;
            }
            l2837: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2838;
            }
            l2838: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2839;
            }
            l2839: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2840;
            }
            l2840: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2841;
            }
            l2841: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2842;
            }
            l2842: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2843;
            }
            l2843: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2844;
            }
            l2844: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2845;
            }
            l2845: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2846;
            }
            l2846: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2847;
            }
            l2847: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2848;
            }
            l2848: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2849;
            }
            l2849: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2850;
            }
            l2850: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2851;
            }
            l2851: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2852;
            }
            l2852: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2853;
            }
            l2853: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2854;
            }
            l2854: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2855;
            }
            l2855: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2856;
            }
            l2856: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2857;
            }
            l2857: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2858;
            }
            l2858: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2859;
            }
            l2859: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2860;
            }
            l2860: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2861;
            }
            l2861: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2862;
            }
            l2862: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2863;
            }
            l2863: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2864;
            }
            l2864: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2865;
            }
            l2865: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2866;
            }
            l2866: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2867;
            }
            l2867: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2868;
            }
            l2868: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2869;
            }
            l2869: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2870;
            }
            l2870: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2871;
            }
            l2871: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2872;
            }
            l2872: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2873;
            }
            l2873: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2874;
            }
            l2874: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2875;
            }
            l2875: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2876;
            }
            l2876: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2877;
            }
            l2877: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2878;
            }
            l2878: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2879;
            }
            l2879: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2880;
            }
            l2880: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2881;
            }
            l2881: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2882;
            }
            l2882: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2883;
            }
            l2883: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2884;
            }
            l2884: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2885;
            }
            l2885: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2886;
            }
            l2886: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2887;
            }
            l2887: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2888;
            }
            l2888: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2889;
            }
            l2889: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2890;
            }
            l2890: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2891;
            }
            l2891: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2892;
            }
            l2892: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2893;
            }
            l2893: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2894;
            }
            l2894: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2895;
            }
            l2895: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2896;
            }
            l2896: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2897;
            }
            l2897: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2898;
            }
            l2898: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2899;
            }
            l2899: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2900;
            }
            l2900: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2901;
            }
            l2901: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2902;
            }
            l2902: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2903;
            }
            l2903: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2904;
            }
            l2904: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2905;
            }
            l2905: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2906;
            }
            l2906: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2907;
            }
            l2907: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2908;
            }
            l2908: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2909;
            }
            l2909: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2910;
            }
            l2910: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2911;
            }
            l2911: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2912;
            }
            l2912: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2913;
            }
            l2913: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2914;
            }
            l2914: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2915;
            }
            l2915: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2916;
            }
            l2916: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2917;
            }
            l2917: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2918;
            }
            l2918: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2919;
            }
            l2919: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2920;
            }
            l2920: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2921;
            }
            l2921: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2922;
            }
            l2922: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2923;
            }
            l2923: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2924;
            }
            l2924: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2925;
            }
            l2925: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2926;
            }
            l2926: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2927;
            }
            l2927: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2928;
            }
            l2928: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2929;
            }
            l2929: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2930;
            }
            l2930: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2931;
            }
            l2931: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2932;
            }
            l2932: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2933;
            }
            l2933: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2934;
            }
            l2934: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2935;
            }
            l2935: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2936;
            }
            l2936: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2937;
            }
            l2937: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2938;
            }
            l2938: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2939;
            }
            l2939: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2940;
            }
            l2940: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2941;
            }
            l2941: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2942;
            }
            l2942: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2943;
            }
            l2943: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2944;
            }
            l2944: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2945;
            }
            l2945: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2946;
            }
            l2946: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2947;
            }
            l2947: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2948;
            }
            l2948: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2949;
            }
            l2949: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2950;
            }
            l2950: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2951;
            }
            l2951: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2952;
            }
            l2952: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2953;
            }
            l2953: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2954;
            }
            l2954: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2955;
            }
            l2955: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2956;
            }
            l2956: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2957;
            }
            l2957: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2958;
            }
            l2958: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2959;
            }
            l2959: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2960;
            }
            l2960: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2961;
            }
            l2961: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2962;
            }
            l2962: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2963;
            }
            l2963: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2964;
            }
            l2964: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2965;
            }
            l2965: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2966;
            }
            l2966: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2967;
            }
            l2967: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2968;
            }
            l2968: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2969;
            }
            l2969: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2970;
            }
            l2970: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2971;
            }
            l2971: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2972;
            }
            l2972: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2973;
            }
            l2973: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2974;
            }
            l2974: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2975;
            }
            l2975: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2976;
            }
            l2976: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2977;
            }
            l2977: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2978;
            }
            l2978: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2979;
            }
            l2979: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2980;
            }
            l2980: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                ((*out).Token.next) = ((((*out).Token.next + 1) % 12));
                ((*out).Token.NRT_count) = (((*out).Token.NRT_count - 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2981;
            }
        }
        l2981: if (  ( ((*in)._control.Token == 1) ) )
        {
            l2982: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2983;
            }
            l2983: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 2984;
            }
            l2984: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2985;
            }
            l2985: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2986;
            }
            l2986: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 2987;
            }
            l2987: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2988;
            }
            l2988: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2989;
            }
            l2989: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2990;
            }
            l2990: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2991;
            }
            l2991: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2992;
            }
            l2992: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 2993;
            }
            l2993: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2994;
            }
            l2994: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 2995;
            }
            l2995: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 2996;
            }
            l2996: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2997;
            }
            l2997: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 2998;
            }
            l2998: if (  ( ((((*in).Token.i < 12) && ((*in).in_RT[ (*in).Token.i ] == 0))) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 2999;
            }
            l2999: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3000;
            }
            l3000: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3001;
            }
            l3001: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3002;
            }
            l3002: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3003;
            }
            l3003: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3004;
            }
            l3004: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3005;
            }
            l3005: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3006;
            }
            l3006: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3007;
            }
            l3007: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3008;
            }
            l3008: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3009;
            }
            l3009: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3010;
            }
            l3010: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3011;
            }
            l3011: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3012;
            }
            l3012: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3013;
            }
            l3013: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3014;
            }
            l3014: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3015;
            }
            l3015: if (  ( (((*in).Token.i == 12)) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 3;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3016;
            }
        }
        l3016: if (  ( ((*in)._control.Token == 2) ) )
        {
            l3017: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3018;
            }
            l3018: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3019;
            }
            l3019: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3020;
            }
            l3020: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3021;
            }
            l3021: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3022;
            }
            l3022: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3023;
            }
            l3023: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3024;
            }
            l3024: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3025;
            }
            l3025: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3026;
            }
            l3026: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3027;
            }
            l3027: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3028;
            }
            l3028: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3029;
            }
            l3029: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3030;
            }
            l3030: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3031;
            }
            l3031: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3032;
            }
            l3032: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3033;
            }
            l3033: if (  ( ((*in)._control.Node_0 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_0 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3034;
            }
            l3034: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3035;
            }
            l3035: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3036;
            }
            l3036: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3037;
            }
            l3037: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3038;
            }
            l3038: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3039;
            }
            l3039: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3040;
            }
            l3040: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3041;
            }
            l3041: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3042;
            }
            l3042: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3043;
            }
            l3043: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3044;
            }
            l3044: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3045;
            }
            l3045: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3046;
            }
            l3046: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3047;
            }
            l3047: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3048;
            }
            l3048: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3049;
            }
            l3049: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3050;
            }
            l3050: if (  ( ((*in)._control.Node_1 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_1 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3051;
            }
            l3051: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3052;
            }
            l3052: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3053;
            }
            l3053: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3054;
            }
            l3054: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3055;
            }
            l3055: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3056;
            }
            l3056: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3057;
            }
            l3057: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3058;
            }
            l3058: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3059;
            }
            l3059: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3060;
            }
            l3060: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3061;
            }
            l3061: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3062;
            }
            l3062: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3063;
            }
            l3063: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3064;
            }
            l3064: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3065;
            }
            l3065: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3066;
            }
            l3066: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3067;
            }
            l3067: if (  ( ((*in)._control.Node_2 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_2 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3068;
            }
            l3068: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3069;
            }
            l3069: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3070;
            }
            l3070: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3071;
            }
            l3071: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3072;
            }
            l3072: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3073;
            }
            l3073: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3074;
            }
            l3074: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3075;
            }
            l3075: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3076;
            }
            l3076: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3077;
            }
            l3077: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3078;
            }
            l3078: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3079;
            }
            l3079: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3080;
            }
            l3080: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3081;
            }
            l3081: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3082;
            }
            l3082: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3083;
            }
            l3083: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3084;
            }
            l3084: if (  ( ((*in)._control.Node_3 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_3 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3085;
            }
            l3085: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3086;
            }
            l3086: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3087;
            }
            l3087: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3088;
            }
            l3088: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3089;
            }
            l3089: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3090;
            }
            l3090: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3091;
            }
            l3091: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3092;
            }
            l3092: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3093;
            }
            l3093: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3094;
            }
            l3094: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3095;
            }
            l3095: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3096;
            }
            l3096: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3097;
            }
            l3097: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3098;
            }
            l3098: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3099;
            }
            l3099: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3100;
            }
            l3100: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3101;
            }
            l3101: if (  ( ((*in)._control.Node_4 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_4 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3102;
            }
            l3102: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3103;
            }
            l3103: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3104;
            }
            l3104: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3105;
            }
            l3105: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3106;
            }
            l3106: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3107;
            }
            l3107: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3108;
            }
            l3108: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3109;
            }
            l3109: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3110;
            }
            l3110: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3111;
            }
            l3111: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3112;
            }
            l3112: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3113;
            }
            l3113: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3114;
            }
            l3114: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3115;
            }
            l3115: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3116;
            }
            l3116: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3117;
            }
            l3117: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3118;
            }
            l3118: if (  ( ((*in)._control.Node_5 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_5 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3119;
            }
            l3119: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3120;
            }
            l3120: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3121;
            }
            l3121: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3122;
            }
            l3122: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3123;
            }
            l3123: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3124;
            }
            l3124: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3125;
            }
            l3125: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3126;
            }
            l3126: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3127;
            }
            l3127: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3128;
            }
            l3128: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3129;
            }
            l3129: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3130;
            }
            l3130: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3131;
            }
            l3131: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3132;
            }
            l3132: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3133;
            }
            l3133: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3134;
            }
            l3134: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3135;
            }
            l3135: if (  ( ((*in)._control.Node_6 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_6 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3136;
            }
            l3136: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3137;
            }
            l3137: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3138;
            }
            l3138: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3139;
            }
            l3139: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3140;
            }
            l3140: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3141;
            }
            l3141: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3142;
            }
            l3142: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3143;
            }
            l3143: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3144;
            }
            l3144: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3145;
            }
            l3145: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3146;
            }
            l3146: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3147;
            }
            l3147: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3148;
            }
            l3148: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3149;
            }
            l3149: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3150;
            }
            l3150: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3151;
            }
            l3151: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3152;
            }
            l3152: if (  ( ((*in)._control.Node_7 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_7 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3153;
            }
            l3153: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3154;
            }
            l3154: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3155;
            }
            l3155: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3156;
            }
            l3156: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3157;
            }
            l3157: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3158;
            }
            l3158: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3159;
            }
            l3159: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3160;
            }
            l3160: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3161;
            }
            l3161: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3162;
            }
            l3162: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3163;
            }
            l3163: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3164;
            }
            l3164: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3165;
            }
            l3165: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3166;
            }
            l3166: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3167;
            }
            l3167: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3168;
            }
            l3168: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3169;
            }
            l3169: if (  ( ((*in)._control.Node_8 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_8 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3170;
            }
            l3170: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3171;
            }
            l3171: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3172;
            }
            l3172: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3173;
            }
            l3173: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3174;
            }
            l3174: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3175;
            }
            l3175: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3176;
            }
            l3176: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3177;
            }
            l3177: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3178;
            }
            l3178: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3179;
            }
            l3179: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3180;
            }
            l3180: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3181;
            }
            l3181: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3182;
            }
            l3182: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3183;
            }
            l3183: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3184;
            }
            l3184: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3185;
            }
            l3185: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3186;
            }
            l3186: if (  ( ((*in)._control.Node_9 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_9 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3187;
            }
            l3187: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3188;
            }
            l3188: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3189;
            }
            l3189: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3190;
            }
            l3190: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3191;
            }
            l3191: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3192;
            }
            l3192: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3193;
            }
            l3193: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3194;
            }
            l3194: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3195;
            }
            l3195: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3196;
            }
            l3196: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3197;
            }
            l3197: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3198;
            }
            l3198: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3199;
            }
            l3199: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3200;
            }
            l3200: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3201;
            }
            l3201: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3202;
            }
            l3202: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3203;
            }
            l3203: if (  ( ((*in)._control.Node_10 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_10 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3204;
            }
            l3204: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3205;
            }
            l3205: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3206;
            }
            l3206: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3207;
            }
            l3207: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3208;
            }
            l3208: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3209;
            }
            l3209: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3210;
            }
            l3210: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3211;
            }
            l3211: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3212;
            }
            l3212: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3213;
            }
            l3213: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3214;
            }
            l3214: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3215;
            }
            l3215: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3216;
            }
            l3216: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3217;
            }
            l3217: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3218;
            }
            l3218: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3219;
            }
            l3219: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3220;
            }
            l3220: if (  ( ((*in)._control.Node_11 == 6) )  &&  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (((*out).Token.i + 1));
                (*out)._control.Node_11 = 0;
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3221;
            }
        }
        l3221: if (  ( ((*in)._control.Token == 5) ) )
        {
            l3222: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3223;
            }
            l3223: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3224;
            }
            l3224: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3225;
            }
            l3225: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3226;
            }
            l3226: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3227;
            }
            l3227: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3228;
            }
            l3228: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3229;
            }
            l3229: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3230;
            }
            l3230: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3231;
            }
            l3231: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3232;
            }
            l3232: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3233;
            }
            l3233: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3234;
            }
            l3234: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3235;
            }
            l3235: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3236;
            }
            l3236: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3237;
            }
            l3237: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3238;
            }
            l3238: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 0;
                ((*out).Token.NRT_count) = ((6 - (*out).RT_count));
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3239;
            }
        }
        l3239: if (  ( ((*in)._control.Token == 0) ) )
        {
            l3240: if (  ( ((*in)._control.LTL_property == 0) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3241;
            }
            l3241: if (  ( ((*in)._control.LTL_property == 1) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 1;
                system_in_deadlock = false;
                *to = blob_out;
                return 3242;
            }
            l3242: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3243;
            }
            l3243: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3244;
            }
            l3244: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 2;
                system_in_deadlock = false;
                *to = blob_out;
                return 3245;
            }
            l3245: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3246;
            }
            l3246: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3247;
            }
            l3247: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3248;
            }
            l3248: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3249;
            }
            l3249: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3250;
            }
            l3250: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 3;
                system_in_deadlock = false;
                *to = blob_out;
                return 3251;
            }
            l3251: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3252;
            }
            l3252: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 5;
                system_in_deadlock = false;
                *to = blob_out;
                return 3253;
            }
            l3253: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 4;
                system_in_deadlock = false;
                *to = blob_out;
                return 3254;
            }
            l3254: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3255;
            }
            l3255: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 6;
                system_in_deadlock = false;
                *to = blob_out;
                return 3256;
            }
            l3256: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
            {
                cesmi_node blob_out = setup->make_node( setup, state_size );
                state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
                *out = *in;
                (*out)._control.Token = 1;
                ((*out).Token.i) = (0);
                (*out)._control.LTL_property = 0;
                system_in_deadlock = false;
                *to = blob_out;
                return 3257;
            }
        }
    }
    l3257: if (  ( system_in_deadlock ) )
    {
        l3258: if (  ( ((*in)._control.LTL_property == 0) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 0;
            *to = blob_out;
            return 3259;
        }
        l3259: if (  ( ((*in)._control.LTL_property == 1) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 1;
            *to = blob_out;
            return 3260;
        }
        l3260: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && !((((*in)._control.Node_0 == 2)) ))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 2;
            *to = blob_out;
            return 3261;
        }
        l3261: if (  ( ((*in)._control.LTL_property == 1) )  &&  ( (((((*in)._control.Node_0 == 5)) && (((*in)._control.Token == 5)))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 3;
            *to = blob_out;
            return 3262;
        }
        l3262: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 2;
            *to = blob_out;
            return 3263;
        }
        l3263: if (  ( ((*in)._control.LTL_property == 2) )  &&  ( ((((*in)._control.Token == 5))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 4;
            *to = blob_out;
            return 3264;
        }
        l3264: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 5;
            *to = blob_out;
            return 3265;
        }
        l3265: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((((*in)._control.Token == 5))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 4;
            *to = blob_out;
            return 3266;
        }
        l3266: if (  ( ((*in)._control.LTL_property == 3) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 6;
            *to = blob_out;
            return 3267;
        }
        l3267: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 3;
            *to = blob_out;
            return 3268;
        }
        l3268: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((((*in)._control.Token == 5))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 3;
            *to = blob_out;
            return 3269;
        }
        l3269: if (  ( ((*in)._control.LTL_property == 4) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 6;
            *to = blob_out;
            return 3270;
        }
        l3270: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 5;
            *to = blob_out;
            return 3271;
        }
        l3271: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((((*in)._control.Token == 5))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 4;
            *to = blob_out;
            return 3272;
        }
        l3272: if (  ( ((*in)._control.LTL_property == 5) )  &&  ( ((!((((*in)._control.Node_0 == 2)) ) && !((((*in)._control.Token == 5)) ))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 6;
            *to = blob_out;
            return 3273;
        }
        l3273: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( (!((((*in)._control.Node_0 == 2)) )) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 6;
            *to = blob_out;
            return 3274;
        }
        l3274: if (  ( ((*in)._control.LTL_property == 6) )  &&  ( ((((*in)._control.Token == 5))) ) )
        {
            cesmi_node blob_out = setup->make_node( setup, state_size );
            state_struct_t *out = reinterpret_cast< state_struct_t * >( blob_out.memory );
            *out = *in;
            (*out)._control.LTL_property = 0;
            *to = blob_out;
            return 3275;
        }
    }
    l3275: return 0;
    switch_state: switch( next_state )
    {
        case 1: system_in_deadlock = true; goto l1;
        case 2: goto l2;
        case 3: goto l3;
        case 4: goto l4;
        case 5: goto l5;
        case 6: goto l6;
        case 7: goto l7;
        case 8: goto l8;
        case 9: goto l9;
        case 10: goto l10;
        case 11: goto l11;
        case 12: goto l12;
        case 13: goto l13;
        case 14: goto l14;
        case 15: goto l15;
        case 16: goto l16;
        case 17: goto l17;
        case 18: goto l18;
        case 19: goto l19;
        case 20: goto l20;
        case 21: goto l21;
        case 22: goto l22;
        case 23: goto l23;
        case 24: goto l24;
        case 25: goto l25;
        case 26: goto l26;
        case 27: goto l27;
        case 28: goto l28;
        case 29: goto l29;
        case 30: goto l30;
        case 31: goto l31;
        case 32: goto l32;
        case 33: goto l33;
        case 34: goto l34;
        case 35: goto l35;
        case 36: goto l36;
        case 37: goto l37;
        case 38: goto l38;
        case 39: goto l39;
        case 40: goto l40;
        case 41: goto l41;
        case 42: goto l42;
        case 43: goto l43;
        case 44: goto l44;
        case 45: goto l45;
        case 46: goto l46;
        case 47: goto l47;
        case 48: goto l48;
        case 49: goto l49;
        case 50: goto l50;
        case 51: goto l51;
        case 52: goto l52;
        case 53: goto l53;
        case 54: goto l54;
        case 55: goto l55;
        case 56: goto l56;
        case 57: goto l57;
        case 58: goto l58;
        case 59: goto l59;
        case 60: goto l60;
        case 61: goto l61;
        case 62: goto l62;
        case 63: goto l63;
        case 64: goto l64;
        case 65: goto l65;
        case 66: goto l66;
        case 67: goto l67;
        case 68: goto l68;
        case 69: goto l69;
        case 70: goto l70;
        case 71: goto l71;
        case 72: goto l72;
        case 73: goto l73;
        case 74: goto l74;
        case 75: goto l75;
        case 76: goto l76;
        case 77: goto l77;
        case 78: goto l78;
        case 79: goto l79;
        case 80: goto l80;
        case 81: goto l81;
        case 82: goto l82;
        case 83: goto l83;
        case 84: goto l84;
        case 85: goto l85;
        case 86: goto l86;
        case 87: goto l87;
        case 88: goto l88;
        case 89: goto l89;
        case 90: goto l90;
        case 91: goto l91;
        case 92: goto l92;
        case 93: goto l93;
        case 94: goto l94;
        case 95: goto l95;
        case 96: goto l96;
        case 97: goto l97;
        case 98: goto l98;
        case 99: goto l99;
        case 100: goto l100;
        case 101: goto l101;
        case 102: goto l102;
        case 103: goto l103;
        case 104: goto l104;
        case 105: goto l105;
        case 106: goto l106;
        case 107: goto l107;
        case 108: goto l108;
        case 109: goto l109;
        case 110: goto l110;
        case 111: goto l111;
        case 112: goto l112;
        case 113: goto l113;
        case 114: goto l114;
        case 115: goto l115;
        case 116: goto l116;
        case 117: goto l117;
        case 118: goto l118;
        case 119: goto l119;
        case 120: goto l120;
        case 121: goto l121;
        case 122: goto l122;
        case 123: goto l123;
        case 124: goto l124;
        case 125: goto l125;
        case 126: goto l126;
        case 127: goto l127;
        case 128: goto l128;
        case 129: goto l129;
        case 130: goto l130;
        case 131: goto l131;
        case 132: goto l132;
        case 133: goto l133;
        case 134: goto l134;
        case 135: goto l135;
        case 136: goto l136;
        case 137: goto l137;
        case 138: goto l138;
        case 139: goto l139;
        case 140: goto l140;
        case 141: goto l141;
        case 142: goto l142;
        case 143: goto l143;
        case 144: goto l144;
        case 145: goto l145;
        case 146: goto l146;
        case 147: goto l147;
        case 148: goto l148;
        case 149: goto l149;
        case 150: goto l150;
        case 151: goto l151;
        case 152: goto l152;
        case 153: goto l153;
        case 154: goto l154;
        case 155: goto l155;
        case 156: goto l156;
        case 157: goto l157;
        case 158: goto l158;
        case 159: goto l159;
        case 160: goto l160;
        case 161: goto l161;
        case 162: goto l162;
        case 163: goto l163;
        case 164: goto l164;
        case 165: goto l165;
        case 166: goto l166;
        case 167: goto l167;
        case 168: goto l168;
        case 169: goto l169;
        case 170: goto l170;
        case 171: goto l171;
        case 172: goto l172;
        case 173: goto l173;
        case 174: goto l174;
        case 175: goto l175;
        case 176: goto l176;
        case 177: goto l177;
        case 178: goto l178;
        case 179: goto l179;
        case 180: goto l180;
        case 181: goto l181;
        case 182: goto l182;
        case 183: goto l183;
        case 184: goto l184;
        case 185: goto l185;
        case 186: goto l186;
        case 187: goto l187;
        case 188: goto l188;
        case 189: goto l189;
        case 190: goto l190;
        case 191: goto l191;
        case 192: goto l192;
        case 193: goto l193;
        case 194: goto l194;
        case 195: goto l195;
        case 196: goto l196;
        case 197: goto l197;
        case 198: goto l198;
        case 199: goto l199;
        case 200: goto l200;
        case 201: goto l201;
        case 202: goto l202;
        case 203: goto l203;
        case 204: goto l204;
        case 205: goto l205;
        case 206: goto l206;
        case 207: goto l207;
        case 208: goto l208;
        case 209: goto l209;
        case 210: goto l210;
        case 211: goto l211;
        case 212: goto l212;
        case 213: goto l213;
        case 214: goto l214;
        case 215: goto l215;
        case 216: goto l216;
        case 217: goto l217;
        case 218: goto l218;
        case 219: goto l219;
        case 220: goto l220;
        case 221: goto l221;
        case 222: goto l222;
        case 223: goto l223;
        case 224: goto l224;
        case 225: goto l225;
        case 226: goto l226;
        case 227: goto l227;
        case 228: goto l228;
        case 229: goto l229;
        case 230: goto l230;
        case 231: goto l231;
        case 232: goto l232;
        case 233: goto l233;
        case 234: goto l234;
        case 235: goto l235;
        case 236: goto l236;
        case 237: goto l237;
        case 238: goto l238;
        case 239: goto l239;
        case 240: goto l240;
        case 241: goto l241;
        case 242: goto l242;
        case 243: goto l243;
        case 244: goto l244;
        case 245: goto l245;
        case 246: goto l246;
        case 247: goto l247;
        case 248: goto l248;
        case 249: goto l249;
        case 250: goto l250;
        case 251: goto l251;
        case 252: goto l252;
        case 253: goto l253;
        case 254: goto l254;
        case 255: goto l255;
        case 256: goto l256;
        case 257: goto l257;
        case 258: goto l258;
        case 259: goto l259;
        case 260: goto l260;
        case 261: goto l261;
        case 262: goto l262;
        case 263: goto l263;
        case 264: goto l264;
        case 265: goto l265;
        case 266: goto l266;
        case 267: goto l267;
        case 268: goto l268;
        case 269: goto l269;
        case 270: goto l270;
        case 271: goto l271;
        case 272: goto l272;
        case 273: goto l273;
        case 274: goto l274;
        case 275: goto l275;
        case 276: goto l276;
        case 277: goto l277;
        case 278: goto l278;
        case 279: goto l279;
        case 280: goto l280;
        case 281: goto l281;
        case 282: goto l282;
        case 283: goto l283;
        case 284: goto l284;
        case 285: goto l285;
        case 286: goto l286;
        case 287: goto l287;
        case 288: goto l288;
        case 289: goto l289;
        case 290: goto l290;
        case 291: goto l291;
        case 292: goto l292;
        case 293: goto l293;
        case 294: goto l294;
        case 295: goto l295;
        case 296: goto l296;
        case 297: goto l297;
        case 298: goto l298;
        case 299: goto l299;
        case 300: goto l300;
        case 301: goto l301;
        case 302: goto l302;
        case 303: goto l303;
        case 304: goto l304;
        case 305: goto l305;
        case 306: goto l306;
        case 307: goto l307;
        case 308: goto l308;
        case 309: goto l309;
        case 310: goto l310;
        case 311: goto l311;
        case 312: goto l312;
        case 313: goto l313;
        case 314: goto l314;
        case 315: goto l315;
        case 316: goto l316;
        case 317: goto l317;
        case 318: goto l318;
        case 319: goto l319;
        case 320: goto l320;
        case 321: goto l321;
        case 322: goto l322;
        case 323: goto l323;
        case 324: goto l324;
        case 325: goto l325;
        case 326: goto l326;
        case 327: goto l327;
        case 328: goto l328;
        case 329: goto l329;
        case 330: goto l330;
        case 331: goto l331;
        case 332: goto l332;
        case 333: goto l333;
        case 334: goto l334;
        case 335: goto l335;
        case 336: goto l336;
        case 337: goto l337;
        case 338: goto l338;
        case 339: goto l339;
        case 340: goto l340;
        case 341: goto l341;
        case 342: goto l342;
        case 343: goto l343;
        case 344: goto l344;
        case 345: goto l345;
        case 346: goto l346;
        case 347: goto l347;
        case 348: goto l348;
        case 349: goto l349;
        case 350: goto l350;
        case 351: goto l351;
        case 352: goto l352;
        case 353: goto l353;
        case 354: goto l354;
        case 355: goto l355;
        case 356: goto l356;
        case 357: goto l357;
        case 358: goto l358;
        case 359: goto l359;
        case 360: goto l360;
        case 361: goto l361;
        case 362: goto l362;
        case 363: goto l363;
        case 364: goto l364;
        case 365: goto l365;
        case 366: goto l366;
        case 367: goto l367;
        case 368: goto l368;
        case 369: goto l369;
        case 370: goto l370;
        case 371: goto l371;
        case 372: goto l372;
        case 373: goto l373;
        case 374: goto l374;
        case 375: goto l375;
        case 376: goto l376;
        case 377: goto l377;
        case 378: goto l378;
        case 379: goto l379;
        case 380: goto l380;
        case 381: goto l381;
        case 382: goto l382;
        case 383: goto l383;
        case 384: goto l384;
        case 385: goto l385;
        case 386: goto l386;
        case 387: goto l387;
        case 388: goto l388;
        case 389: goto l389;
        case 390: goto l390;
        case 391: goto l391;
        case 392: goto l392;
        case 393: goto l393;
        case 394: goto l394;
        case 395: goto l395;
        case 396: goto l396;
        case 397: goto l397;
        case 398: goto l398;
        case 399: goto l399;
        case 400: goto l400;
        case 401: goto l401;
        case 402: goto l402;
        case 403: goto l403;
        case 404: goto l404;
        case 405: goto l405;
        case 406: goto l406;
        case 407: goto l407;
        case 408: goto l408;
        case 409: goto l409;
        case 410: goto l410;
        case 411: goto l411;
        case 412: goto l412;
        case 413: goto l413;
        case 414: goto l414;
        case 415: goto l415;
        case 416: goto l416;
        case 417: goto l417;
        case 418: goto l418;
        case 419: goto l419;
        case 420: goto l420;
        case 421: goto l421;
        case 422: goto l422;
        case 423: goto l423;
        case 424: goto l424;
        case 425: goto l425;
        case 426: goto l426;
        case 427: goto l427;
        case 428: goto l428;
        case 429: goto l429;
        case 430: goto l430;
        case 431: goto l431;
        case 432: goto l432;
        case 433: goto l433;
        case 434: goto l434;
        case 435: goto l435;
        case 436: goto l436;
        case 437: goto l437;
        case 438: goto l438;
        case 439: goto l439;
        case 440: goto l440;
        case 441: goto l441;
        case 442: goto l442;
        case 443: goto l443;
        case 444: goto l444;
        case 445: goto l445;
        case 446: goto l446;
        case 447: goto l447;
        case 448: goto l448;
        case 449: goto l449;
        case 450: goto l450;
        case 451: goto l451;
        case 452: goto l452;
        case 453: goto l453;
        case 454: goto l454;
        case 455: goto l455;
        case 456: goto l456;
        case 457: goto l457;
        case 458: goto l458;
        case 459: goto l459;
        case 460: goto l460;
        case 461: goto l461;
        case 462: goto l462;
        case 463: goto l463;
        case 464: goto l464;
        case 465: goto l465;
        case 466: goto l466;
        case 467: goto l467;
        case 468: goto l468;
        case 469: goto l469;
        case 470: goto l470;
        case 471: goto l471;
        case 472: goto l472;
        case 473: goto l473;
        case 474: goto l474;
        case 475: goto l475;
        case 476: goto l476;
        case 477: goto l477;
        case 478: goto l478;
        case 479: goto l479;
        case 480: goto l480;
        case 481: goto l481;
        case 482: goto l482;
        case 483: goto l483;
        case 484: goto l484;
        case 485: goto l485;
        case 486: goto l486;
        case 487: goto l487;
        case 488: goto l488;
        case 489: goto l489;
        case 490: goto l490;
        case 491: goto l491;
        case 492: goto l492;
        case 493: goto l493;
        case 494: goto l494;
        case 495: goto l495;
        case 496: goto l496;
        case 497: goto l497;
        case 498: goto l498;
        case 499: goto l499;
        case 500: goto l500;
        case 501: goto l501;
        case 502: goto l502;
        case 503: goto l503;
        case 504: goto l504;
        case 505: goto l505;
        case 506: goto l506;
        case 507: goto l507;
        case 508: goto l508;
        case 509: goto l509;
        case 510: goto l510;
        case 511: goto l511;
        case 512: goto l512;
        case 513: goto l513;
        case 514: goto l514;
        case 515: goto l515;
        case 516: goto l516;
        case 517: goto l517;
        case 518: goto l518;
        case 519: goto l519;
        case 520: goto l520;
        case 521: goto l521;
        case 522: goto l522;
        case 523: goto l523;
        case 524: goto l524;
        case 525: goto l525;
        case 526: goto l526;
        case 527: goto l527;
        case 528: goto l528;
        case 529: goto l529;
        case 530: goto l530;
        case 531: goto l531;
        case 532: goto l532;
        case 533: goto l533;
        case 534: goto l534;
        case 535: goto l535;
        case 536: goto l536;
        case 537: goto l537;
        case 538: goto l538;
        case 539: goto l539;
        case 540: goto l540;
        case 541: goto l541;
        case 542: goto l542;
        case 543: goto l543;
        case 544: goto l544;
        case 545: goto l545;
        case 546: goto l546;
        case 547: goto l547;
        case 548: goto l548;
        case 549: goto l549;
        case 550: goto l550;
        case 551: goto l551;
        case 552: goto l552;
        case 553: goto l553;
        case 554: goto l554;
        case 555: goto l555;
        case 556: goto l556;
        case 557: goto l557;
        case 558: goto l558;
        case 559: goto l559;
        case 560: goto l560;
        case 561: goto l561;
        case 562: goto l562;
        case 563: goto l563;
        case 564: goto l564;
        case 565: goto l565;
        case 566: goto l566;
        case 567: goto l567;
        case 568: goto l568;
        case 569: goto l569;
        case 570: goto l570;
        case 571: goto l571;
        case 572: goto l572;
        case 573: goto l573;
        case 574: goto l574;
        case 575: goto l575;
        case 576: goto l576;
        case 577: goto l577;
        case 578: goto l578;
        case 579: goto l579;
        case 580: goto l580;
        case 581: goto l581;
        case 582: goto l582;
        case 583: goto l583;
        case 584: goto l584;
        case 585: goto l585;
        case 586: goto l586;
        case 587: goto l587;
        case 588: goto l588;
        case 589: goto l589;
        case 590: goto l590;
        case 591: goto l591;
        case 592: goto l592;
        case 593: goto l593;
        case 594: goto l594;
        case 595: goto l595;
        case 596: goto l596;
        case 597: goto l597;
        case 598: goto l598;
        case 599: goto l599;
        case 600: goto l600;
        case 601: goto l601;
        case 602: goto l602;
        case 603: goto l603;
        case 604: goto l604;
        case 605: goto l605;
        case 606: goto l606;
        case 607: goto l607;
        case 608: goto l608;
        case 609: goto l609;
        case 610: goto l610;
        case 611: goto l611;
        case 612: goto l612;
        case 613: goto l613;
        case 614: goto l614;
        case 615: goto l615;
        case 616: goto l616;
        case 617: goto l617;
        case 618: goto l618;
        case 619: goto l619;
        case 620: goto l620;
        case 621: goto l621;
        case 622: goto l622;
        case 623: goto l623;
        case 624: goto l624;
        case 625: goto l625;
        case 626: goto l626;
        case 627: goto l627;
        case 628: goto l628;
        case 629: goto l629;
        case 630: goto l630;
        case 631: goto l631;
        case 632: goto l632;
        case 633: goto l633;
        case 634: goto l634;
        case 635: goto l635;
        case 636: goto l636;
        case 637: goto l637;
        case 638: goto l638;
        case 639: goto l639;
        case 640: goto l640;
        case 641: goto l641;
        case 642: goto l642;
        case 643: goto l643;
        case 644: goto l644;
        case 645: goto l645;
        case 646: goto l646;
        case 647: goto l647;
        case 648: goto l648;
        case 649: goto l649;
        case 650: goto l650;
        case 651: goto l651;
        case 652: goto l652;
        case 653: goto l653;
        case 654: goto l654;
        case 655: goto l655;
        case 656: goto l656;
        case 657: goto l657;
        case 658: goto l658;
        case 659: goto l659;
        case 660: goto l660;
        case 661: goto l661;
        case 662: goto l662;
        case 663: goto l663;
        case 664: goto l664;
        case 665: goto l665;
        case 666: goto l666;
        case 667: goto l667;
        case 668: goto l668;
        case 669: goto l669;
        case 670: goto l670;
        case 671: goto l671;
        case 672: goto l672;
        case 673: goto l673;
        case 674: goto l674;
        case 675: goto l675;
        case 676: goto l676;
        case 677: goto l677;
        case 678: goto l678;
        case 679: goto l679;
        case 680: goto l680;
        case 681: goto l681;
        case 682: goto l682;
        case 683: goto l683;
        case 684: goto l684;
        case 685: goto l685;
        case 686: goto l686;
        case 687: goto l687;
        case 688: goto l688;
        case 689: goto l689;
        case 690: goto l690;
        case 691: goto l691;
        case 692: goto l692;
        case 693: goto l693;
        case 694: goto l694;
        case 695: goto l695;
        case 696: goto l696;
        case 697: goto l697;
        case 698: goto l698;
        case 699: goto l699;
        case 700: goto l700;
        case 701: goto l701;
        case 702: goto l702;
        case 703: goto l703;
        case 704: goto l704;
        case 705: goto l705;
        case 706: goto l706;
        case 707: goto l707;
        case 708: goto l708;
        case 709: goto l709;
        case 710: goto l710;
        case 711: goto l711;
        case 712: goto l712;
        case 713: goto l713;
        case 714: goto l714;
        case 715: goto l715;
        case 716: goto l716;
        case 717: goto l717;
        case 718: goto l718;
        case 719: goto l719;
        case 720: goto l720;
        case 721: goto l721;
        case 722: goto l722;
        case 723: goto l723;
        case 724: goto l724;
        case 725: goto l725;
        case 726: goto l726;
        case 727: goto l727;
        case 728: goto l728;
        case 729: goto l729;
        case 730: goto l730;
        case 731: goto l731;
        case 732: goto l732;
        case 733: goto l733;
        case 734: goto l734;
        case 735: goto l735;
        case 736: goto l736;
        case 737: goto l737;
        case 738: goto l738;
        case 739: goto l739;
        case 740: goto l740;
        case 741: goto l741;
        case 742: goto l742;
        case 743: goto l743;
        case 744: goto l744;
        case 745: goto l745;
        case 746: goto l746;
        case 747: goto l747;
        case 748: goto l748;
        case 749: goto l749;
        case 750: goto l750;
        case 751: goto l751;
        case 752: goto l752;
        case 753: goto l753;
        case 754: goto l754;
        case 755: goto l755;
        case 756: goto l756;
        case 757: goto l757;
        case 758: goto l758;
        case 759: goto l759;
        case 760: goto l760;
        case 761: goto l761;
        case 762: goto l762;
        case 763: goto l763;
        case 764: goto l764;
        case 765: goto l765;
        case 766: goto l766;
        case 767: goto l767;
        case 768: goto l768;
        case 769: goto l769;
        case 770: goto l770;
        case 771: goto l771;
        case 772: goto l772;
        case 773: goto l773;
        case 774: goto l774;
        case 775: goto l775;
        case 776: goto l776;
        case 777: goto l777;
        case 778: goto l778;
        case 779: goto l779;
        case 780: goto l780;
        case 781: goto l781;
        case 782: goto l782;
        case 783: goto l783;
        case 784: goto l784;
        case 785: goto l785;
        case 786: goto l786;
        case 787: goto l787;
        case 788: goto l788;
        case 789: goto l789;
        case 790: goto l790;
        case 791: goto l791;
        case 792: goto l792;
        case 793: goto l793;
        case 794: goto l794;
        case 795: goto l795;
        case 796: goto l796;
        case 797: goto l797;
        case 798: goto l798;
        case 799: goto l799;
        case 800: goto l800;
        case 801: goto l801;
        case 802: goto l802;
        case 803: goto l803;
        case 804: goto l804;
        case 805: goto l805;
        case 806: goto l806;
        case 807: goto l807;
        case 808: goto l808;
        case 809: goto l809;
        case 810: goto l810;
        case 811: goto l811;
        case 812: goto l812;
        case 813: goto l813;
        case 814: goto l814;
        case 815: goto l815;
        case 816: goto l816;
        case 817: goto l817;
        case 818: goto l818;
        case 819: goto l819;
        case 820: goto l820;
        case 821: goto l821;
        case 822: goto l822;
        case 823: goto l823;
        case 824: goto l824;
        case 825: goto l825;
        case 826: goto l826;
        case 827: goto l827;
        case 828: goto l828;
        case 829: goto l829;
        case 830: goto l830;
        case 831: goto l831;
        case 832: goto l832;
        case 833: goto l833;
        case 834: goto l834;
        case 835: goto l835;
        case 836: goto l836;
        case 837: goto l837;
        case 838: goto l838;
        case 839: goto l839;
        case 840: goto l840;
        case 841: goto l841;
        case 842: goto l842;
        case 843: goto l843;
        case 844: goto l844;
        case 845: goto l845;
        case 846: goto l846;
        case 847: goto l847;
        case 848: goto l848;
        case 849: goto l849;
        case 850: goto l850;
        case 851: goto l851;
        case 852: goto l852;
        case 853: goto l853;
        case 854: goto l854;
        case 855: goto l855;
        case 856: goto l856;
        case 857: goto l857;
        case 858: goto l858;
        case 859: goto l859;
        case 860: goto l860;
        case 861: goto l861;
        case 862: goto l862;
        case 863: goto l863;
        case 864: goto l864;
        case 865: goto l865;
        case 866: goto l866;
        case 867: goto l867;
        case 868: goto l868;
        case 869: goto l869;
        case 870: goto l870;
        case 871: goto l871;
        case 872: goto l872;
        case 873: goto l873;
        case 874: goto l874;
        case 875: goto l875;
        case 876: goto l876;
        case 877: goto l877;
        case 878: goto l878;
        case 879: goto l879;
        case 880: goto l880;
        case 881: goto l881;
        case 882: goto l882;
        case 883: goto l883;
        case 884: goto l884;
        case 885: goto l885;
        case 886: goto l886;
        case 887: goto l887;
        case 888: goto l888;
        case 889: goto l889;
        case 890: goto l890;
        case 891: goto l891;
        case 892: goto l892;
        case 893: goto l893;
        case 894: goto l894;
        case 895: goto l895;
        case 896: goto l896;
        case 897: goto l897;
        case 898: goto l898;
        case 899: goto l899;
        case 900: goto l900;
        case 901: goto l901;
        case 902: goto l902;
        case 903: goto l903;
        case 904: goto l904;
        case 905: goto l905;
        case 906: goto l906;
        case 907: goto l907;
        case 908: goto l908;
        case 909: goto l909;
        case 910: goto l910;
        case 911: goto l911;
        case 912: goto l912;
        case 913: goto l913;
        case 914: goto l914;
        case 915: goto l915;
        case 916: goto l916;
        case 917: goto l917;
        case 918: goto l918;
        case 919: goto l919;
        case 920: goto l920;
        case 921: goto l921;
        case 922: goto l922;
        case 923: goto l923;
        case 924: goto l924;
        case 925: goto l925;
        case 926: goto l926;
        case 927: goto l927;
        case 928: goto l928;
        case 929: goto l929;
        case 930: goto l930;
        case 931: goto l931;
        case 932: goto l932;
        case 933: goto l933;
        case 934: goto l934;
        case 935: goto l935;
        case 936: goto l936;
        case 937: goto l937;
        case 938: goto l938;
        case 939: goto l939;
        case 940: goto l940;
        case 941: goto l941;
        case 942: goto l942;
        case 943: goto l943;
        case 944: goto l944;
        case 945: goto l945;
        case 946: goto l946;
        case 947: goto l947;
        case 948: goto l948;
        case 949: goto l949;
        case 950: goto l950;
        case 951: goto l951;
        case 952: goto l952;
        case 953: goto l953;
        case 954: goto l954;
        case 955: goto l955;
        case 956: goto l956;
        case 957: goto l957;
        case 958: goto l958;
        case 959: goto l959;
        case 960: goto l960;
        case 961: goto l961;
        case 962: goto l962;
        case 963: goto l963;
        case 964: goto l964;
        case 965: goto l965;
        case 966: goto l966;
        case 967: goto l967;
        case 968: goto l968;
        case 969: goto l969;
        case 970: goto l970;
        case 971: goto l971;
        case 972: goto l972;
        case 973: goto l973;
        case 974: goto l974;
        case 975: goto l975;
        case 976: goto l976;
        case 977: goto l977;
        case 978: goto l978;
        case 979: goto l979;
        case 980: goto l980;
        case 981: goto l981;
        case 982: goto l982;
        case 983: goto l983;
        case 984: goto l984;
        case 985: goto l985;
        case 986: goto l986;
        case 987: goto l987;
        case 988: goto l988;
        case 989: goto l989;
        case 990: goto l990;
        case 991: goto l991;
        case 992: goto l992;
        case 993: goto l993;
        case 994: goto l994;
        case 995: goto l995;
        case 996: goto l996;
        case 997: goto l997;
        case 998: goto l998;
        case 999: goto l999;
        case 1000: goto l1000;
        case 1001: goto l1001;
        case 1002: goto l1002;
        case 1003: goto l1003;
        case 1004: goto l1004;
        case 1005: goto l1005;
        case 1006: goto l1006;
        case 1007: goto l1007;
        case 1008: goto l1008;
        case 1009: goto l1009;
        case 1010: goto l1010;
        case 1011: goto l1011;
        case 1012: goto l1012;
        case 1013: goto l1013;
        case 1014: goto l1014;
        case 1015: goto l1015;
        case 1016: goto l1016;
        case 1017: goto l1017;
        case 1018: goto l1018;
        case 1019: goto l1019;
        case 1020: goto l1020;
        case 1021: goto l1021;
        case 1022: goto l1022;
        case 1023: goto l1023;
        case 1024: goto l1024;
        case 1025: goto l1025;
        case 1026: goto l1026;
        case 1027: goto l1027;
        case 1028: goto l1028;
        case 1029: goto l1029;
        case 1030: goto l1030;
        case 1031: goto l1031;
        case 1032: goto l1032;
        case 1033: goto l1033;
        case 1034: goto l1034;
        case 1035: goto l1035;
        case 1036: goto l1036;
        case 1037: goto l1037;
        case 1038: goto l1038;
        case 1039: goto l1039;
        case 1040: goto l1040;
        case 1041: goto l1041;
        case 1042: goto l1042;
        case 1043: goto l1043;
        case 1044: goto l1044;
        case 1045: goto l1045;
        case 1046: goto l1046;
        case 1047: goto l1047;
        case 1048: goto l1048;
        case 1049: goto l1049;
        case 1050: goto l1050;
        case 1051: goto l1051;
        case 1052: goto l1052;
        case 1053: goto l1053;
        case 1054: goto l1054;
        case 1055: goto l1055;
        case 1056: goto l1056;
        case 1057: goto l1057;
        case 1058: goto l1058;
        case 1059: goto l1059;
        case 1060: goto l1060;
        case 1061: goto l1061;
        case 1062: goto l1062;
        case 1063: goto l1063;
        case 1064: goto l1064;
        case 1065: goto l1065;
        case 1066: goto l1066;
        case 1067: goto l1067;
        case 1068: goto l1068;
        case 1069: goto l1069;
        case 1070: goto l1070;
        case 1071: goto l1071;
        case 1072: goto l1072;
        case 1073: goto l1073;
        case 1074: goto l1074;
        case 1075: goto l1075;
        case 1076: goto l1076;
        case 1077: goto l1077;
        case 1078: goto l1078;
        case 1079: goto l1079;
        case 1080: goto l1080;
        case 1081: goto l1081;
        case 1082: goto l1082;
        case 1083: goto l1083;
        case 1084: goto l1084;
        case 1085: goto l1085;
        case 1086: goto l1086;
        case 1087: goto l1087;
        case 1088: goto l1088;
        case 1089: goto l1089;
        case 1090: goto l1090;
        case 1091: goto l1091;
        case 1092: goto l1092;
        case 1093: goto l1093;
        case 1094: goto l1094;
        case 1095: goto l1095;
        case 1096: goto l1096;
        case 1097: goto l1097;
        case 1098: goto l1098;
        case 1099: goto l1099;
        case 1100: goto l1100;
        case 1101: goto l1101;
        case 1102: goto l1102;
        case 1103: goto l1103;
        case 1104: goto l1104;
        case 1105: goto l1105;
        case 1106: goto l1106;
        case 1107: goto l1107;
        case 1108: goto l1108;
        case 1109: goto l1109;
        case 1110: goto l1110;
        case 1111: goto l1111;
        case 1112: goto l1112;
        case 1113: goto l1113;
        case 1114: goto l1114;
        case 1115: goto l1115;
        case 1116: goto l1116;
        case 1117: goto l1117;
        case 1118: goto l1118;
        case 1119: goto l1119;
        case 1120: goto l1120;
        case 1121: goto l1121;
        case 1122: goto l1122;
        case 1123: goto l1123;
        case 1124: goto l1124;
        case 1125: goto l1125;
        case 1126: goto l1126;
        case 1127: goto l1127;
        case 1128: goto l1128;
        case 1129: goto l1129;
        case 1130: goto l1130;
        case 1131: goto l1131;
        case 1132: goto l1132;
        case 1133: goto l1133;
        case 1134: goto l1134;
        case 1135: goto l1135;
        case 1136: goto l1136;
        case 1137: goto l1137;
        case 1138: goto l1138;
        case 1139: goto l1139;
        case 1140: goto l1140;
        case 1141: goto l1141;
        case 1142: goto l1142;
        case 1143: goto l1143;
        case 1144: goto l1144;
        case 1145: goto l1145;
        case 1146: goto l1146;
        case 1147: goto l1147;
        case 1148: goto l1148;
        case 1149: goto l1149;
        case 1150: goto l1150;
        case 1151: goto l1151;
        case 1152: goto l1152;
        case 1153: goto l1153;
        case 1154: goto l1154;
        case 1155: goto l1155;
        case 1156: goto l1156;
        case 1157: goto l1157;
        case 1158: goto l1158;
        case 1159: goto l1159;
        case 1160: goto l1160;
        case 1161: goto l1161;
        case 1162: goto l1162;
        case 1163: goto l1163;
        case 1164: goto l1164;
        case 1165: goto l1165;
        case 1166: goto l1166;
        case 1167: goto l1167;
        case 1168: goto l1168;
        case 1169: goto l1169;
        case 1170: goto l1170;
        case 1171: goto l1171;
        case 1172: goto l1172;
        case 1173: goto l1173;
        case 1174: goto l1174;
        case 1175: goto l1175;
        case 1176: goto l1176;
        case 1177: goto l1177;
        case 1178: goto l1178;
        case 1179: goto l1179;
        case 1180: goto l1180;
        case 1181: goto l1181;
        case 1182: goto l1182;
        case 1183: goto l1183;
        case 1184: goto l1184;
        case 1185: goto l1185;
        case 1186: goto l1186;
        case 1187: goto l1187;
        case 1188: goto l1188;
        case 1189: goto l1189;
        case 1190: goto l1190;
        case 1191: goto l1191;
        case 1192: goto l1192;
        case 1193: goto l1193;
        case 1194: goto l1194;
        case 1195: goto l1195;
        case 1196: goto l1196;
        case 1197: goto l1197;
        case 1198: goto l1198;
        case 1199: goto l1199;
        case 1200: goto l1200;
        case 1201: goto l1201;
        case 1202: goto l1202;
        case 1203: goto l1203;
        case 1204: goto l1204;
        case 1205: goto l1205;
        case 1206: goto l1206;
        case 1207: goto l1207;
        case 1208: goto l1208;
        case 1209: goto l1209;
        case 1210: goto l1210;
        case 1211: goto l1211;
        case 1212: goto l1212;
        case 1213: goto l1213;
        case 1214: goto l1214;
        case 1215: goto l1215;
        case 1216: goto l1216;
        case 1217: goto l1217;
        case 1218: goto l1218;
        case 1219: goto l1219;
        case 1220: goto l1220;
        case 1221: goto l1221;
        case 1222: goto l1222;
        case 1223: goto l1223;
        case 1224: goto l1224;
        case 1225: goto l1225;
        case 1226: goto l1226;
        case 1227: goto l1227;
        case 1228: goto l1228;
        case 1229: goto l1229;
        case 1230: goto l1230;
        case 1231: goto l1231;
        case 1232: goto l1232;
        case 1233: goto l1233;
        case 1234: goto l1234;
        case 1235: goto l1235;
        case 1236: goto l1236;
        case 1237: goto l1237;
        case 1238: goto l1238;
        case 1239: goto l1239;
        case 1240: goto l1240;
        case 1241: goto l1241;
        case 1242: goto l1242;
        case 1243: goto l1243;
        case 1244: goto l1244;
        case 1245: goto l1245;
        case 1246: goto l1246;
        case 1247: goto l1247;
        case 1248: goto l1248;
        case 1249: goto l1249;
        case 1250: goto l1250;
        case 1251: goto l1251;
        case 1252: goto l1252;
        case 1253: goto l1253;
        case 1254: goto l1254;
        case 1255: goto l1255;
        case 1256: goto l1256;
        case 1257: goto l1257;
        case 1258: goto l1258;
        case 1259: goto l1259;
        case 1260: goto l1260;
        case 1261: goto l1261;
        case 1262: goto l1262;
        case 1263: goto l1263;
        case 1264: goto l1264;
        case 1265: goto l1265;
        case 1266: goto l1266;
        case 1267: goto l1267;
        case 1268: goto l1268;
        case 1269: goto l1269;
        case 1270: goto l1270;
        case 1271: goto l1271;
        case 1272: goto l1272;
        case 1273: goto l1273;
        case 1274: goto l1274;
        case 1275: goto l1275;
        case 1276: goto l1276;
        case 1277: goto l1277;
        case 1278: goto l1278;
        case 1279: goto l1279;
        case 1280: goto l1280;
        case 1281: goto l1281;
        case 1282: goto l1282;
        case 1283: goto l1283;
        case 1284: goto l1284;
        case 1285: goto l1285;
        case 1286: goto l1286;
        case 1287: goto l1287;
        case 1288: goto l1288;
        case 1289: goto l1289;
        case 1290: goto l1290;
        case 1291: goto l1291;
        case 1292: goto l1292;
        case 1293: goto l1293;
        case 1294: goto l1294;
        case 1295: goto l1295;
        case 1296: goto l1296;
        case 1297: goto l1297;
        case 1298: goto l1298;
        case 1299: goto l1299;
        case 1300: goto l1300;
        case 1301: goto l1301;
        case 1302: goto l1302;
        case 1303: goto l1303;
        case 1304: goto l1304;
        case 1305: goto l1305;
        case 1306: goto l1306;
        case 1307: goto l1307;
        case 1308: goto l1308;
        case 1309: goto l1309;
        case 1310: goto l1310;
        case 1311: goto l1311;
        case 1312: goto l1312;
        case 1313: goto l1313;
        case 1314: goto l1314;
        case 1315: goto l1315;
        case 1316: goto l1316;
        case 1317: goto l1317;
        case 1318: goto l1318;
        case 1319: goto l1319;
        case 1320: goto l1320;
        case 1321: goto l1321;
        case 1322: goto l1322;
        case 1323: goto l1323;
        case 1324: goto l1324;
        case 1325: goto l1325;
        case 1326: goto l1326;
        case 1327: goto l1327;
        case 1328: goto l1328;
        case 1329: goto l1329;
        case 1330: goto l1330;
        case 1331: goto l1331;
        case 1332: goto l1332;
        case 1333: goto l1333;
        case 1334: goto l1334;
        case 1335: goto l1335;
        case 1336: goto l1336;
        case 1337: goto l1337;
        case 1338: goto l1338;
        case 1339: goto l1339;
        case 1340: goto l1340;
        case 1341: goto l1341;
        case 1342: goto l1342;
        case 1343: goto l1343;
        case 1344: goto l1344;
        case 1345: goto l1345;
        case 1346: goto l1346;
        case 1347: goto l1347;
        case 1348: goto l1348;
        case 1349: goto l1349;
        case 1350: goto l1350;
        case 1351: goto l1351;
        case 1352: goto l1352;
        case 1353: goto l1353;
        case 1354: goto l1354;
        case 1355: goto l1355;
        case 1356: goto l1356;
        case 1357: goto l1357;
        case 1358: goto l1358;
        case 1359: goto l1359;
        case 1360: goto l1360;
        case 1361: goto l1361;
        case 1362: goto l1362;
        case 1363: goto l1363;
        case 1364: goto l1364;
        case 1365: goto l1365;
        case 1366: goto l1366;
        case 1367: goto l1367;
        case 1368: goto l1368;
        case 1369: goto l1369;
        case 1370: goto l1370;
        case 1371: goto l1371;
        case 1372: goto l1372;
        case 1373: goto l1373;
        case 1374: goto l1374;
        case 1375: goto l1375;
        case 1376: goto l1376;
        case 1377: goto l1377;
        case 1378: goto l1378;
        case 1379: goto l1379;
        case 1380: goto l1380;
        case 1381: goto l1381;
        case 1382: goto l1382;
        case 1383: goto l1383;
        case 1384: goto l1384;
        case 1385: goto l1385;
        case 1386: goto l1386;
        case 1387: goto l1387;
        case 1388: goto l1388;
        case 1389: goto l1389;
        case 1390: goto l1390;
        case 1391: goto l1391;
        case 1392: goto l1392;
        case 1393: goto l1393;
        case 1394: goto l1394;
        case 1395: goto l1395;
        case 1396: goto l1396;
        case 1397: goto l1397;
        case 1398: goto l1398;
        case 1399: goto l1399;
        case 1400: goto l1400;
        case 1401: goto l1401;
        case 1402: goto l1402;
        case 1403: goto l1403;
        case 1404: goto l1404;
        case 1405: goto l1405;
        case 1406: goto l1406;
        case 1407: goto l1407;
        case 1408: goto l1408;
        case 1409: goto l1409;
        case 1410: goto l1410;
        case 1411: goto l1411;
        case 1412: goto l1412;
        case 1413: goto l1413;
        case 1414: goto l1414;
        case 1415: goto l1415;
        case 1416: goto l1416;
        case 1417: goto l1417;
        case 1418: goto l1418;
        case 1419: goto l1419;
        case 1420: goto l1420;
        case 1421: goto l1421;
        case 1422: goto l1422;
        case 1423: goto l1423;
        case 1424: goto l1424;
        case 1425: goto l1425;
        case 1426: goto l1426;
        case 1427: goto l1427;
        case 1428: goto l1428;
        case 1429: goto l1429;
        case 1430: goto l1430;
        case 1431: goto l1431;
        case 1432: goto l1432;
        case 1433: goto l1433;
        case 1434: goto l1434;
        case 1435: goto l1435;
        case 1436: goto l1436;
        case 1437: goto l1437;
        case 1438: goto l1438;
        case 1439: goto l1439;
        case 1440: goto l1440;
        case 1441: goto l1441;
        case 1442: goto l1442;
        case 1443: goto l1443;
        case 1444: goto l1444;
        case 1445: goto l1445;
        case 1446: goto l1446;
        case 1447: goto l1447;
        case 1448: goto l1448;
        case 1449: goto l1449;
        case 1450: goto l1450;
        case 1451: goto l1451;
        case 1452: goto l1452;
        case 1453: goto l1453;
        case 1454: goto l1454;
        case 1455: goto l1455;
        case 1456: goto l1456;
        case 1457: goto l1457;
        case 1458: goto l1458;
        case 1459: goto l1459;
        case 1460: goto l1460;
        case 1461: goto l1461;
        case 1462: goto l1462;
        case 1463: goto l1463;
        case 1464: goto l1464;
        case 1465: goto l1465;
        case 1466: goto l1466;
        case 1467: goto l1467;
        case 1468: goto l1468;
        case 1469: goto l1469;
        case 1470: goto l1470;
        case 1471: goto l1471;
        case 1472: goto l1472;
        case 1473: goto l1473;
        case 1474: goto l1474;
        case 1475: goto l1475;
        case 1476: goto l1476;
        case 1477: goto l1477;
        case 1478: goto l1478;
        case 1479: goto l1479;
        case 1480: goto l1480;
        case 1481: goto l1481;
        case 1482: goto l1482;
        case 1483: goto l1483;
        case 1484: goto l1484;
        case 1485: goto l1485;
        case 1486: goto l1486;
        case 1487: goto l1487;
        case 1488: goto l1488;
        case 1489: goto l1489;
        case 1490: goto l1490;
        case 1491: goto l1491;
        case 1492: goto l1492;
        case 1493: goto l1493;
        case 1494: goto l1494;
        case 1495: goto l1495;
        case 1496: goto l1496;
        case 1497: goto l1497;
        case 1498: goto l1498;
        case 1499: goto l1499;
        case 1500: goto l1500;
        case 1501: goto l1501;
        case 1502: goto l1502;
        case 1503: goto l1503;
        case 1504: goto l1504;
        case 1505: goto l1505;
        case 1506: goto l1506;
        case 1507: goto l1507;
        case 1508: goto l1508;
        case 1509: goto l1509;
        case 1510: goto l1510;
        case 1511: goto l1511;
        case 1512: goto l1512;
        case 1513: goto l1513;
        case 1514: goto l1514;
        case 1515: goto l1515;
        case 1516: goto l1516;
        case 1517: goto l1517;
        case 1518: goto l1518;
        case 1519: goto l1519;
        case 1520: goto l1520;
        case 1521: goto l1521;
        case 1522: goto l1522;
        case 1523: goto l1523;
        case 1524: goto l1524;
        case 1525: goto l1525;
        case 1526: goto l1526;
        case 1527: goto l1527;
        case 1528: goto l1528;
        case 1529: goto l1529;
        case 1530: goto l1530;
        case 1531: goto l1531;
        case 1532: goto l1532;
        case 1533: goto l1533;
        case 1534: goto l1534;
        case 1535: goto l1535;
        case 1536: goto l1536;
        case 1537: goto l1537;
        case 1538: goto l1538;
        case 1539: goto l1539;
        case 1540: goto l1540;
        case 1541: goto l1541;
        case 1542: goto l1542;
        case 1543: goto l1543;
        case 1544: goto l1544;
        case 1545: goto l1545;
        case 1546: goto l1546;
        case 1547: goto l1547;
        case 1548: goto l1548;
        case 1549: goto l1549;
        case 1550: goto l1550;
        case 1551: goto l1551;
        case 1552: goto l1552;
        case 1553: goto l1553;
        case 1554: goto l1554;
        case 1555: goto l1555;
        case 1556: goto l1556;
        case 1557: goto l1557;
        case 1558: goto l1558;
        case 1559: goto l1559;
        case 1560: goto l1560;
        case 1561: goto l1561;
        case 1562: goto l1562;
        case 1563: goto l1563;
        case 1564: goto l1564;
        case 1565: goto l1565;
        case 1566: goto l1566;
        case 1567: goto l1567;
        case 1568: goto l1568;
        case 1569: goto l1569;
        case 1570: goto l1570;
        case 1571: goto l1571;
        case 1572: goto l1572;
        case 1573: goto l1573;
        case 1574: goto l1574;
        case 1575: goto l1575;
        case 1576: goto l1576;
        case 1577: goto l1577;
        case 1578: goto l1578;
        case 1579: goto l1579;
        case 1580: goto l1580;
        case 1581: goto l1581;
        case 1582: goto l1582;
        case 1583: goto l1583;
        case 1584: goto l1584;
        case 1585: goto l1585;
        case 1586: goto l1586;
        case 1587: goto l1587;
        case 1588: goto l1588;
        case 1589: goto l1589;
        case 1590: goto l1590;
        case 1591: goto l1591;
        case 1592: goto l1592;
        case 1593: goto l1593;
        case 1594: goto l1594;
        case 1595: goto l1595;
        case 1596: goto l1596;
        case 1597: goto l1597;
        case 1598: goto l1598;
        case 1599: goto l1599;
        case 1600: goto l1600;
        case 1601: goto l1601;
        case 1602: goto l1602;
        case 1603: goto l1603;
        case 1604: goto l1604;
        case 1605: goto l1605;
        case 1606: goto l1606;
        case 1607: goto l1607;
        case 1608: goto l1608;
        case 1609: goto l1609;
        case 1610: goto l1610;
        case 1611: goto l1611;
        case 1612: goto l1612;
        case 1613: goto l1613;
        case 1614: goto l1614;
        case 1615: goto l1615;
        case 1616: goto l1616;
        case 1617: goto l1617;
        case 1618: goto l1618;
        case 1619: goto l1619;
        case 1620: goto l1620;
        case 1621: goto l1621;
        case 1622: goto l1622;
        case 1623: goto l1623;
        case 1624: goto l1624;
        case 1625: goto l1625;
        case 1626: goto l1626;
        case 1627: goto l1627;
        case 1628: goto l1628;
        case 1629: goto l1629;
        case 1630: goto l1630;
        case 1631: goto l1631;
        case 1632: goto l1632;
        case 1633: goto l1633;
        case 1634: goto l1634;
        case 1635: goto l1635;
        case 1636: goto l1636;
        case 1637: goto l1637;
        case 1638: goto l1638;
        case 1639: goto l1639;
        case 1640: goto l1640;
        case 1641: goto l1641;
        case 1642: goto l1642;
        case 1643: goto l1643;
        case 1644: goto l1644;
        case 1645: goto l1645;
        case 1646: goto l1646;
        case 1647: goto l1647;
        case 1648: goto l1648;
        case 1649: goto l1649;
        case 1650: goto l1650;
        case 1651: goto l1651;
        case 1652: goto l1652;
        case 1653: goto l1653;
        case 1654: goto l1654;
        case 1655: goto l1655;
        case 1656: goto l1656;
        case 1657: goto l1657;
        case 1658: goto l1658;
        case 1659: goto l1659;
        case 1660: goto l1660;
        case 1661: goto l1661;
        case 1662: goto l1662;
        case 1663: goto l1663;
        case 1664: goto l1664;
        case 1665: goto l1665;
        case 1666: goto l1666;
        case 1667: goto l1667;
        case 1668: goto l1668;
        case 1669: goto l1669;
        case 1670: goto l1670;
        case 1671: goto l1671;
        case 1672: goto l1672;
        case 1673: goto l1673;
        case 1674: goto l1674;
        case 1675: goto l1675;
        case 1676: goto l1676;
        case 1677: goto l1677;
        case 1678: goto l1678;
        case 1679: goto l1679;
        case 1680: goto l1680;
        case 1681: goto l1681;
        case 1682: goto l1682;
        case 1683: goto l1683;
        case 1684: goto l1684;
        case 1685: goto l1685;
        case 1686: goto l1686;
        case 1687: goto l1687;
        case 1688: goto l1688;
        case 1689: goto l1689;
        case 1690: goto l1690;
        case 1691: goto l1691;
        case 1692: goto l1692;
        case 1693: goto l1693;
        case 1694: goto l1694;
        case 1695: goto l1695;
        case 1696: goto l1696;
        case 1697: goto l1697;
        case 1698: goto l1698;
        case 1699: goto l1699;
        case 1700: goto l1700;
        case 1701: goto l1701;
        case 1702: goto l1702;
        case 1703: goto l1703;
        case 1704: goto l1704;
        case 1705: goto l1705;
        case 1706: goto l1706;
        case 1707: goto l1707;
        case 1708: goto l1708;
        case 1709: goto l1709;
        case 1710: goto l1710;
        case 1711: goto l1711;
        case 1712: goto l1712;
        case 1713: goto l1713;
        case 1714: goto l1714;
        case 1715: goto l1715;
        case 1716: goto l1716;
        case 1717: goto l1717;
        case 1718: goto l1718;
        case 1719: goto l1719;
        case 1720: goto l1720;
        case 1721: goto l1721;
        case 1722: goto l1722;
        case 1723: goto l1723;
        case 1724: goto l1724;
        case 1725: goto l1725;
        case 1726: goto l1726;
        case 1727: goto l1727;
        case 1728: goto l1728;
        case 1729: goto l1729;
        case 1730: goto l1730;
        case 1731: goto l1731;
        case 1732: goto l1732;
        case 1733: goto l1733;
        case 1734: goto l1734;
        case 1735: goto l1735;
        case 1736: goto l1736;
        case 1737: goto l1737;
        case 1738: goto l1738;
        case 1739: goto l1739;
        case 1740: goto l1740;
        case 1741: goto l1741;
        case 1742: goto l1742;
        case 1743: goto l1743;
        case 1744: goto l1744;
        case 1745: goto l1745;
        case 1746: goto l1746;
        case 1747: goto l1747;
        case 1748: goto l1748;
        case 1749: goto l1749;
        case 1750: goto l1750;
        case 1751: goto l1751;
        case 1752: goto l1752;
        case 1753: goto l1753;
        case 1754: goto l1754;
        case 1755: goto l1755;
        case 1756: goto l1756;
        case 1757: goto l1757;
        case 1758: goto l1758;
        case 1759: goto l1759;
        case 1760: goto l1760;
        case 1761: goto l1761;
        case 1762: goto l1762;
        case 1763: goto l1763;
        case 1764: goto l1764;
        case 1765: goto l1765;
        case 1766: goto l1766;
        case 1767: goto l1767;
        case 1768: goto l1768;
        case 1769: goto l1769;
        case 1770: goto l1770;
        case 1771: goto l1771;
        case 1772: goto l1772;
        case 1773: goto l1773;
        case 1774: goto l1774;
        case 1775: goto l1775;
        case 1776: goto l1776;
        case 1777: goto l1777;
        case 1778: goto l1778;
        case 1779: goto l1779;
        case 1780: goto l1780;
        case 1781: goto l1781;
        case 1782: goto l1782;
        case 1783: goto l1783;
        case 1784: goto l1784;
        case 1785: goto l1785;
        case 1786: goto l1786;
        case 1787: goto l1787;
        case 1788: goto l1788;
        case 1789: goto l1789;
        case 1790: goto l1790;
        case 1791: goto l1791;
        case 1792: goto l1792;
        case 1793: goto l1793;
        case 1794: goto l1794;
        case 1795: goto l1795;
        case 1796: goto l1796;
        case 1797: goto l1797;
        case 1798: goto l1798;
        case 1799: goto l1799;
        case 1800: goto l1800;
        case 1801: goto l1801;
        case 1802: goto l1802;
        case 1803: goto l1803;
        case 1804: goto l1804;
        case 1805: goto l1805;
        case 1806: goto l1806;
        case 1807: goto l1807;
        case 1808: goto l1808;
        case 1809: goto l1809;
        case 1810: goto l1810;
        case 1811: goto l1811;
        case 1812: goto l1812;
        case 1813: goto l1813;
        case 1814: goto l1814;
        case 1815: goto l1815;
        case 1816: goto l1816;
        case 1817: goto l1817;
        case 1818: goto l1818;
        case 1819: goto l1819;
        case 1820: goto l1820;
        case 1821: goto l1821;
        case 1822: goto l1822;
        case 1823: goto l1823;
        case 1824: goto l1824;
        case 1825: goto l1825;
        case 1826: goto l1826;
        case 1827: goto l1827;
        case 1828: goto l1828;
        case 1829: goto l1829;
        case 1830: goto l1830;
        case 1831: goto l1831;
        case 1832: goto l1832;
        case 1833: goto l1833;
        case 1834: goto l1834;
        case 1835: goto l1835;
        case 1836: goto l1836;
        case 1837: goto l1837;
        case 1838: goto l1838;
        case 1839: goto l1839;
        case 1840: goto l1840;
        case 1841: goto l1841;
        case 1842: goto l1842;
        case 1843: goto l1843;
        case 1844: goto l1844;
        case 1845: goto l1845;
        case 1846: goto l1846;
        case 1847: goto l1847;
        case 1848: goto l1848;
        case 1849: goto l1849;
        case 1850: goto l1850;
        case 1851: goto l1851;
        case 1852: goto l1852;
        case 1853: goto l1853;
        case 1854: goto l1854;
        case 1855: goto l1855;
        case 1856: goto l1856;
        case 1857: goto l1857;
        case 1858: goto l1858;
        case 1859: goto l1859;
        case 1860: goto l1860;
        case 1861: goto l1861;
        case 1862: goto l1862;
        case 1863: goto l1863;
        case 1864: goto l1864;
        case 1865: goto l1865;
        case 1866: goto l1866;
        case 1867: goto l1867;
        case 1868: goto l1868;
        case 1869: goto l1869;
        case 1870: goto l1870;
        case 1871: goto l1871;
        case 1872: goto l1872;
        case 1873: goto l1873;
        case 1874: goto l1874;
        case 1875: goto l1875;
        case 1876: goto l1876;
        case 1877: goto l1877;
        case 1878: goto l1878;
        case 1879: goto l1879;
        case 1880: goto l1880;
        case 1881: goto l1881;
        case 1882: goto l1882;
        case 1883: goto l1883;
        case 1884: goto l1884;
        case 1885: goto l1885;
        case 1886: goto l1886;
        case 1887: goto l1887;
        case 1888: goto l1888;
        case 1889: goto l1889;
        case 1890: goto l1890;
        case 1891: goto l1891;
        case 1892: goto l1892;
        case 1893: goto l1893;
        case 1894: goto l1894;
        case 1895: goto l1895;
        case 1896: goto l1896;
        case 1897: goto l1897;
        case 1898: goto l1898;
        case 1899: goto l1899;
        case 1900: goto l1900;
        case 1901: goto l1901;
        case 1902: goto l1902;
        case 1903: goto l1903;
        case 1904: goto l1904;
        case 1905: goto l1905;
        case 1906: goto l1906;
        case 1907: goto l1907;
        case 1908: goto l1908;
        case 1909: goto l1909;
        case 1910: goto l1910;
        case 1911: goto l1911;
        case 1912: goto l1912;
        case 1913: goto l1913;
        case 1914: goto l1914;
        case 1915: goto l1915;
        case 1916: goto l1916;
        case 1917: goto l1917;
        case 1918: goto l1918;
        case 1919: goto l1919;
        case 1920: goto l1920;
        case 1921: goto l1921;
        case 1922: goto l1922;
        case 1923: goto l1923;
        case 1924: goto l1924;
        case 1925: goto l1925;
        case 1926: goto l1926;
        case 1927: goto l1927;
        case 1928: goto l1928;
        case 1929: goto l1929;
        case 1930: goto l1930;
        case 1931: goto l1931;
        case 1932: goto l1932;
        case 1933: goto l1933;
        case 1934: goto l1934;
        case 1935: goto l1935;
        case 1936: goto l1936;
        case 1937: goto l1937;
        case 1938: goto l1938;
        case 1939: goto l1939;
        case 1940: goto l1940;
        case 1941: goto l1941;
        case 1942: goto l1942;
        case 1943: goto l1943;
        case 1944: goto l1944;
        case 1945: goto l1945;
        case 1946: goto l1946;
        case 1947: goto l1947;
        case 1948: goto l1948;
        case 1949: goto l1949;
        case 1950: goto l1950;
        case 1951: goto l1951;
        case 1952: goto l1952;
        case 1953: goto l1953;
        case 1954: goto l1954;
        case 1955: goto l1955;
        case 1956: goto l1956;
        case 1957: goto l1957;
        case 1958: goto l1958;
        case 1959: goto l1959;
        case 1960: goto l1960;
        case 1961: goto l1961;
        case 1962: goto l1962;
        case 1963: goto l1963;
        case 1964: goto l1964;
        case 1965: goto l1965;
        case 1966: goto l1966;
        case 1967: goto l1967;
        case 1968: goto l1968;
        case 1969: goto l1969;
        case 1970: goto l1970;
        case 1971: goto l1971;
        case 1972: goto l1972;
        case 1973: goto l1973;
        case 1974: goto l1974;
        case 1975: goto l1975;
        case 1976: goto l1976;
        case 1977: goto l1977;
        case 1978: goto l1978;
        case 1979: goto l1979;
        case 1980: goto l1980;
        case 1981: goto l1981;
        case 1982: goto l1982;
        case 1983: goto l1983;
        case 1984: goto l1984;
        case 1985: goto l1985;
        case 1986: goto l1986;
        case 1987: goto l1987;
        case 1988: goto l1988;
        case 1989: goto l1989;
        case 1990: goto l1990;
        case 1991: goto l1991;
        case 1992: goto l1992;
        case 1993: goto l1993;
        case 1994: goto l1994;
        case 1995: goto l1995;
        case 1996: goto l1996;
        case 1997: goto l1997;
        case 1998: goto l1998;
        case 1999: goto l1999;
        case 2000: goto l2000;
        case 2001: goto l2001;
        case 2002: goto l2002;
        case 2003: goto l2003;
        case 2004: goto l2004;
        case 2005: goto l2005;
        case 2006: goto l2006;
        case 2007: goto l2007;
        case 2008: goto l2008;
        case 2009: goto l2009;
        case 2010: goto l2010;
        case 2011: goto l2011;
        case 2012: goto l2012;
        case 2013: goto l2013;
        case 2014: goto l2014;
        case 2015: goto l2015;
        case 2016: goto l2016;
        case 2017: goto l2017;
        case 2018: goto l2018;
        case 2019: goto l2019;
        case 2020: goto l2020;
        case 2021: goto l2021;
        case 2022: goto l2022;
        case 2023: goto l2023;
        case 2024: goto l2024;
        case 2025: goto l2025;
        case 2026: goto l2026;
        case 2027: goto l2027;
        case 2028: goto l2028;
        case 2029: goto l2029;
        case 2030: goto l2030;
        case 2031: goto l2031;
        case 2032: goto l2032;
        case 2033: goto l2033;
        case 2034: goto l2034;
        case 2035: goto l2035;
        case 2036: goto l2036;
        case 2037: goto l2037;
        case 2038: goto l2038;
        case 2039: goto l2039;
        case 2040: goto l2040;
        case 2041: goto l2041;
        case 2042: goto l2042;
        case 2043: goto l2043;
        case 2044: goto l2044;
        case 2045: goto l2045;
        case 2046: goto l2046;
        case 2047: goto l2047;
        case 2048: goto l2048;
        case 2049: goto l2049;
        case 2050: goto l2050;
        case 2051: goto l2051;
        case 2052: goto l2052;
        case 2053: goto l2053;
        case 2054: goto l2054;
        case 2055: goto l2055;
        case 2056: goto l2056;
        case 2057: goto l2057;
        case 2058: goto l2058;
        case 2059: goto l2059;
        case 2060: goto l2060;
        case 2061: goto l2061;
        case 2062: goto l2062;
        case 2063: goto l2063;
        case 2064: goto l2064;
        case 2065: goto l2065;
        case 2066: goto l2066;
        case 2067: goto l2067;
        case 2068: goto l2068;
        case 2069: goto l2069;
        case 2070: goto l2070;
        case 2071: goto l2071;
        case 2072: goto l2072;
        case 2073: goto l2073;
        case 2074: goto l2074;
        case 2075: goto l2075;
        case 2076: goto l2076;
        case 2077: goto l2077;
        case 2078: goto l2078;
        case 2079: goto l2079;
        case 2080: goto l2080;
        case 2081: goto l2081;
        case 2082: goto l2082;
        case 2083: goto l2083;
        case 2084: goto l2084;
        case 2085: goto l2085;
        case 2086: goto l2086;
        case 2087: goto l2087;
        case 2088: goto l2088;
        case 2089: goto l2089;
        case 2090: goto l2090;
        case 2091: goto l2091;
        case 2092: goto l2092;
        case 2093: goto l2093;
        case 2094: goto l2094;
        case 2095: goto l2095;
        case 2096: goto l2096;
        case 2097: goto l2097;
        case 2098: goto l2098;
        case 2099: goto l2099;
        case 2100: goto l2100;
        case 2101: goto l2101;
        case 2102: goto l2102;
        case 2103: goto l2103;
        case 2104: goto l2104;
        case 2105: goto l2105;
        case 2106: goto l2106;
        case 2107: goto l2107;
        case 2108: goto l2108;
        case 2109: goto l2109;
        case 2110: goto l2110;
        case 2111: goto l2111;
        case 2112: goto l2112;
        case 2113: goto l2113;
        case 2114: goto l2114;
        case 2115: goto l2115;
        case 2116: goto l2116;
        case 2117: goto l2117;
        case 2118: goto l2118;
        case 2119: goto l2119;
        case 2120: goto l2120;
        case 2121: goto l2121;
        case 2122: goto l2122;
        case 2123: goto l2123;
        case 2124: goto l2124;
        case 2125: goto l2125;
        case 2126: goto l2126;
        case 2127: goto l2127;
        case 2128: goto l2128;
        case 2129: goto l2129;
        case 2130: goto l2130;
        case 2131: goto l2131;
        case 2132: goto l2132;
        case 2133: goto l2133;
        case 2134: goto l2134;
        case 2135: goto l2135;
        case 2136: goto l2136;
        case 2137: goto l2137;
        case 2138: goto l2138;
        case 2139: goto l2139;
        case 2140: goto l2140;
        case 2141: goto l2141;
        case 2142: goto l2142;
        case 2143: goto l2143;
        case 2144: goto l2144;
        case 2145: goto l2145;
        case 2146: goto l2146;
        case 2147: goto l2147;
        case 2148: goto l2148;
        case 2149: goto l2149;
        case 2150: goto l2150;
        case 2151: goto l2151;
        case 2152: goto l2152;
        case 2153: goto l2153;
        case 2154: goto l2154;
        case 2155: goto l2155;
        case 2156: goto l2156;
        case 2157: goto l2157;
        case 2158: goto l2158;
        case 2159: goto l2159;
        case 2160: goto l2160;
        case 2161: goto l2161;
        case 2162: goto l2162;
        case 2163: goto l2163;
        case 2164: goto l2164;
        case 2165: goto l2165;
        case 2166: goto l2166;
        case 2167: goto l2167;
        case 2168: goto l2168;
        case 2169: goto l2169;
        case 2170: goto l2170;
        case 2171: goto l2171;
        case 2172: goto l2172;
        case 2173: goto l2173;
        case 2174: goto l2174;
        case 2175: goto l2175;
        case 2176: goto l2176;
        case 2177: goto l2177;
        case 2178: goto l2178;
        case 2179: goto l2179;
        case 2180: goto l2180;
        case 2181: goto l2181;
        case 2182: goto l2182;
        case 2183: goto l2183;
        case 2184: goto l2184;
        case 2185: goto l2185;
        case 2186: goto l2186;
        case 2187: goto l2187;
        case 2188: goto l2188;
        case 2189: goto l2189;
        case 2190: goto l2190;
        case 2191: goto l2191;
        case 2192: goto l2192;
        case 2193: goto l2193;
        case 2194: goto l2194;
        case 2195: goto l2195;
        case 2196: goto l2196;
        case 2197: goto l2197;
        case 2198: goto l2198;
        case 2199: goto l2199;
        case 2200: goto l2200;
        case 2201: goto l2201;
        case 2202: goto l2202;
        case 2203: goto l2203;
        case 2204: goto l2204;
        case 2205: goto l2205;
        case 2206: goto l2206;
        case 2207: goto l2207;
        case 2208: goto l2208;
        case 2209: goto l2209;
        case 2210: goto l2210;
        case 2211: goto l2211;
        case 2212: goto l2212;
        case 2213: goto l2213;
        case 2214: goto l2214;
        case 2215: goto l2215;
        case 2216: goto l2216;
        case 2217: goto l2217;
        case 2218: goto l2218;
        case 2219: goto l2219;
        case 2220: goto l2220;
        case 2221: goto l2221;
        case 2222: goto l2222;
        case 2223: goto l2223;
        case 2224: goto l2224;
        case 2225: goto l2225;
        case 2226: goto l2226;
        case 2227: goto l2227;
        case 2228: goto l2228;
        case 2229: goto l2229;
        case 2230: goto l2230;
        case 2231: goto l2231;
        case 2232: goto l2232;
        case 2233: goto l2233;
        case 2234: goto l2234;
        case 2235: goto l2235;
        case 2236: goto l2236;
        case 2237: goto l2237;
        case 2238: goto l2238;
        case 2239: goto l2239;
        case 2240: goto l2240;
        case 2241: goto l2241;
        case 2242: goto l2242;
        case 2243: goto l2243;
        case 2244: goto l2244;
        case 2245: goto l2245;
        case 2246: goto l2246;
        case 2247: goto l2247;
        case 2248: goto l2248;
        case 2249: goto l2249;
        case 2250: goto l2250;
        case 2251: goto l2251;
        case 2252: goto l2252;
        case 2253: goto l2253;
        case 2254: goto l2254;
        case 2255: goto l2255;
        case 2256: goto l2256;
        case 2257: goto l2257;
        case 2258: goto l2258;
        case 2259: goto l2259;
        case 2260: goto l2260;
        case 2261: goto l2261;
        case 2262: goto l2262;
        case 2263: goto l2263;
        case 2264: goto l2264;
        case 2265: goto l2265;
        case 2266: goto l2266;
        case 2267: goto l2267;
        case 2268: goto l2268;
        case 2269: goto l2269;
        case 2270: goto l2270;
        case 2271: goto l2271;
        case 2272: goto l2272;
        case 2273: goto l2273;
        case 2274: goto l2274;
        case 2275: goto l2275;
        case 2276: goto l2276;
        case 2277: goto l2277;
        case 2278: goto l2278;
        case 2279: goto l2279;
        case 2280: goto l2280;
        case 2281: goto l2281;
        case 2282: goto l2282;
        case 2283: goto l2283;
        case 2284: goto l2284;
        case 2285: goto l2285;
        case 2286: goto l2286;
        case 2287: goto l2287;
        case 2288: goto l2288;
        case 2289: goto l2289;
        case 2290: goto l2290;
        case 2291: goto l2291;
        case 2292: goto l2292;
        case 2293: goto l2293;
        case 2294: goto l2294;
        case 2295: goto l2295;
        case 2296: goto l2296;
        case 2297: goto l2297;
        case 2298: goto l2298;
        case 2299: goto l2299;
        case 2300: goto l2300;
        case 2301: goto l2301;
        case 2302: goto l2302;
        case 2303: goto l2303;
        case 2304: goto l2304;
        case 2305: goto l2305;
        case 2306: goto l2306;
        case 2307: goto l2307;
        case 2308: goto l2308;
        case 2309: goto l2309;
        case 2310: goto l2310;
        case 2311: goto l2311;
        case 2312: goto l2312;
        case 2313: goto l2313;
        case 2314: goto l2314;
        case 2315: goto l2315;
        case 2316: goto l2316;
        case 2317: goto l2317;
        case 2318: goto l2318;
        case 2319: goto l2319;
        case 2320: goto l2320;
        case 2321: goto l2321;
        case 2322: goto l2322;
        case 2323: goto l2323;
        case 2324: goto l2324;
        case 2325: goto l2325;
        case 2326: goto l2326;
        case 2327: goto l2327;
        case 2328: goto l2328;
        case 2329: goto l2329;
        case 2330: goto l2330;
        case 2331: goto l2331;
        case 2332: goto l2332;
        case 2333: goto l2333;
        case 2334: goto l2334;
        case 2335: goto l2335;
        case 2336: goto l2336;
        case 2337: goto l2337;
        case 2338: goto l2338;
        case 2339: goto l2339;
        case 2340: goto l2340;
        case 2341: goto l2341;
        case 2342: goto l2342;
        case 2343: goto l2343;
        case 2344: goto l2344;
        case 2345: goto l2345;
        case 2346: goto l2346;
        case 2347: goto l2347;
        case 2348: goto l2348;
        case 2349: goto l2349;
        case 2350: goto l2350;
        case 2351: goto l2351;
        case 2352: goto l2352;
        case 2353: goto l2353;
        case 2354: goto l2354;
        case 2355: goto l2355;
        case 2356: goto l2356;
        case 2357: goto l2357;
        case 2358: goto l2358;
        case 2359: goto l2359;
        case 2360: goto l2360;
        case 2361: goto l2361;
        case 2362: goto l2362;
        case 2363: goto l2363;
        case 2364: goto l2364;
        case 2365: goto l2365;
        case 2366: goto l2366;
        case 2367: goto l2367;
        case 2368: goto l2368;
        case 2369: goto l2369;
        case 2370: goto l2370;
        case 2371: goto l2371;
        case 2372: goto l2372;
        case 2373: goto l2373;
        case 2374: goto l2374;
        case 2375: goto l2375;
        case 2376: goto l2376;
        case 2377: goto l2377;
        case 2378: goto l2378;
        case 2379: goto l2379;
        case 2380: goto l2380;
        case 2381: goto l2381;
        case 2382: goto l2382;
        case 2383: goto l2383;
        case 2384: goto l2384;
        case 2385: goto l2385;
        case 2386: goto l2386;
        case 2387: goto l2387;
        case 2388: goto l2388;
        case 2389: goto l2389;
        case 2390: goto l2390;
        case 2391: goto l2391;
        case 2392: goto l2392;
        case 2393: goto l2393;
        case 2394: goto l2394;
        case 2395: goto l2395;
        case 2396: goto l2396;
        case 2397: goto l2397;
        case 2398: goto l2398;
        case 2399: goto l2399;
        case 2400: goto l2400;
        case 2401: goto l2401;
        case 2402: goto l2402;
        case 2403: goto l2403;
        case 2404: goto l2404;
        case 2405: goto l2405;
        case 2406: goto l2406;
        case 2407: goto l2407;
        case 2408: goto l2408;
        case 2409: goto l2409;
        case 2410: goto l2410;
        case 2411: goto l2411;
        case 2412: goto l2412;
        case 2413: goto l2413;
        case 2414: goto l2414;
        case 2415: goto l2415;
        case 2416: goto l2416;
        case 2417: goto l2417;
        case 2418: goto l2418;
        case 2419: goto l2419;
        case 2420: goto l2420;
        case 2421: goto l2421;
        case 2422: goto l2422;
        case 2423: goto l2423;
        case 2424: goto l2424;
        case 2425: goto l2425;
        case 2426: goto l2426;
        case 2427: goto l2427;
        case 2428: goto l2428;
        case 2429: goto l2429;
        case 2430: goto l2430;
        case 2431: goto l2431;
        case 2432: goto l2432;
        case 2433: goto l2433;
        case 2434: goto l2434;
        case 2435: goto l2435;
        case 2436: goto l2436;
        case 2437: goto l2437;
        case 2438: goto l2438;
        case 2439: goto l2439;
        case 2440: goto l2440;
        case 2441: goto l2441;
        case 2442: goto l2442;
        case 2443: goto l2443;
        case 2444: goto l2444;
        case 2445: goto l2445;
        case 2446: goto l2446;
        case 2447: goto l2447;
        case 2448: goto l2448;
        case 2449: goto l2449;
        case 2450: goto l2450;
        case 2451: goto l2451;
        case 2452: goto l2452;
        case 2453: goto l2453;
        case 2454: goto l2454;
        case 2455: goto l2455;
        case 2456: goto l2456;
        case 2457: goto l2457;
        case 2458: goto l2458;
        case 2459: goto l2459;
        case 2460: goto l2460;
        case 2461: goto l2461;
        case 2462: goto l2462;
        case 2463: goto l2463;
        case 2464: goto l2464;
        case 2465: goto l2465;
        case 2466: goto l2466;
        case 2467: goto l2467;
        case 2468: goto l2468;
        case 2469: goto l2469;
        case 2470: goto l2470;
        case 2471: goto l2471;
        case 2472: goto l2472;
        case 2473: goto l2473;
        case 2474: goto l2474;
        case 2475: goto l2475;
        case 2476: goto l2476;
        case 2477: goto l2477;
        case 2478: goto l2478;
        case 2479: goto l2479;
        case 2480: goto l2480;
        case 2481: goto l2481;
        case 2482: goto l2482;
        case 2483: goto l2483;
        case 2484: goto l2484;
        case 2485: goto l2485;
        case 2486: goto l2486;
        case 2487: goto l2487;
        case 2488: goto l2488;
        case 2489: goto l2489;
        case 2490: goto l2490;
        case 2491: goto l2491;
        case 2492: goto l2492;
        case 2493: goto l2493;
        case 2494: goto l2494;
        case 2495: goto l2495;
        case 2496: goto l2496;
        case 2497: goto l2497;
        case 2498: goto l2498;
        case 2499: goto l2499;
        case 2500: goto l2500;
        case 2501: goto l2501;
        case 2502: goto l2502;
        case 2503: goto l2503;
        case 2504: goto l2504;
        case 2505: goto l2505;
        case 2506: goto l2506;
        case 2507: goto l2507;
        case 2508: goto l2508;
        case 2509: goto l2509;
        case 2510: goto l2510;
        case 2511: goto l2511;
        case 2512: goto l2512;
        case 2513: goto l2513;
        case 2514: goto l2514;
        case 2515: goto l2515;
        case 2516: goto l2516;
        case 2517: goto l2517;
        case 2518: goto l2518;
        case 2519: goto l2519;
        case 2520: goto l2520;
        case 2521: goto l2521;
        case 2522: goto l2522;
        case 2523: goto l2523;
        case 2524: goto l2524;
        case 2525: goto l2525;
        case 2526: goto l2526;
        case 2527: goto l2527;
        case 2528: goto l2528;
        case 2529: goto l2529;
        case 2530: goto l2530;
        case 2531: goto l2531;
        case 2532: goto l2532;
        case 2533: goto l2533;
        case 2534: goto l2534;
        case 2535: goto l2535;
        case 2536: goto l2536;
        case 2537: goto l2537;
        case 2538: goto l2538;
        case 2539: goto l2539;
        case 2540: goto l2540;
        case 2541: goto l2541;
        case 2542: goto l2542;
        case 2543: goto l2543;
        case 2544: goto l2544;
        case 2545: goto l2545;
        case 2546: goto l2546;
        case 2547: goto l2547;
        case 2548: goto l2548;
        case 2549: goto l2549;
        case 2550: goto l2550;
        case 2551: goto l2551;
        case 2552: goto l2552;
        case 2553: goto l2553;
        case 2554: goto l2554;
        case 2555: goto l2555;
        case 2556: goto l2556;
        case 2557: goto l2557;
        case 2558: goto l2558;
        case 2559: goto l2559;
        case 2560: goto l2560;
        case 2561: goto l2561;
        case 2562: goto l2562;
        case 2563: goto l2563;
        case 2564: goto l2564;
        case 2565: goto l2565;
        case 2566: goto l2566;
        case 2567: goto l2567;
        case 2568: goto l2568;
        case 2569: goto l2569;
        case 2570: goto l2570;
        case 2571: goto l2571;
        case 2572: goto l2572;
        case 2573: goto l2573;
        case 2574: goto l2574;
        case 2575: goto l2575;
        case 2576: goto l2576;
        case 2577: goto l2577;
        case 2578: goto l2578;
        case 2579: goto l2579;
        case 2580: goto l2580;
        case 2581: goto l2581;
        case 2582: goto l2582;
        case 2583: goto l2583;
        case 2584: goto l2584;
        case 2585: goto l2585;
        case 2586: goto l2586;
        case 2587: goto l2587;
        case 2588: goto l2588;
        case 2589: goto l2589;
        case 2590: goto l2590;
        case 2591: goto l2591;
        case 2592: goto l2592;
        case 2593: goto l2593;
        case 2594: goto l2594;
        case 2595: goto l2595;
        case 2596: goto l2596;
        case 2597: goto l2597;
        case 2598: goto l2598;
        case 2599: goto l2599;
        case 2600: goto l2600;
        case 2601: goto l2601;
        case 2602: goto l2602;
        case 2603: goto l2603;
        case 2604: goto l2604;
        case 2605: goto l2605;
        case 2606: goto l2606;
        case 2607: goto l2607;
        case 2608: goto l2608;
        case 2609: goto l2609;
        case 2610: goto l2610;
        case 2611: goto l2611;
        case 2612: goto l2612;
        case 2613: goto l2613;
        case 2614: goto l2614;
        case 2615: goto l2615;
        case 2616: goto l2616;
        case 2617: goto l2617;
        case 2618: goto l2618;
        case 2619: goto l2619;
        case 2620: goto l2620;
        case 2621: goto l2621;
        case 2622: goto l2622;
        case 2623: goto l2623;
        case 2624: goto l2624;
        case 2625: goto l2625;
        case 2626: goto l2626;
        case 2627: goto l2627;
        case 2628: goto l2628;
        case 2629: goto l2629;
        case 2630: goto l2630;
        case 2631: goto l2631;
        case 2632: goto l2632;
        case 2633: goto l2633;
        case 2634: goto l2634;
        case 2635: goto l2635;
        case 2636: goto l2636;
        case 2637: goto l2637;
        case 2638: goto l2638;
        case 2639: goto l2639;
        case 2640: goto l2640;
        case 2641: goto l2641;
        case 2642: goto l2642;
        case 2643: goto l2643;
        case 2644: goto l2644;
        case 2645: goto l2645;
        case 2646: goto l2646;
        case 2647: goto l2647;
        case 2648: goto l2648;
        case 2649: goto l2649;
        case 2650: goto l2650;
        case 2651: goto l2651;
        case 2652: goto l2652;
        case 2653: goto l2653;
        case 2654: goto l2654;
        case 2655: goto l2655;
        case 2656: goto l2656;
        case 2657: goto l2657;
        case 2658: goto l2658;
        case 2659: goto l2659;
        case 2660: goto l2660;
        case 2661: goto l2661;
        case 2662: goto l2662;
        case 2663: goto l2663;
        case 2664: goto l2664;
        case 2665: goto l2665;
        case 2666: goto l2666;
        case 2667: goto l2667;
        case 2668: goto l2668;
        case 2669: goto l2669;
        case 2670: goto l2670;
        case 2671: goto l2671;
        case 2672: goto l2672;
        case 2673: goto l2673;
        case 2674: goto l2674;
        case 2675: goto l2675;
        case 2676: goto l2676;
        case 2677: goto l2677;
        case 2678: goto l2678;
        case 2679: goto l2679;
        case 2680: goto l2680;
        case 2681: goto l2681;
        case 2682: goto l2682;
        case 2683: goto l2683;
        case 2684: goto l2684;
        case 2685: goto l2685;
        case 2686: goto l2686;
        case 2687: goto l2687;
        case 2688: goto l2688;
        case 2689: goto l2689;
        case 2690: goto l2690;
        case 2691: goto l2691;
        case 2692: goto l2692;
        case 2693: goto l2693;
        case 2694: goto l2694;
        case 2695: goto l2695;
        case 2696: goto l2696;
        case 2697: goto l2697;
        case 2698: goto l2698;
        case 2699: goto l2699;
        case 2700: goto l2700;
        case 2701: goto l2701;
        case 2702: goto l2702;
        case 2703: goto l2703;
        case 2704: goto l2704;
        case 2705: goto l2705;
        case 2706: goto l2706;
        case 2707: goto l2707;
        case 2708: goto l2708;
        case 2709: goto l2709;
        case 2710: goto l2710;
        case 2711: goto l2711;
        case 2712: goto l2712;
        case 2713: goto l2713;
        case 2714: goto l2714;
        case 2715: goto l2715;
        case 2716: goto l2716;
        case 2717: goto l2717;
        case 2718: goto l2718;
        case 2719: goto l2719;
        case 2720: goto l2720;
        case 2721: goto l2721;
        case 2722: goto l2722;
        case 2723: goto l2723;
        case 2724: goto l2724;
        case 2725: goto l2725;
        case 2726: goto l2726;
        case 2727: goto l2727;
        case 2728: goto l2728;
        case 2729: goto l2729;
        case 2730: goto l2730;
        case 2731: goto l2731;
        case 2732: goto l2732;
        case 2733: goto l2733;
        case 2734: goto l2734;
        case 2735: goto l2735;
        case 2736: goto l2736;
        case 2737: goto l2737;
        case 2738: goto l2738;
        case 2739: goto l2739;
        case 2740: goto l2740;
        case 2741: goto l2741;
        case 2742: goto l2742;
        case 2743: goto l2743;
        case 2744: goto l2744;
        case 2745: goto l2745;
        case 2746: goto l2746;
        case 2747: goto l2747;
        case 2748: goto l2748;
        case 2749: goto l2749;
        case 2750: goto l2750;
        case 2751: goto l2751;
        case 2752: goto l2752;
        case 2753: goto l2753;
        case 2754: goto l2754;
        case 2755: goto l2755;
        case 2756: goto l2756;
        case 2757: goto l2757;
        case 2758: goto l2758;
        case 2759: goto l2759;
        case 2760: goto l2760;
        case 2761: goto l2761;
        case 2762: goto l2762;
        case 2763: goto l2763;
        case 2764: goto l2764;
        case 2765: goto l2765;
        case 2766: goto l2766;
        case 2767: goto l2767;
        case 2768: goto l2768;
        case 2769: goto l2769;
        case 2770: goto l2770;
        case 2771: goto l2771;
        case 2772: goto l2772;
        case 2773: goto l2773;
        case 2774: goto l2774;
        case 2775: goto l2775;
        case 2776: goto l2776;
        case 2777: goto l2777;
        case 2778: goto l2778;
        case 2779: goto l2779;
        case 2780: goto l2780;
        case 2781: goto l2781;
        case 2782: goto l2782;
        case 2783: goto l2783;
        case 2784: goto l2784;
        case 2785: goto l2785;
        case 2786: goto l2786;
        case 2787: goto l2787;
        case 2788: goto l2788;
        case 2789: goto l2789;
        case 2790: goto l2790;
        case 2791: goto l2791;
        case 2792: goto l2792;
        case 2793: goto l2793;
        case 2794: goto l2794;
        case 2795: goto l2795;
        case 2796: goto l2796;
        case 2797: goto l2797;
        case 2798: goto l2798;
        case 2799: goto l2799;
        case 2800: goto l2800;
        case 2801: goto l2801;
        case 2802: goto l2802;
        case 2803: goto l2803;
        case 2804: goto l2804;
        case 2805: goto l2805;
        case 2806: goto l2806;
        case 2807: goto l2807;
        case 2808: goto l2808;
        case 2809: goto l2809;
        case 2810: goto l2810;
        case 2811: goto l2811;
        case 2812: goto l2812;
        case 2813: goto l2813;
        case 2814: goto l2814;
        case 2815: goto l2815;
        case 2816: goto l2816;
        case 2817: goto l2817;
        case 2818: goto l2818;
        case 2819: goto l2819;
        case 2820: goto l2820;
        case 2821: goto l2821;
        case 2822: goto l2822;
        case 2823: goto l2823;
        case 2824: goto l2824;
        case 2825: goto l2825;
        case 2826: goto l2826;
        case 2827: goto l2827;
        case 2828: goto l2828;
        case 2829: goto l2829;
        case 2830: goto l2830;
        case 2831: goto l2831;
        case 2832: goto l2832;
        case 2833: goto l2833;
        case 2834: goto l2834;
        case 2835: goto l2835;
        case 2836: goto l2836;
        case 2837: goto l2837;
        case 2838: goto l2838;
        case 2839: goto l2839;
        case 2840: goto l2840;
        case 2841: goto l2841;
        case 2842: goto l2842;
        case 2843: goto l2843;
        case 2844: goto l2844;
        case 2845: goto l2845;
        case 2846: goto l2846;
        case 2847: goto l2847;
        case 2848: goto l2848;
        case 2849: goto l2849;
        case 2850: goto l2850;
        case 2851: goto l2851;
        case 2852: goto l2852;
        case 2853: goto l2853;
        case 2854: goto l2854;
        case 2855: goto l2855;
        case 2856: goto l2856;
        case 2857: goto l2857;
        case 2858: goto l2858;
        case 2859: goto l2859;
        case 2860: goto l2860;
        case 2861: goto l2861;
        case 2862: goto l2862;
        case 2863: goto l2863;
        case 2864: goto l2864;
        case 2865: goto l2865;
        case 2866: goto l2866;
        case 2867: goto l2867;
        case 2868: goto l2868;
        case 2869: goto l2869;
        case 2870: goto l2870;
        case 2871: goto l2871;
        case 2872: goto l2872;
        case 2873: goto l2873;
        case 2874: goto l2874;
        case 2875: goto l2875;
        case 2876: goto l2876;
        case 2877: goto l2877;
        case 2878: goto l2878;
        case 2879: goto l2879;
        case 2880: goto l2880;
        case 2881: goto l2881;
        case 2882: goto l2882;
        case 2883: goto l2883;
        case 2884: goto l2884;
        case 2885: goto l2885;
        case 2886: goto l2886;
        case 2887: goto l2887;
        case 2888: goto l2888;
        case 2889: goto l2889;
        case 2890: goto l2890;
        case 2891: goto l2891;
        case 2892: goto l2892;
        case 2893: goto l2893;
        case 2894: goto l2894;
        case 2895: goto l2895;
        case 2896: goto l2896;
        case 2897: goto l2897;
        case 2898: goto l2898;
        case 2899: goto l2899;
        case 2900: goto l2900;
        case 2901: goto l2901;
        case 2902: goto l2902;
        case 2903: goto l2903;
        case 2904: goto l2904;
        case 2905: goto l2905;
        case 2906: goto l2906;
        case 2907: goto l2907;
        case 2908: goto l2908;
        case 2909: goto l2909;
        case 2910: goto l2910;
        case 2911: goto l2911;
        case 2912: goto l2912;
        case 2913: goto l2913;
        case 2914: goto l2914;
        case 2915: goto l2915;
        case 2916: goto l2916;
        case 2917: goto l2917;
        case 2918: goto l2918;
        case 2919: goto l2919;
        case 2920: goto l2920;
        case 2921: goto l2921;
        case 2922: goto l2922;
        case 2923: goto l2923;
        case 2924: goto l2924;
        case 2925: goto l2925;
        case 2926: goto l2926;
        case 2927: goto l2927;
        case 2928: goto l2928;
        case 2929: goto l2929;
        case 2930: goto l2930;
        case 2931: goto l2931;
        case 2932: goto l2932;
        case 2933: goto l2933;
        case 2934: goto l2934;
        case 2935: goto l2935;
        case 2936: goto l2936;
        case 2937: goto l2937;
        case 2938: goto l2938;
        case 2939: goto l2939;
        case 2940: goto l2940;
        case 2941: goto l2941;
        case 2942: goto l2942;
        case 2943: goto l2943;
        case 2944: goto l2944;
        case 2945: goto l2945;
        case 2946: goto l2946;
        case 2947: goto l2947;
        case 2948: goto l2948;
        case 2949: goto l2949;
        case 2950: goto l2950;
        case 2951: goto l2951;
        case 2952: goto l2952;
        case 2953: goto l2953;
        case 2954: goto l2954;
        case 2955: goto l2955;
        case 2956: goto l2956;
        case 2957: goto l2957;
        case 2958: goto l2958;
        case 2959: goto l2959;
        case 2960: goto l2960;
        case 2961: goto l2961;
        case 2962: goto l2962;
        case 2963: goto l2963;
        case 2964: goto l2964;
        case 2965: goto l2965;
        case 2966: goto l2966;
        case 2967: goto l2967;
        case 2968: goto l2968;
        case 2969: goto l2969;
        case 2970: goto l2970;
        case 2971: goto l2971;
        case 2972: goto l2972;
        case 2973: goto l2973;
        case 2974: goto l2974;
        case 2975: goto l2975;
        case 2976: goto l2976;
        case 2977: goto l2977;
        case 2978: goto l2978;
        case 2979: goto l2979;
        case 2980: goto l2980;
        case 2981: goto l2981;
        case 2982: goto l2982;
        case 2983: goto l2983;
        case 2984: goto l2984;
        case 2985: goto l2985;
        case 2986: goto l2986;
        case 2987: goto l2987;
        case 2988: goto l2988;
        case 2989: goto l2989;
        case 2990: goto l2990;
        case 2991: goto l2991;
        case 2992: goto l2992;
        case 2993: goto l2993;
        case 2994: goto l2994;
        case 2995: goto l2995;
        case 2996: goto l2996;
        case 2997: goto l2997;
        case 2998: goto l2998;
        case 2999: goto l2999;
        case 3000: goto l3000;
        case 3001: goto l3001;
        case 3002: goto l3002;
        case 3003: goto l3003;
        case 3004: goto l3004;
        case 3005: goto l3005;
        case 3006: goto l3006;
        case 3007: goto l3007;
        case 3008: goto l3008;
        case 3009: goto l3009;
        case 3010: goto l3010;
        case 3011: goto l3011;
        case 3012: goto l3012;
        case 3013: goto l3013;
        case 3014: goto l3014;
        case 3015: goto l3015;
        case 3016: goto l3016;
        case 3017: goto l3017;
        case 3018: goto l3018;
        case 3019: goto l3019;
        case 3020: goto l3020;
        case 3021: goto l3021;
        case 3022: goto l3022;
        case 3023: goto l3023;
        case 3024: goto l3024;
        case 3025: goto l3025;
        case 3026: goto l3026;
        case 3027: goto l3027;
        case 3028: goto l3028;
        case 3029: goto l3029;
        case 3030: goto l3030;
        case 3031: goto l3031;
        case 3032: goto l3032;
        case 3033: goto l3033;
        case 3034: goto l3034;
        case 3035: goto l3035;
        case 3036: goto l3036;
        case 3037: goto l3037;
        case 3038: goto l3038;
        case 3039: goto l3039;
        case 3040: goto l3040;
        case 3041: goto l3041;
        case 3042: goto l3042;
        case 3043: goto l3043;
        case 3044: goto l3044;
        case 3045: goto l3045;
        case 3046: goto l3046;
        case 3047: goto l3047;
        case 3048: goto l3048;
        case 3049: goto l3049;
        case 3050: goto l3050;
        case 3051: goto l3051;
        case 3052: goto l3052;
        case 3053: goto l3053;
        case 3054: goto l3054;
        case 3055: goto l3055;
        case 3056: goto l3056;
        case 3057: goto l3057;
        case 3058: goto l3058;
        case 3059: goto l3059;
        case 3060: goto l3060;
        case 3061: goto l3061;
        case 3062: goto l3062;
        case 3063: goto l3063;
        case 3064: goto l3064;
        case 3065: goto l3065;
        case 3066: goto l3066;
        case 3067: goto l3067;
        case 3068: goto l3068;
        case 3069: goto l3069;
        case 3070: goto l3070;
        case 3071: goto l3071;
        case 3072: goto l3072;
        case 3073: goto l3073;
        case 3074: goto l3074;
        case 3075: goto l3075;
        case 3076: goto l3076;
        case 3077: goto l3077;
        case 3078: goto l3078;
        case 3079: goto l3079;
        case 3080: goto l3080;
        case 3081: goto l3081;
        case 3082: goto l3082;
        case 3083: goto l3083;
        case 3084: goto l3084;
        case 3085: goto l3085;
        case 3086: goto l3086;
        case 3087: goto l3087;
        case 3088: goto l3088;
        case 3089: goto l3089;
        case 3090: goto l3090;
        case 3091: goto l3091;
        case 3092: goto l3092;
        case 3093: goto l3093;
        case 3094: goto l3094;
        case 3095: goto l3095;
        case 3096: goto l3096;
        case 3097: goto l3097;
        case 3098: goto l3098;
        case 3099: goto l3099;
        case 3100: goto l3100;
        case 3101: goto l3101;
        case 3102: goto l3102;
        case 3103: goto l3103;
        case 3104: goto l3104;
        case 3105: goto l3105;
        case 3106: goto l3106;
        case 3107: goto l3107;
        case 3108: goto l3108;
        case 3109: goto l3109;
        case 3110: goto l3110;
        case 3111: goto l3111;
        case 3112: goto l3112;
        case 3113: goto l3113;
        case 3114: goto l3114;
        case 3115: goto l3115;
        case 3116: goto l3116;
        case 3117: goto l3117;
        case 3118: goto l3118;
        case 3119: goto l3119;
        case 3120: goto l3120;
        case 3121: goto l3121;
        case 3122: goto l3122;
        case 3123: goto l3123;
        case 3124: goto l3124;
        case 3125: goto l3125;
        case 3126: goto l3126;
        case 3127: goto l3127;
        case 3128: goto l3128;
        case 3129: goto l3129;
        case 3130: goto l3130;
        case 3131: goto l3131;
        case 3132: goto l3132;
        case 3133: goto l3133;
        case 3134: goto l3134;
        case 3135: goto l3135;
        case 3136: goto l3136;
        case 3137: goto l3137;
        case 3138: goto l3138;
        case 3139: goto l3139;
        case 3140: goto l3140;
        case 3141: goto l3141;
        case 3142: goto l3142;
        case 3143: goto l3143;
        case 3144: goto l3144;
        case 3145: goto l3145;
        case 3146: goto l3146;
        case 3147: goto l3147;
        case 3148: goto l3148;
        case 3149: goto l3149;
        case 3150: goto l3150;
        case 3151: goto l3151;
        case 3152: goto l3152;
        case 3153: goto l3153;
        case 3154: goto l3154;
        case 3155: goto l3155;
        case 3156: goto l3156;
        case 3157: goto l3157;
        case 3158: goto l3158;
        case 3159: goto l3159;
        case 3160: goto l3160;
        case 3161: goto l3161;
        case 3162: goto l3162;
        case 3163: goto l3163;
        case 3164: goto l3164;
        case 3165: goto l3165;
        case 3166: goto l3166;
        case 3167: goto l3167;
        case 3168: goto l3168;
        case 3169: goto l3169;
        case 3170: goto l3170;
        case 3171: goto l3171;
        case 3172: goto l3172;
        case 3173: goto l3173;
        case 3174: goto l3174;
        case 3175: goto l3175;
        case 3176: goto l3176;
        case 3177: goto l3177;
        case 3178: goto l3178;
        case 3179: goto l3179;
        case 3180: goto l3180;
        case 3181: goto l3181;
        case 3182: goto l3182;
        case 3183: goto l3183;
        case 3184: goto l3184;
        case 3185: goto l3185;
        case 3186: goto l3186;
        case 3187: goto l3187;
        case 3188: goto l3188;
        case 3189: goto l3189;
        case 3190: goto l3190;
        case 3191: goto l3191;
        case 3192: goto l3192;
        case 3193: goto l3193;
        case 3194: goto l3194;
        case 3195: goto l3195;
        case 3196: goto l3196;
        case 3197: goto l3197;
        case 3198: goto l3198;
        case 3199: goto l3199;
        case 3200: goto l3200;
        case 3201: goto l3201;
        case 3202: goto l3202;
        case 3203: goto l3203;
        case 3204: goto l3204;
        case 3205: goto l3205;
        case 3206: goto l3206;
        case 3207: goto l3207;
        case 3208: goto l3208;
        case 3209: goto l3209;
        case 3210: goto l3210;
        case 3211: goto l3211;
        case 3212: goto l3212;
        case 3213: goto l3213;
        case 3214: goto l3214;
        case 3215: goto l3215;
        case 3216: goto l3216;
        case 3217: goto l3217;
        case 3218: goto l3218;
        case 3219: goto l3219;
        case 3220: goto l3220;
        case 3221: goto l3221;
        case 3222: goto l3222;
        case 3223: goto l3223;
        case 3224: goto l3224;
        case 3225: goto l3225;
        case 3226: goto l3226;
        case 3227: goto l3227;
        case 3228: goto l3228;
        case 3229: goto l3229;
        case 3230: goto l3230;
        case 3231: goto l3231;
        case 3232: goto l3232;
        case 3233: goto l3233;
        case 3234: goto l3234;
        case 3235: goto l3235;
        case 3236: goto l3236;
        case 3237: goto l3237;
        case 3238: goto l3238;
        case 3239: goto l3239;
        case 3240: goto l3240;
        case 3241: goto l3241;
        case 3242: goto l3242;
        case 3243: goto l3243;
        case 3244: goto l3244;
        case 3245: goto l3245;
        case 3246: goto l3246;
        case 3247: goto l3247;
        case 3248: goto l3248;
        case 3249: goto l3249;
        case 3250: goto l3250;
        case 3251: goto l3251;
        case 3252: goto l3252;
        case 3253: goto l3253;
        case 3254: goto l3254;
        case 3255: goto l3255;
        case 3256: goto l3256;
        case 3257: goto l3257;
        case 3258: goto l3258;
        case 3259: goto l3259;
        case 3260: goto l3260;
        case 3261: goto l3261;
        case 3262: goto l3262;
        case 3263: goto l3263;
        case 3264: goto l3264;
        case 3265: goto l3265;
        case 3266: goto l3266;
        case 3267: goto l3267;
        case 3268: goto l3268;
        case 3269: goto l3269;
        case 3270: goto l3270;
        case 3271: goto l3271;
        case 3272: goto l3272;
        case 3273: goto l3273;
        case 3274: goto l3274;
        case 3275: goto l3275;
    }
}
int get_successor( const cesmi_setup *setup, int next_state, cesmi_node from, cesmi_node *to ) 
{
    switch ( setup->property )
    {
        case 0: 
        case 1:
        return get_successor0( setup, next_state, from, to );
        case 2:
        return get_successor1( setup, next_state, from, to );
    }
}
